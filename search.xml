<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2022-7-16日记</title>
    <url>/posts/885265241.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="88ff46a89f757c7b76e429825f1df6786fd348b5cd39d6a8caeeb27a2c94f428">d361d61c52df07d9e0bf0afb5b4e2d2e02ba94ba5e719f49410bca549a943f5d64728ae5baf1042b8d886e8da77c79163097044d08d6463c1d49a32d90826173d5fb4493c4c192eca6657671e9fb61a60c112a70cf224104db481faf161ff7ae46654213ec16f8020c14d7af4036e4fa835fd532e4ec34f418bb939512053e0424823f5d72c8a6cfdaceaec060f687a5473fc6fcc9578906d7a3c4566d4055937e48b965da5049e28aec73f7f26b9b24d4655f0d3b967a671562e28c7fb5749cfeea76ca789dcbfd04f8eed6794cb16e490d1d141b967b76110e391c43ec30028eaec6ea594b6d69b6fd5b55b684b9d7adcc893247968f2e3fc4620f8fa9608d221895d276e18b959d007ac1c18c87693ef9256972fe858e88944e21b0bd5f9aa4779be2041c695a32fd4793a6aaff664e06723655547556c923ba7f358ba5dd94d63235f0310fe7f0fcfc5a755134404b2d31539786a13d6323306a128bb6ff0e1c4dc4b3677cab84ab2b82845161097f20a5d8055b8b40eca6fe3f65eab64e5518bd1c799a30ade90856f02b58698da704472477a26cd62e9fe523c944aa48c228c8d94fb95e897b4b206cdebcf3e6daf3cf3c0476fe697761301243ef87cef3f3570df88bdc29f76203bf7512d0878cf60fa7c002afb3fd33c7f8cd5b75b00507666628a83dd1ac8ecdceb7530aa7fa6df51aa4d92fdeec380c28e4e90aedbce63e89536aff84b571025ff64f33f0a3c2b8a43682f184f4ffc7b0b83d60f63a868dba811cd0183d30814aba6297b90338601f926a926ce893cea645b358dbec395147a8470b7b77c6ee51022ff0f88593f9c5570c6af3921174fa3301fc30fb49520ddafbafa0fd1475289a088628fe75f60ceb0f056fd970617493484cbac4d0342902656d55300cb000e1c5f17bbb7d9a9a776e21570c16f2de0294362a3259c426088d009b692630ca705a0fdc9cff130ff329a9bf98ae6c7d535ffc9264262116492cb9fef7681aa7a8cde6faa19f9f30ee85aed834305d26d64a704908f2f62d27956ab2a32b342de328a0a12dde3a3e026cbca6f3729a189a3c9239213c745d1da7a3328217a256134b3bd7f6e73176ec46c539011cd422b94512de6680205274c9243e3b92183379c084568dae10622314daccf194cb1928f0a1c54ce456c9d14638d7069ccc2382048862932efb4cd061bfd5a4694593971da6cda255eafef65c49ecbe47ae5776a5de049d204e841b9532271466f4aa1abda274d2d1662e2931ed4e4100436eabade13cf4f702bd5603bd8aa1c866b5e07bfbfe0fac765ce90d187c10b41d43f34d1a50cb85d478b092f54580751abb76e95d109268d9dd031a8b8ec95cd8fbe4891d03c87ca82292cdd5088f40848c06852c7254b744630f5e71f8a5ddcd6f7b84d6d55bf61a9b0101fd0196c2ab8c3726f68713bd4fb64838875cb4820c8ca6415ef01b7a4d778873a6dae7f966a7b17e972549cfeeedf3e18ae10aff1ef61da436dcc496ae5e2593b7c136d5f66b2d880282598a094f58dc8703eeeb61b7f40b2c40402a12b2d19a80536bc60671d0aa052a7a7ba44643537adabd86757c51211ce9446b7d54e772fefc33d5d5cd30a2e9248577e2d4c3bf321c81f600ad62fe6277e21b1cba078c77dd12edba3aa27b869d37aa91a27ed6f2e326409ebb413c169ae6f2606acbd023f2c509de417b35e162497b8e76a8db443b736c829c84f497a5dfea7537262e5b41cb784b5fd97e4b4d3f0e3ca29ed8f3ab9fe68b69ca10c3b1645b4542fc0ffae42a862d357f8082477cae9591845c14798d0f9aa59ae019516ec255086b91da71cc56db83f8382d062929ca07fbccd918d1e101f67d7a0059e0f12c70e5295b09d8168fb3bb56063b5cead3e36b88497565e2a3fc239696230101269f9743cba424b1c586bf3c201141f340c6da8ea8069b0e2992f897ab35c7bfe8a31eb2774b6f896994e66a2c31af8d012d7e23bde91ff3487ad61288344163bab80d6719aaa8a54cf8e1fce6106cd993b187be900619c96ad1bb304de6</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">这是我的日记，不能给你看哦，不过你要是猜对了密码，那就看叭~</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活的点点滴滴</category>
      </categories>
  </entry>
  <entry>
    <title>2022-7-17日记</title>
    <url>/posts/2461210861.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="969a17f93a71ed7545da12b5084e617e73b1ef074f081279253efcc75e438c36">d361d61c52df07d9e0bf0afb5b4e2d2e89dd1552fc6e6d5104e5bb1dee2b1ecc7eee16c48ea126b308049dbcf7d812e043a48b06ccfefba7a0543472bc7a0228b86150a5b0e021b1810c1cb1243f1f81dfa6cd5dc14c903d679ad9d7c6fb97bc2f745810212cb7740b20badd5241d3da74bb9371a0866a09461e4d81db7cad7a7c48b3b6941977022b0dfa352db26abfc4e844282dd28eb499d9150d997587f0da64d2aae09b3e4729147ecad1a901f1f41a6aa1b7938056dbbddcadb15324774ebdff7bb1f5d893f7b8c547f7de465853858c255b4d10fa11be3628640cf61cf32578d36d82e2e48941a08b3d82d482304b110d6205247f8658b4a1c9cbc2e6eb9a966e781445d8fb3811abdb9948d8c45edecb34841528908c0f4ecc0b05de27da2537ddb89e6f558aa90b13f1658cf75ee8f2e7ceb715b2a0285ee645bc90a8f03b39ec8472ca7abba5833425e8b468dbf3026f65786f37c6abed85d0424d47261e50f6685396d93462c2111d17da9e5559f7aa8dde5a32cc712882288b9e419aaba6f97ccd12e06485a490990f10d4cdb49e63d103103fa06a13598b155a8d55ab0af79236bfe3d5420ec211ce9ecb0b4a6334d87011cc58ecf9d51006eb6c251a44891296dc28fbdfcac55ebaa75628e8d626d9186020e7fbf2e419bb05fdd9bcf70a262170ae5e7dce9c69135204a27774239812ab666cf78e24be3e6a20c844cec015e48688b897ca8cd9e53b18bdce63e318a7121e9a8a7798bbcf22dae0f3037a3f0581f8fe90385b0e6a7c44ba8fc00bbd2ea9bb37ad6e4bf0062db8e44a0a080539278933ca4d07eeb7cda5ab3788b2a464e3d5ba4838e12fc65b7573803f93daa772509f6767619290737753cd74dbf17c97f6f4e874070c33e9dff7d256e3c0d34349f1c3211549605152ca345a3cbfd83285bc200cbe697e23d4a7960654cd1a8d9b0dcb72df6655cdcc86e71bfbc248753a679d857166849362669e011592dde0a3eef8462de282fdab6c604769f287e9246586b31b6b7bcb3c926470ad0086e4079ec6cbf433f914a55e5827c14d905d37d0b2c81deff773403f131d000de89767f0509e3e0b1163ca85662e1a14c0b14fcc642f0bef9353f0335de919599749da74c630f79454e7773c4713c12b1ada15c0a1aab0e077d92672a241fb78bfeeab205de8333209ee0d2220115b162df892b6928e3630e9719bc4aba87b68af17fb7ac5165f826e77b72b35dd95804ad9b475ebc98bbfd1fdd568ab6a80cf402c34ad88240cdc43672e7fb8dad153f82edbe3ba280545c1825e091c06542360245424f3d195089d70a990935883d69c6e44785d26f106f22ef844cc1fc246039e55d5ab1e9c4f0a9703e508df400d144589452fd75e0a0bc2073893b007e79f7cac7ccc40527625d017a1206d09971fb7eef2503d7c1728b1ec77e1d30e84a2889b1acc044861f194fd970a4bd56976b4538134350db1d5ae7c034002bac44e6ac69b81d5d31c8b5cbdc934f284d4073e083ddba49e015e018d3ea724da6b6bd4923f666494696dec31001e87c95b33c5b2bbb4d2a7634d3ae2dc2f9b0cc83c440fefb883208ace1b43e980b74f224a5955f5f49036bc2dbb86598020dc91e8777d8983916283d80a2f132798e735e0d821f4a9898613ac3ba1a5bbe51ddba73ca84ab46cf75171422eeabe6ea263ac09e9ff3cd9f53de53bbb900c9aaa7988817c610781afef44d5ff4347b9457e19a41684cac17f12697d35d72cf4bef3d8a421485cbf2fabdc4fc316d0f3055d1922109460a036f4cb987f9248882c28411508034bedb47ac4e60c24419c45ade854404d8d3c4bb17c969ca3a5fac8b822c432499afcf04b21021fd92449c897d02b0379fe2c3ba708ded8c10bbfcc43e7cc1b3515751ccc06f95d041377b511e4d6886ef3473754e5651cca48151b0896c502a3e00298a3ddc1135061813092a8cb72540559e633afd9d849c146e645ec6a66f2d0783b952f835e718fee63adf4f7b3c78000f02d5a5ace4b2fc00e7d03e709fa905941c28595d9dc40a6270dcfc0f6a46032cd42c85543bf5528949dc7fd1e4faa5d2b0d2b13f22ef20af661ad1db8091f742d441693523c4ca4087624680af8ede6e8c3fb7a06f92ba1d2f89528d121e2bc857149d6a8036403a39df44012e99f52b14c5ff53b701172e39c796b2612f10b0bfdb70b348026b96cfd8d201ef59cdbe60ff0dbc22dfbdba3149a48c6df4b7448163cdc35046e8a2bbcc649156ce9aa7b31c0664fb89e89e4c74074514127c2adc633f61836785b8aa3e668f3717028b1298ac8fccd0f59c45fd4b196ddba145db51086c29f5033db0d2e4cae2e31dab27a3b154e164b4190f2f992b624a558a280f6e37f10ddffa7899617a2715c47712518ecf1e6b2dd6e6ab88fc96c73455db6deb2dcf0284645fd87fea13c32ca40cd077e9bcbd798bd5eb52449eee2cfed4063668974eefc55fc6e6c01829810d868bb5e1d77dcc6bf582d5313a225a1dcbe09dbaa77847be7d5ada035e4e6bd3b84ea76ae44be9dbdf485303199ec14092e2278654571fc9f35003350c7b48f64eccc602173ef20c5817f1774a5cb30bc95f4bed90654581eb44170daafff2cd2190c5b3b6587c79cd5dc4a2ba15c0f9d1babb4acd38e47de5c25cf1c25f87d037a78797e56992be8e6464a06fe1791c0d844f6a6bdbb60654863fe298d50c35638cd64927cd363eee07e268defa12fc24fe1b5</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">这是我的日记，不能给你看哦，不过你要是猜对了密码，那就看叭~</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活的点点滴滴</category>
      </categories>
  </entry>
  <entry>
    <title>2022/7/15 日记</title>
    <url>/posts/282847613.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="d20ca1151617161b873cd47a096de719176534173db4fd22d15d5e7753fb9a61">d361d61c52df07d9e0bf0afb5b4e2d2e02ba94ba5e719f49410bca549a943f5dec97c109e2a0c823a89b7369ecf73cabd9ac4f65976755cd722fc2588820d3ba9e1cb0334bcfe3b9e2e4df3f20445dc5d03e025b521abbf17a8d8307e25d17aa0a51c49e135393c219bdb9bbbd09852d09fc18346a6088869df7acf4ad53ada5f7330db3ab9c0e7ae43d9893b4e7d62135afef93374a786cb8cdc9ff52285c5a706172d0366a995b7eee51fefaec29e6d5927b19a9cf6b713ed3c5ec829eab92c861fdb555cac2d7e256ffa9b24c117ddadb85b29acb1cd13a30b13e503e528cafb47976aa4fd5ad4e87496ef7e2f810cf6de42d0d09e71dd2d8f6d8f460ca790dde0298057ad006d1fa3173f52a21f952f377921c8b2b65b82f085bf5e8a5dae3d69adcc738d0f3b01c372ddea6ec882ebc9db7e85bc3b2a62666109e62c7b35a27ae1fd6d4e78b62fced9ad94bcbc05c1ada708196737d01e78135219933c693d6edd274122a4485f872b5f16bd223bd92f932c458dff0d1da51f833805aca41a925bd372a84117eb5c1b1939f9b07fc3f328a7099e741893dfb216a9d3508629bbfbc7b35d254d5b2085f02c9305042f1aa9c455e18dc7425f61a3dc0fa4fe698204afc4a8c4dd375d5dfd0760232a24153ccadd468a9c6ece5e96cc0523bcab5cafc196932008e7468cfd79ea1b126418a02ffcaccea4b9f6bb530a48b0a6cb0872e3b28495e534aa24024a374027ccf7fdbc4aa74b86a8c5866e2ca77deafdad21b3a5b27305a77449c8db0e3c9120d108f4564b9d5cba40bb0935ad70c1e928a488195f05b4cfcc2e288c46b745de5bc6cd91e795b34ba35a481c52222433549145a74a0301055a5b9193d9e083cd36423d21a88f2d45b2f7baa94dcae26f6ec6258ca0f56f3a2412dc9e43fd92612359a9423d738bd1c6affe29bb290e3eaca261d71986c71d145815cd24ede2cc3d27e50ccec365b01ff69f2b97ad8518ce113ab213135afc492dd3b3741fa7da90a4944471cb486a4c1346b837674906b453ac9d628c88f25bcde35dc7ca40de9c4f4507d0bec409306f45d9a688326d37660a9eebfb2ec834fe47b26d15d9e19aba41d4099db37aaa28a5bcd8cff65e0fd5a83ee55b2788d3da8a7cad2015b2e4c17cbe5608752ec64772abf9c8fe6b06f8336c341083efdd43d2f16cf23ed1e841016e99a74e939389ac424afb7</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">这是我的日记，不能给你看哦，不过你要是猜对了密码，那就看叭~</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活的点点滴滴</category>
      </categories>
  </entry>
  <entry>
    <title>2022-7-19日记</title>
    <url>/posts/3263980464.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="1bdee5727b386e0a26125fc405a7fa4596bb3c0ab18343ca276dc07b9e2586c4">d361d61c52df07d9e0bf0afb5b4e2d2e1fcfbde3d99e04359b12aa9419ff0b11904bced5ce3bef80b4ed2df249bd34d6b81b3b49818d099bb6c203302d27a880711b434f07ad1389c8adc8f3400ed6e9c740bceea030eefd4d0aad3ca0712e861eef85060f00dc5b105f231cc2f9e2b8bfbeaafff2774b3d687fa0d54cbfc0a9f4aac45b97d66ba71cff42663019fc64092bf80b643bc98488bfea81d497472475089bdb7c8aee39eb5d6bb64251ae7d0df43e5e33c97edb592e044de455ef2e55d02f3fea5c8514661a59388cd6752906d16201d8122d172ab36a7d1ee7d58c87c674dd2dea554acaaf5a0e93bb730e572db3a117cf06e1b8e530194a94de7442fd94c4439872112e4bf700f24add6aa11dacd886840b72cd88117272c90c60e2cc341a6ed73e47f92655af733f21b34ca387a0fe4f80858fe3632fe8df5955c499882166d9221dc752891f4e706191a0664437017148cfe0ae6d9bc32f971d11f285130e346aed55ddf1903aa19dbee1715aeff8b82644bc004b0056c7bf41dd0ea53ee73fb39ff03246eb1a4b5ae86b1c00882673c8572e9bfd2bcc6cf52f184e687151d4e3a7727d8d07d3d8704fd89bf496ba9fee2bcbdcd9552fd297381cde077bf0937e97ffdbe61d721bf5f304154fc26d76dd95d3f146eebf39ed121c90e2586693ac0749ea28c367a992d60fbaa79dd514b570917eb3355a300f876a215ab70c9165576f2382cccbbedd62d69663e0c5932c56c445a0b68444dc28739da7b5b5e3f15db1126b0993d9db19e07fe1b9e623181e9007719e380d8abb1b1720f01ff706c64828f33efbd42a91de1e44f2b62d2c4e29f8b5fd0830036dfbe952f681ca9de31a7428f844ffce8f113a638da5f524002f6805ceda151c9b2115e8e60e54e7dea9da057685b724699ccd081ab79fb56746bf48a9cde519c5ad4982b6622dc3082911a283dbec16428f624ecfdd9db2cebdcdbac28b7e99ca08679852a79ff9093086bd3254c1c6c791f506ec032ce5d1920fd11abf23728abf50556a87dfcb01a4b5646f253d6dff87f88216515cd1a4c794d6c70b31e1e15ca411dc1277ae67ed67fbfbf44c093efea5c999a2bee6e2206bd5a888c0961f802d669543b0e80791b338c84b4cf5bc7f93dff78edacdafbc5e13152677f0d51d0d20b1501a9d982c1065413d4692f2e4a8b3e6ca5d6442370a24412892188acb6c4592b6709b9bb94a2e5982ff799ff6e3bddaa0beab062e630b47173d5f5b451ecdbf18e1af8363813c7654f4c545989829efc1a1ea02491a21005d3606012a6103728bd4dc2420b6dbf768489adf9e63ae9b6b5842c96bc7da38ffb6b9daadac534dc737fb000e2c3d0afcd39b4e61b98eae92993c226fbc51c3d3ce8139ed8a3d53417d4fb25cc901267645a3055b0aba74f0281ba84816fc19a245cd207a986c720dd18db05587770ca3cd822188062c899d9eaae907d9f35110c3e7aba0115a4eca4f0cc539d0b2cbcc7aa552d177e253f96e76a568411d22edf35a0e810c1daaca32530f29a147f7d943ed6ce802eb42d64a432429a4ce830321660c6fd86671016eb2792db02acc9a2b18515d2f77589ef2db377639907ad3d2ebbc5383ce5298f9095250ca11fe312b6fd1c3ea892dea6425a55399e6fedf25f28dcddde8a8aaa564979322bec51d39e69eb8d89da0300852a24cc4200b8f321584603afdd1d9e6e77d32a417972ece5b34eb3f776fc0cb7afca52b869f3f0e16ad097a4b7cd4bd8602885cc33cc1bf1e99010a3d2887cf181389811b1771f58da069799630c483b165f48dd20cf9c35dd253e417d15d372e7c30f27a4a3f8ccc247d491d7a65d8d14a8bdb408aafc3e239796f44f9a0285a91915422a660a1660d949bf17716d5a0a05b4a55366220a3744609e7d3b983c4d1d7ec5f361d1e70f37a477a294bc8f26b0ec97977f8ea4bf29445b13f6231dbd847ac87df5c0230a5bd46c8160c1e195c6ea651d4bfcd1e4284750ae6aac109b690dc94afa6a58c30e68e2be80254d9ed0806aeb9af0918cf1c97d0b17087c44cf8fc1fc6de8271272140fc5e2b7a7b21e29de11c232c15f869fe36aa9223e10e62f46dafd7540ac569db93f57921986ab2d73422dae920bf9fa7a13b2acbb80ee3760c37686944da26327e5f2ebbacef963c171c1db7a64985ac411ee27aeda9deebe917f74c0577</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">这是我的日记，不能给你看哦，不过你要是猜对了密码，那就看叭~</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活的点点滴滴</category>
      </categories>
  </entry>
  <entry>
    <title>2022-7-20日记</title>
    <url>/posts/3650822528.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="51e6216a9a3adcc96530faf6743947453bb88906b5822a2b80f85e0a1ab0b809">d361d61c52df07d9e0bf0afb5b4e2d2e89dd1552fc6e6d5104e5bb1dee2b1eccd40ee6aa17b6adfd50665638570e5b1c4bfcf772125c8cde65b5975dd961f9803fb42f9ca3a47d1ca2fbe7f57a0e8301df44ec491063c8b69635079c99580c1dc87723b899150daafab25ae41dbf74478c3d1ae0a2e7b0cef2b840ae461c07cb0ef56ca80f8c899ba0f452fa92bad767d247d358ef68b6fbe3460c200ca4af5ba1190ca8e738816a164c131b03e7db5fe1389fda46888f7e8860a728f2ce19060dd8d72fa4e9d707909a22921276284724efd7cb221418114119b73abc485f19e8655451350dc87f51e7712521daec80195710ec465edb87d6bf402b1d1598b05b266a1457b6d234f4d86cb8df029db0e40a606f6cfd50b30d79d1eb9dce601989274e969f0e1c6b26d6aa49a7871b3c9bca83e87a6fba9a3fd4b5161799032d6370cd34a9087aa645c0101c3e11e5e940343b1061e5029e4788536d1a7966b3525dbde99a0ff62eb0999d225c125a7d3d9c9e6cc332a8bf58bf4307aa54184da0f1f95efa87046ff1685d78d8bef4cd018fde518e6f6d3c2f4b2a65371a93a7124305efadfe29a30db9d75b9a5837010b2882e2b49c8e60d253aea381bbf07e8881527f90eeee2fb8908f6a7285f6ab3132f1baeadd04e0bced2bbd5c9b1d303ce06343168683f402b1f266b4005624f9a651884a03087bee3f8a1235fb94764ea4487667d5f0fa17497d7717cceb68bfe847a81b59200c5b57864642cc369e97c8e2e07dfb5a3572c44a59b639b1ecf4e34a81d8123477f10e2eda420bb75f8386e6a47d60ed829718843e9c21fbd137d4cdbf74dac47e0de5ae97d8449f9d9e7fea3c86505cb139622f3df6579e7ee8c377ce8b0fe897830fb310b1c6e5260519d5fecb020db40e5b2ead074dcf9d9e2fab5459f504a6baa949b1f4b93f1e172e5f77821e27d12cd52ef92168d8910da1ee425f390ef2f18153a8900e0ca2cf08ca05f678d92d570f396bae928ff2314bec52cc4b64e269f78c87faf15778e9c38a81becd6cb642700f8b65b38df7f840f7e9ea1836190ecc9adafc4284d7798ddbe8bed55cf55d06c65778e079eb051f2734fcbd81ec75f960c6c92be40324e22da658ffa316daeaab82cbd932c9904629e5be226a3e550ea78905c3fb563b55425133ea5b80d7b176e1119ddfdae391be4cf0e3988c8be373a39a2489def726d4ccfdea09ff152120452eb059d48f8d358ada2f842a09ba9fa38944c22d80c297ec65990343491250f368770fda93f8a25c4f59c3786e1bdd7686365a1bb78b7f1df4be9c88110d910b73817d84409dbe7d93df6dc22668000e87863332a3581430d787ecce98e7d50a8cc6b9b8aa272ab6f72f786178e09ae35c3cb5e17cdd2c9628a79e65f639a07fcbc946e1bb996950c7f55c5b03df23872a922c17007d9fdc6c039d5e1e5261858b76d018b83b0abfc304a98cb9cae6ac11efec143d581f646e17b02da8c5d6b441a526c85527c00db52272f2e6b1dfd16c73da38ba2448599519500de22272c08d5ff1674f15539c407a94a25da332972afd8d568d43879376d44a67b7ac91a6be3cb00b9c92d85d0b9c370400dee7c484deb550c3e9252c52d61b94e97c65b3a30792515553cf1a01bf64e9490da82bde9a5138</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">这是我的日记，不能给你看哦，不过你要是猜对了密码，那就看叭~</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活的点点滴滴</category>
      </categories>
  </entry>
  <entry>
    <title>2022-7-21日记</title>
    <url>/posts/2146183732.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="ea4d881685095d93bdcdf01c651cae560cac12803d1995489fd4210efdbd6b65">d361d61c52df07d9e0bf0afb5b4e2d2e89dd1552fc6e6d5104e5bb1dee2b1ecc244443458c3942582f194fa2a10d88028852d12b3a712bcbe494dd7c0032a43a4ed24222d87e57cfaf346cfc505b4ceb7c3e4d6b095713c48da9ab5ef261adc385cc518d7a9979df23b16d77344f2d16152889b1f646ea3b8d5f02c4ac7dd06b11ba2d3d89f00e90cb0c824f65623bd0f8d9f530348851dd5a5fbd2647f3a86c253be922ed73cb4621d6fbda6a6650fedccf19fd7605d1d41d05c01e790e326ec4230f59f242530bb9686b6cc23b0216e5e60178c2b4659519bdea307bec058c8e4f8352600cb3cc0738285817026aabcbef0ee689d354007441df5b2383b6a21ce7ec763e90f9d2c506212ef813a96f53c38572ace4be99ed29159d8d90a34b0c7844c4dcba2f2d4c6696e440496b6c051842fa4856aa009f2176a1185cc59488410e30cc18040c27468152786a31929df621b5b99a7ed0833c6faa6f746817fe5b70c64bd27859a58263b98bcce1ce8ba5e5d021c0270e645de1ab5910fa101b326e5c1b998f34fcb8107cb098052d9e3a097d3ce6c042b7ef356169b288e102ef55bb40b9e3545e8b512396e9dc7facf7e04f8e0955a55a4e34651de40f2e050f4a71d61b2cde41c569f55ebe09beb4559047dc0bcbc4c7dace706b53d6b56462c7beefdca3056b72c7be63570b30848572c3886c9d42444685d55999a5c8b0666b0acbb89ae8fbefb10e11f90d1d82978ab805b62b7043126d14285ffc0293eddaeba43b1825b2416ec5550b7d91b82688d22ed301f38e8b29a5636cb05ccf4fb1578abe5352251bcaa88e85c935427c52c722f35e0ef0434c1558a6cd380d67715d5b401866e44efa0e1d75c70552d1f06548c03c279eae2d39b4a84e888e14dd6419372661d8d25c89046be05a86fad1acf12732576570ac2905c0941098dac22018e1653c49590ec6c9cba5ab3339cb7522ffad9c19e502514fb87a3d22b0799efb99f400f2efa2583926d40fc8ae47f493d4f0fa11c8bf3120fc3c9aca2243f94086c53feae7a9ae5ccf2a3bb0706de1b4e490a17647e495ed415138cfa6c9b71e27d699424b9241bc4577fa2fce9688aefbf558712c8c9d8003cc640c8b041407deaf944a7d92a7326a377a9bd9bd1e0c273ed4c52a65429b5596a364414e1240e6d6b871edd07b9b8a8081816ded76e8c5ed8e5aabe441c50f6382cc3b136dd03cbdcaf54cc8c53619a39b3639a33c7d452f51dd7567e0b3f55689624594b34e7555c40a9a6e4cd1ff75c9232fdf07f5de9872c31560fe67a92572143496506767d3b0f4d42283b3ada3e6b3b2959fae1b49493a08fda94f85eca22b19bd5027a1c4ae796bfda16b6a8a537c075f7968b3c19872dd0dbb97fbfec4fa38882a169e141eb950ab6a905c5e1ac08e8d7838ac3c39d3448bb19e40de7c3d5923975d2886dd3150aa2daea5e21a8bc9e9b8cdb72ca27cfee1210825ba534bcd9dc2e8fec4611f23375b020330806e48a14a114c88f1b8b853718eafb5b4c60bb026d429b6f86aec80e96d4b2861332b6f18d7f8035a7b2363439dc71ac7749aba0b9950ee101de7e1f5579f062ee08a2d3f3fe08607988c31de4a4e56e06d3baf43aa67c19dc54ccbe07237a72eb404f62cdc264cb9eb5e02f1d85d0bbdf2a7fb81c4d4ccfbf9cbf626260b137711d6793d29c253376da6bf68bbdab69329daf784f692247b4f39de1dbcf303185db4755f7042b949d6983b3a5964edf6ecc7dc3ab9ca54c8f764b460dbf39d59b5c315f63d73a7e71e150b1302bb2e44577250857248cca845c7ea17f3c8f53545b60a348462d27086fb71f09fe9579cd5a51f07b34eb5e77cb131bc3145aa5c7979059577d8cd031860338c4e6985b11a2cbed6f8da93902de93c974d7239a0863be65d7870136a32bb760871b41c854fd51b232caa881ea0bede229f384c058f4b256b3731ba24d9a8d0759800c1b7578c653b958fb7250fbc5d9f18f1fe9e3a69c2d7fc3622eb4e9917810cc0f780206fe50a49c505f03f16f97e483ff9e212716fe1252834f836f078095128434160bab149c793b3ef68652fdb750aff52e806b0e1b1c6c9e4da1bc65037a453acd6e5fa522e45ad36012f1d9694551acc53ffd53283245adac14aff44ae56af378f6febe0c82245ab9f78185dc450139fd523ac9281ace63780aa4dd03a4ec54b860ad51147e7302d95ba8b51eb42a5f50d4bec0f6f80641c8f2eacc0faed4dfa0705e87f6edb7130ab19059d141a8d77f510e401acab9d9ba28ac06e68f2c7e2de022bed7f029edf1550d041592fffbe333d9aac756fe3061c02b56c62145a7299e4f2b0240aa61c9ae2348ffb3a599cda0d9d951bf2c1e1993508d8928a7df04df7aba0d50ceec51d5a281896c8488ee031ab74195c032315ae2f0d1a693d9b6f4b26219911327d34d5c4a582c93d3c20006c66a1f378ba02fd7bc0c9481d5ec93c55bf5fe0946bf255405abd2dd3a295160bf1afb7366fb7c7bf75aa2329e6b9f11fd6ef805b2a5c6c422406bc7bd6b5516a0c06dfbc6d42cc8a1fcb9d8668df5ca0a7802502b8295b7d169619a86f780856189901d00e42dc566cc35a022ef7b14bea2d90f650ea4aeb0d748ab12e31cf7dd899bf61a2f76cc54702a605a225bd55a0258d6c29d6d82ea9f450c40aa800d84cad081f2c59d027b5020597c9cc94669c15106e60a7fd698baa6f3741b17e4973c3dd514e45cf5efa7b98e345c3a1d74ccdbb2c3e7e7c937c2d9d288073e3cfd1f26533b88122fa97940052ba4cda3882cef9d397587882822c8b4e54886383f7b176b0e50cfa3d773df74d78bce1d4f2a7da9102e2a386767241c04b50b69d5521c7b7e845d482d62142a1fe1e45fa25cde8199688102802f294bd8e0813aabbbb1cd02617b5c45c9a148e8b9e9e87998b921df54a68ff0c213d15cd34a7116023e5bfd07ea584435cf8d0125a71467014e807ffac99b0c4beb7924952a9b13ea0d43ced13fa4fce8523f47cf5791d2920059364fc1606c820dd0dd4c7c6dbe8097807b0c3c977b4e1547079e1fae6cead8317238324350814040494acc2258a309ebc892b3d931f65577490f8536878928184a8c9f6756324297ea6121020384529fdfa65c93259f4513e08</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">这是我的日记，不能给你看哦，不过你要是猜对了密码，那就看叭~</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活的点点滴滴</category>
      </categories>
  </entry>
  <entry>
    <title>2022-7-22日记</title>
    <url>/posts/1308897449.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="e3e57f6be94a21c15ffb62c47fe876b24db79112d153af15993106a288f0a75f">d361d61c52df07d9e0bf0afb5b4e2d2ee486021818387608f880affb29c208666618b608a7d69ee9e01ce8f5d6a475c42e8adaf6202096c3751ef92b588913b98422cceababd5cfaaf8546458e7e6f6044f82b52e691ab09aa6dd56918542910eb48e728bad230755a81b0ea5f5db79996a463b62d00fee30300ea2ed0e82e79009fd9ca48886cd9f2857192222e2ed99c01bdabe232c4605dd96cdbf276544955dd5f6744087a882ea4dea08b3d0504793ca0f96e16a8c60002435af8ffeb8536093f30615c9519fde50119fbc986d00b3c7c896ba444ccc2213c58208b729fd6a5f77b3db6616e158edcf4a23d43830f6d9d4e90c2393bb04a8a14b3a34cf41d77c0726ebc847cf4ce59155d779d346de30d735115d336894beabc510cf995a01888ef07bd714abea6779b31b916a3d04f4f6b9cb4e73ffb2223781860c8328b10b2008d64285af7ae11fde26cc6c2781db5529f7a075b86208564440568919af919e1f2e36278bb9aa7afbbc7d35c32b9b0e4e175417d68edf87ec9a69bcdbdf908d2ecce102da77184ddb93ec24b4b04172e3e4f4b599a367b09bab115f08a82674124fceb0df8e03517113dde64d6ed3f5e0669fc42baaf338091c7079da0145889dad40d01854da63b4f8d169bb653429e776dc05cf97ef79c0134ed9c24710a17bb9fbd7cc7d10a737748bd8afdb1c8da650da7a04a3096cdb67bc9d8bac9449960f8533a04f9b73eaf51cc6e755b87dbeb02184e0a1fca4d2c7f8b558cc436e7e12c0a57b98d698e33c89abcea073605af703434fe4f6d4d97f40648485e954133ea20d0b51393a9926f8540dfbcf7f70292f3b5e7bc8370a71aa3cb3de116af707dea43c5193abab5bf7ba50a3947e47d07916ce8ec079f89e204dbaf3406fd2597507eaea08e706e2ba0ee655d43e531ce742102bdcff51b98a102a8e44f0a67aa8f82837049f7b6597629523cb3c86898d91371653f2a26a5eb41c5b528fa95a7c35b991aaec92a01fd91b5e34d231c38e5a6ad52a38da390b3a07f62e832ebb8ab6a2c51bc40339edb38df537198e7267c19fe9c4278adc14f3c006bff49b396ac9ad63d00c1abb84440034b9a7bdc2892504c9a7418d6106f4f1f838e7bac7ce58378a3eddcf99251f22909af6a0623a4f1428dd466f0336daab1012545389ee6b55b3422d3d89e60c514a965c7a16a8b559046ed771d464225df0763d645f0ed754933802dc879f18c00e64a9c877d2e8d4b2cfe5e4ddb261a3b00b0edf1c0a6253831cf6b7f03b2aee4aa5935fa4c6171fa594d82c56513c0cfc48efdb9eab21301a0d0ecf19a7aa45390fd5b4b3a85ef227b0fb4dfb04ffca65c75190d5f38d491d386533b77ff8c8f4d204bbe0de125f44428d2f0911540b5ab421850b71b743dc373c2c035170e97f568cbffd29247a30daeca4b768edb71c92c23c3a00f78407ac7eca62aa4eb5f5abaab3b5509e1e594b9d359ed43870cf36c5bc8cadc8a8d93b8c061991ea58bcbc3a1e8237f430d92ee04a106bf5db8bf45213d23f9cdd76ca6a3ceeb390c1fab9f099006dd24e3402bdabd0ce251a7dce4bc38b8a966f1cd8b2245a4d4aef85033e0e6ce8171fe82c1b7a82891c4fabc9b5b70e2cd70449815be35e86d4a</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">这是我的日记，不能给你看哦，不过你要是猜对了密码，那就看叭~</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活的点点滴滴</category>
      </categories>
  </entry>
  <entry>
    <title>2022-7-23日记</title>
    <url>/posts/3899865885.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="a11d95bf1f72914586b69c6ffd306d88ad9750ae9a123ea083efc735e61baffc">d361d61c52df07d9e0bf0afb5b4e2d2e78ee05982adac9e3e1e3b28a21e805bf3e759866d85d696c106097cc5cd7ac128b36690422b0114fd651e3e0aee9953d2e1b58b382e355e529e2d68491aefab089ed8f0eed739a74e0100417a5ca2e0a260b6944b2a7a9c7d22bccd5c14f8fbca44b0adcfbcbcf862a14dfba6a07b7e51bd7f8c8ea67ff6c4b4de57ea6fda222276d7f1d62f994e17d7d5c64dac52762e3a0d931a09334104dabf968d5826ecd7a32bd98a3bc7bc736b5394a820f5ab65401930b8dbde88919b92a0e2abaa895e097a34afb874ec2e844f6a3cfb1c9cfa0089ceee425c49bb611b11dab88ff9061925155d4658466f896460b8236bc3ae93059192fa3e5e16f095b02dee87f596f47c70387426aea10893809459c9a7f9e35e8d9949c8cd284f00c4da0728c67e059215f280392496b22f0e52762b1ccc02b78d641b9336aa467677f59c47a43031ab7cecb208f08f13de1b7ad53178610b8b6b72f41a32796b4db048904d892f054fd3e0984557c65b5bfac9ff75c1d54111aab0f4a7f06e90fc3a8734e9de55109f723fa9603f0636523c1647b7ad1be24b540f73aeeafa736c216ab6a6e8f2673b5a7f5d87e83d943df51050e82f8595426535aefbe6e57ed9edd66ddcd260bfb09fe80a29fedbed9b7a064e9a023a44fccd69a4bf024f904edf58dd9caf9365175186560926a11d98a8630f46128aef34d70789c4fae016ef126b9ef2783125a2bb2142d395f396e51f795186ba154702788b576102f415768bad6c74be24e58fcc40b2f078c1263111fbaaf78aa83c6005dab0de3440b734ca4735b616885d22a3744d1392b9199c2d2ad93950ea29d037be4ab3f047ebaacd7fc1ae3640cfe8731a74911f0264795bf24390ef4ce5f333cb44baa4bc99a74d69b4fd27d5e79f7e7eb9882e98d3798e84c7cff530293f9055b3d4e55bc03fdfa32edd6854e23a1e154158c48382d0113924b87ab2f22a82af869414728ad2ff9dd049e148a10faa52644c99d79e7afbadcc31b88e6fe67019bed85217de65338468b03f1ec0ded2661afb8788a7033ac609547df1154f79281e20e087ad0a9e986faf6fe593a62cfb0eac04951b8d1e8a560ca8cb1c5b3b9304c0d77a12b8f6b9c1b684d1142af84e7c5d2402f7c522e9c68b29d38840f5a87a67adb8e572f90afbadc7aeff241316031b72421fbb55ef5d8067172878c7c7f38bab95ba969cbcf111d6627aa979e3b6ea0590a96e066803b8ced31927dc1185e270d5955a21cf39a76be4344286b5dc87171a1461e66f01ba41e7ae22ec04d136025307e1df1472f957815b0dd8f29e0aab7b8cf7820282968aa5f93220ec98d869f572ee2700ceed91f749fdd1351ca8a599ff36363c232e933c004ec8c3e401ebcb0d954dd14c9bdcbf99bf53e81f937e20537e4502ba2471debc74b6c570e15330865b71e362c907e5e51666a07268d99ade3b1f65a18c0df1a9aa04fd20a8791bef17dc24b8f8ac17591058c881025d3be93579729ed2d7b4b61b3d9dbb56679644dbadc5f43f76395555103d7128c791279354d004c5efdab96369a7f3c1858bb1e9a5c4ece47258db161cadedad0e29063b92febf9e5a5da16781c93dbd2f4b50b73afcaf7bf9fd1e548b43a7e39c32a0de4571d45fe88e27741a5b6cd3b67eff340fe01d14cb3c27aad35e931114cce8565d28cd5f2586b76355a3610e7886a922059a1e1a017bc8a44960cd77c5578e5959d935559eada5f5aa7aa434aa0e166e017fd5140f16a553794687d3cb4579df830c2bb9434999a06299ce7b674099a51f10f2b3c5bc8a59a7f7967d15beaac8fc5f626737bd3c115c07ed34e3f1c8700a38e5797773038d37c8813d8529a759df7c775c942768014bc32a9edc2c6e6ca99e712af1e0b6080b3724072595e632de3f7b5460e5d98e0349f64124a1ad3f937e328435d</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">这是我的日记，不能给你看哦，不过你要是猜对了密码，那就看叭~</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活的点点滴滴</category>
      </categories>
  </entry>
  <entry>
    <title>2022-7-24日记</title>
    <url>/posts/768869779.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="9123e688dd94a090b0c2f8d6c756d2341755d33b9f7b57625dfa74b1060145bd">d361d61c52df07d9e0bf0afb5b4e2d2e89dd1552fc6e6d5104e5bb1dee2b1ecc732969811bdf064c80278864e59ccff8c7611407223cb22124a51fade95931c9a4bd0cbdcab9752e6f2c70759a9b6f78615f12f56ea99349cebead08727ac62292109f820e80d6cb40d3e2a11150c61cd5de8779619c5930296a18e0bcaa95c923d2344b614326bd4b5b6ea9edf1785fbcd1aba9525ddfcbf94e7e2e617c9ef7c3d60a684c03ba7263fd34a14ac501d9a2897585ce16ffb1ebb6669124c06b0e3b595b00aa62d2eed62d91878543f7b7aad6eea9135706cee8dd8e4c0c1c8008c315fe8e29d1ef3cbd0f074954c4372d5c5a3be9e8c7415b20bfb1b9eeabf24b7c63a02df4cdd4ffd1f2f02d1c77f2533bbddc47e65514be1390c25997e565ac530308d0647944255f53ac362ccc827fbd99b9192510bf169b9a017fb6738fd521fa0c58eaed43f3a61c2472bb7f7a4cb6b204104066ec388d2fd044d03306202803b36c38b510830ff44ebba8247e41448a59cf753f178e82eab2886c379c675e5724401bb64b63f75d3b8d8b61eac157eb24ae52fd7f1b5f90798e51ce98a3d0666b3d8c6957d8519bc6642a2b082890342248ae8700d4a499285cd3452b1b9f88d7919de02fe0879ee9eba3f1ee4e36938c8df5f1163331cb258048ec729f3a1fb1da1266fb9dbcd64c8288ff388761a8965501406cf12f3bcab445a39149543ea4d705531a5b614ea319c85516d53474258571d8bb9ac4d5665c1c43355b27162cdeef8ea4d851e3d5cc40763c74ce206baf1edeb51a4dca5058fe060657e44a07478b92d32edc12e5422e598776</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">这是我的日记，不能给你看哦，不过你要是猜对了密码，那就看叭~</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活的点点滴滴</category>
      </categories>
  </entry>
  <entry>
    <title>2022-7-25日记</title>
    <url>/posts/2342719015.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="4daf8b24aea0a7be2cb3cef44a2b54b6e764501ddf012bdd4e57743c4b004b2a">d361d61c52df07d9e0bf0afb5b4e2d2e069c214d42186c8d6830d570faec354c6f2ede427f41d66f6e48e117a7729bf6ad9aaadb48e958b3cbf978debaf91d5149be8d21ec613513d769c7c55e991efa423505c3c2f5c7353baba4853d007c19471f93258c3e906663d05c88d3d1a0f37b861cf1b26f1673864aa8dacec87e761f86b5628c7911a76ee11e881d2e586556596f35180e068d13762bdde262fd470fffb8a15de3e27349c65bc952b60ef7ac9486184751c540ff8f34cc724aabe3d36aa056ab78db46befd461a596bf50bdca50001c77454f37c426a10709bd9d783a90e584fadfcb2add35f51dff6f2d9181d4b1e21da6d6d6ee944332f3d5698e349d6ba98bc1c6239b41c9297fa4224a1c6733e8c8662c5c356ed39a7ea3ec6f66afddf96c6b1fc03c99919f342eefb379166e60add06cd7c541b122a21aa0ba35b28af720e31db85f994fb71b22b4672701f50005d22d1901f9cf416a978acd804fcc5eea46004d3dc8e855096f9cab33ee5d1793bc6cd82625ef216d6ebe6e4af971bcca5c118a3baca9ca19b792b38950f55692c9cc8ae741281c2fbf2a5a4e2b5e927023b392de44639d4e23853e3f3733e7de3e2190ded59dcef0a08e1fc53b4e1fcf63e263f75a37b2e8d2dbda6f2031b2e9e0c940c5bd41c7b72c026af97596b1fd7ec4b15aa4c36d8068f0b2086347064c3818e709eadcce7b84a3daf06ac4571a586a0da85a35ec37e59f07810892309da1c43a60ff7b9320e20ed76644d521dc839929128263e3e011399b1c8688d539a178112e83bfe125dad977f448368975521278cab930b18751c1206a8a064b69e0e772fc56d7bb4fa0ffa7914553c4dc6a45c31de7f3002514d12c3ef5194e32172adf4704b9adba74682c6388ab3d4a9ce63b64fa3a912e56e70f6c039b5fbf328ec22aedf7eb513d26579259c869ee391389cf5030bd49ae27d3d5e91615a92f8fc3130c0bcfa2d086ae8d61db9762550ea86ff3e9e5192c441ae338477dc099b97284cdb2fa5c1b546c7f37f351095b670ae1be69ceb04460217608cea6891b6f52a38483afb290a175bd30c9cc26e44ca7c919a86320b2c280c3a809e15ed52a2e3fec840a6f09c15398e86adc05e8b3c55282e4fd20f1b2b26c4d3adf9a532a6e58f3685ac3a1b8696e9e1185304ca0a01e062eca65aa6aff984949a556164125e27f3af6834241b436afc4a339f0e73fce177ccdf9e366d1d0ca53c585bed007cae40f35fa18810bf3b67db07ad6c996e32a189af327df5b65ea302401f3a20ab4d8eda3124c01e5b07b852caa6daefb18d98396e238a338c69d2890c166dcc605317262eddf531931f1de1f739362e6a616d3f29d80ee8c199c41b8021c767f6efe9bb483f512f</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">这是我的日记，不能给你看哦，不过你要是猜对了密码，那就看叭~</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活的点点滴滴</category>
      </categories>
  </entry>
  <entry>
    <title>2022-7-26日记</title>
    <url>/posts/3125482682.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="12ef93a81de1abfa6cecc7ce65ec86db67a52bdd145ca605472f3041aed49d19">234a6d57fbb3824af3dca7dfa731ee0c5a2b027993cd3f9a988c34243577360853981175527ddfdac957ed1589d504547c147e0fc4ad17194e18b2534bee1ff9b68eb2cfb06dd02ef55637bdea914c9da3b50e91f7196a8129464f8c967f6061ef50eca5fc7df50f3abfa82365b85cd59eeef4265f19d89ce9b982b1d3b2db0fd3373a0e5152b6ffc740508d3ef66570b16df4cc97b6b7e392da4257b708c026e4f43ddff4e3295cb6cea2fe758e33195e593f2e0932e5362d1e344cf56f41c5d9c33e0b337093dc947746c4a7ae540e6a5440136a4b8561dd6c158b5ef2f857dd1d7daf0f3d002fbbc234f5aaac1c02198eb3e364fdb633a9040ebc52600bb2def568021fd5c8e8ca9ec61e10f94f2c6bb052317f0ffa29ebc75fc694ca217fe06b69ce95c28bf412f44a9183755a8b95962ca647f939f578df874a18d5187d33992d590c15717df00e5e3ee2bcf4b2a44f3e0592cae0f98ba153566a97155c41077876e8851fddcd2bd948a42d6bde77f0f8b80cc336338eff1a82458377e41c57fc5e94d91121d0e866bd3d1952782dc95d8aa707732ae3770dd573da399da6120c76f59fed3677e626d1034c4bb7630bc28dc2839d36e74d48994cc6f97989d234205b75207271e94ff57b0f83a9d8627656a83504644b1f36d2152b6c284e069d7b2a3bbc45daf869c89fde7d3218d38579c500e7a11cde5f0beaeb236a99c53fc51faff364e7050f4ba2ec3693ce6ac7bd9a5db2370acea20ce39719e82fc5e28ab7946ed053b0b64c985e7e58ca75bf187c187c76192f5a16b525706b185db19344f8cd30daae1316687d2ac0091381b9807feb36b742b4c06d076ce3f597e6e0b3314ed87554880b2109e1a1</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">这是我的日记，不能给你看哦，不过你要是猜对了密码，那就看叭~</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活的点点滴滴</category>
      </categories>
  </entry>
  <entry>
    <title>2022-8-5近期总结</title>
    <url>/posts/295263399.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="6e248aed10102d679cfbafa5825dd574f0c3fd1da3384fd638711bba9bb6b4f7">ea99057e5c744352db0192c7f1469dc53f27421878e1ec770ecc37cb982ad5bab3e287468f0c56abe86589395e713da5a5b68b43b6b21265fe3447ec35268b8092487dba904a47ff275f6ee5d0ef91365b213a6060ea60632ae5d8689631deef57db44c6a441c350319e842cc8a20d0a9fd61906dbc3d4cb5545fc7780fdca24c000ff918694aa28bcbb608590f2094224107eddfa706f5ad49fe068101e9ec5ba2bbd85d53d55208bb37dde4328c7346f816863c285bf5fc4a4e5591424a1f7ca6919a60a102f05767970643bdec3443cf0d028dc94f865994cca0995d55df94e44240c7126bdc01bfbe1a70ad0668c46f6b40fb4dbf7ea84f51dfe68d77b422977448c6814fe103f40cc97ff072a5e3cb677c5f65ed82fab4cf8d8f5f09e262a554a116ba75853df5688526c02d034c9d0a4913241f4cc8307861e6e02c706c5b8b9f309dfc49573073e91963158cdd9147b7da88fa4aa3877f1e26388b90d050263d5ff326c5b913bca38c45c6ef96860a0d1211cf46da3565db963ae02178a908814eabf2530ecc24cf69ae204feacc4cbfc3715488db93d78332f47e3f42242781dd414aaea198527b6f0c1793db660407f152298ca80cf3a36a61b8ee0fcb76567ad52ec389b88aa96f546874a0cac141f063a800f267c0d4c408cc9c9a5f75408c391f8452cfed303d3bfeb07b02794d91f1b84731650ffb19d3e7adb9c5b8c04b4d96e755bda8e05007cde846630636410e8bfb27c8f1e78033e65a8ad907499d1e323cb4f2a1741051cff0ce5b60573d340e779d5ff7962a86a309880fee7c428e4dc23f96cf38cd43aa3936e675d657d028cca8724cb4d7507a1436e1d7f20dadd11332eb838635d281669fd5f79653ea25a94d2b43a25bd3863c433c1a02f94db3c35a45476fee02ceb54fb142e9e37588f9968f32facf190ce9ef96edb104411f2ce2fc2cdba65564b3539f7a1602cb516feceea9e8f818d1cdf5efa275427dd7776434e3ff3670e15aecff80112ea87efff1c8ceb9a06524da8aac755c523d4a31297ae9d130d0e446f87bcfe4242332c12a5b7ffc70b2ce7c001d023cafe8bedbcabff37e997e01586dae5bd83f6518437e0f4af1f3c0637c68aa61e90c794c7014a604d0611e8e87ec4fea45eeebe50c8f815c9a2e196c5020808b3b106a88bd1ee97bb77fd9aaeceecf1934de92764de8073dc24d892fd9eda3a8e3cc98a195ee533c92ddb1f5de88dec350c25af17215d7f6764f6ef8e07ab5161263550864f2b83328b1da88ba29961a074de34fef2f30ce66d0f136ec1c196430e9cf4c9eb7d456a1144b77b185210c134f29c0dec0b0c6c8c6bdfffcfeadea8af92a600000d3a5c4b8980f6276d7003714f0e34ff65460939302a31d7e4e1820c68801b6db2a7b8429112fa36a8c2245960463e142cd6cf53f5ced974a75231f7b2bbf264db61e9df6357a1ae3e5f6ab04513734fee9d3bc9f1278df57083a94eeed455436ff9a548933c71aea6c9503bd1ec3ffb4b74b8ae9e5c5a6153a0ff43c76e0e7c1847746d69d93019d0a58752f29434f0790a3934f61d2461fc9e4f2350cddfe5a16a27010a01c5b6166c60665e52d8302e15284bb8051434d642a1be8f2126b16388fb0b0cc0836cd860f8983ddea76eb7cdad9764b848e5e2e23b86d255e4e1a3e5b7891670fe80cee92ddb797db70903947100f15433e8be35ea5a7230fee0011f78f0daf00c74099f8bdb0675969c95025a7ce4050d7e4bef46c4e9b5b1e67697f45cd07fd14e6837f7af2f7f816aac8d317021ba6ede9e22e138f7a9b63382e4d668a45d73a3c4f8ea73f58a32b2622ea0b8dd9541cbbcc7d9c94e4e3aaf1952ba6fae31763620fe69486787d7a234856492573fa3c27754cede613062a89991ce2c038e09328e906c3493392c27e0b7a3609ef5df1d3a7dc053c874346c42d20a7dfdfb6fd6259ccd4e2fdd01fc1e49dac68ab844f259dd0107eec03396cc1397b091b4eba974fbd13ad0f16b49378642dc96c038288be6db9c86de26b6b7a53c7b17b6ec0ae052537705d4c6b576d607dbe587ebd1a3460f963a315f9964e0e7412e500228e64f87662e18137055f8ffc47365cf1b2453b56bdde8e0e3af1ac5a20d822a231e0bb0508c3e879340de890498eecce614b54edcdf92df33d82accad373f68cbe4b207a7894c8a29a364fd94b2908d14fb32c1d8a269d320bd8693569786358789588e3d1e9c1c6f2a901b5f0401c38d759bdbffb580fb9199a6a77facfc1310458085ad41b0498f70320fc72741054c3e57625073977afb95bfdd5be870a1cdc501efda055ddde0d2a37a8306dda87ec21760b103e86b3449677d39efc0cbd8c93575ead10a18270798a39b923ce7eb2779256c4e324c654672f1de771bac9eb7dc2e97ba000acb7b329061ca8fc816fd28e8623ef92eb5c54b295219399e775de148e8914862dbda585c4a56646f9cd148415409321544d50fddaff0ea4ed710300e6d6bc282f3d4242e0f618e3ba017d95aeb1f0b3d44009766a6bbaeb6720e07945525c202d6ff6037cebbb998dac3567a4b2bacddee57a06383fe76b1c619429751d9e2294bca1a8c5eb9e14b6fa8f45b1ecdb40b369cf5437da6a4b0a93db093a662357167baa54191266956c861700a07bcf8704fd31f0448cda2bdf16042ee82990fafdede0d278b16973244d9a1d4719dc35450e026043d08f9b0c1c42fcfc50b56de000ef447534093514b2afb2b2eb7f56310f90c3526b021bc29f399e4db1c576cc20e788d25d9810186ea0b23f09885ac60599eb2cf8416bd95743eea2e15fb357a1c57d945730abda45881f209ef4423e8ecd6eeee903b7862a283193dede4941f38325bef7f9c166e0f8dd77818521360fa9e979b2f2dcee2580fb90909cb8f37ba1164625a80afc0872ad9dada33e93bc24b74db480ca16067443306d527b1fb26590c26a44f8b5239d2b53db267855a37ef20a7dbb81a4f74d1fd326b6addc994c915321a5c1f9ec91cfd222fe45311940418c481b07c25f39fb247f69422cb2f531a924133f460821cedc66aaa461d53f55bbef73bc749533c98b8664cef28936343cbafc198428a6d4ead8bba8e7bfa343a3463a95e096cdbf700f0c652c3cbd6c114e46a6308cf6e0f39a9f8fc72b68944fd8bd482c10b8e3c9e2cf9f22fc65f2e2240e0137c1b28ff507ecd221d413f07b21dacb8c0e109642d9b0d2e807d81ce4fb1b29672af5ba31fc7c206a1a261c6d2ae458696057a31a1b91f4f61eb52d5cb998958f2b24a589453fa95257115de6538a64d045c861813d6c036ec6b5813929b71a5c15c70c0529d9bed0dd432112dd6727c03796f2675fd1b23d91afa7c6cd5b0f8d906d1ff7a2502832ea85927ef65ecfb13a486045bc557abcc3db563531745a2ef4483c213ba9b4d867f873133a46197a9eb3667c13fd8587f6435ca709508bd087e01ae95f22d07a3fac1ff826a6bb6b08798d9819ce0c07a4efba3a95616b1f9f72dfa65e84440e6afdbb38ee8a811084254fbe4ec54ad9d228ebeaa09743cf4fde8a0ee0f7c275204a14dbf58d95fe14b310bb15f40ae02f586b0a7e5da2d3a69ee9b03464fa2e534b9a7a1b9a311834be501b0999d968608ca63f25597315a6c17c60914febdb92b5a8bf828af4816f9b9fb22775cf55720c8f617fd7ab9fdc297ccb5e4a99eeaa5cbd8d2287b807a460a99a3abefa2b8284eb913043ee42ab3602610f6e0c15c6693127ed7b7f808b98368ea85e3ded0bcefd2771625da5095d60ff1b64800555b5d28e8ae78c4664746a55cb8fc051ea4c40610ae32c53637df1b54caa29dc0cffea8f3098c91733e795896904fa722554cfa46348e5f2de27931b2dec666a592f089c1e485fc9d74d0bf66eb6a1bb4d2bcd2decc9c97ecded5af9a0f987a39c84b97ec33be7f0001d5288870191932b969fe84040da320f0835e4226a3948433eeffb56a9a5d36f57c05a2290121bd0f8b0962d03b07516fd6449ab83da9c5ad47fa8ca82066b48180cf091ca3655f7d51ac3175d418c9fde2122d622855ab3fb8d531fa195cd639f7203883a2ce63112f653a28de81cb9177873fc0db6222fc354ba14d3699b37aaf7a0445f46007d52e414030fe34d5157897339110c711240691bddbbb24d638165b9a57d43e166b7f614057a3837ed64c7e807cfc153e51264bcd991ee461975390fed76db041b6b9065c32fe736c8a910a1a65b8506d44f167d709d1b7a93668df17af9dd50b374edfc4e4a02a1f8a9d0516bd7ddbac0d2b915b21a9abfcd5aaf9a3490e8c4cadc32e0ed2ff00fbbe94bee4c1656edcb96acd19d9462c91b30ee5b1d89df495e454fd4a9d7ec54810b407692a82bf9ba0fb668267f2e07d3fe8924192e89077cd8b4103bc185b893d016bd8b5dacfb46babf78342057b17e1762a05cde4cc4adfd727eb5827ee73f7d342ad47a52a04b835d25cc130bc068521f346bba2097b1f6e7c088b329e6cf3294f91904e7ddc97038f7691fa5c11750c1e4855551d55ba2c7f6c771ebe7b8f5e47b394111edb27caf03015118343fcf1bde564800df31a1733754c52163954175699817ad92e97edbfc8b6567f08e169f0a17f3a609a186f53292ecf57774e47d29fe4ae7383b8412a9ee3d20c0a096f05ae4deeeae26fda3a4c13c1eb0fbf57848fa29a81a747ce2edaa1475f17f1456516d68adc2f7be0c60d58cf6ebbd6c25721a844078fab327e102248db77f3a4a7dbd7ff9faff55369a0c9806e72daf436c78183c7828bd6c80eaa56f8cf208e32233480e31a32bd80d66828e747923bcd55b22fe1dbb1214dcbed48aa5b73c13a551db37ad27d56dcfdd46f5bc22a6fa47a0a4f51b1627a730c9def3ab205c368be592ff0c9d7a731dce88265384fd3118f8ad92cd8291fcc3b239181f1516641437faf5c18ac75742a1b434c86064e7cd8bffaaa149a5a694c80bd54691f866f297a7cd352fac1aeeab456fc061a5c827099d465ce83c0e755e27293160eb12b4cd7c5c620b10a82f528af25c8a01c067e7c8a07b40247f40a2dc1fc3287e02ebbc79fa431d644e12d3eef234f495a38361d7c0c2a31b88d9ce22749934d8c11390b2a63549484251ca12b9810e08e0e0aaa9bbf63476d19f646b74a40</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">这是一篇加锁文章，逛逛其他的文章吧。</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活的点点滴滴</category>
      </categories>
  </entry>
  <entry>
    <title>2022-8-7日记</title>
    <url>/posts/2970157341.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="7e08062682735ba700e2a8f9537a0bbe1e7d34d6e9b55ed3f9109e8eaa4269bc">d361d61c52df07d9e0bf0afb5b4e2d2e89dd1552fc6e6d5104e5bb1dee2b1eccd4b3323ded72fd79978e985d86119b197fdfcbcde82f5c20c42a7bc6bedf3c1c8c45a93a65feb548a580b60691ae2086a796bd5ab1fdcc72c87bfff33505f8fd3482a7acc0dfd809213a1fd3b93d332f13fd0efa88d9b9f71fdb0a9db81b3c0b3aadfe3f5c4fa7a83808ab33177d7e4181a0b52572472b0d5d26d2c341ce65e222e701e227d7523deaec329618664198efe51a157392e81c79bae4d166c3968f9ccae583a5ae333eed4e66e5167d64865b16c263f3df5b33d77d5cfe728abae194619442db4ededbb47471efd2ea00e1b636ba5dcf2b4350326d859f4d157fa6cab99e1e0d2f643ba11767fe721914b4fe634a492093f0c206f38c1da4a48f5ac101265109563edf86669a6bddf921e5466b4021da2c100d4120470f1777261f8338acc625cebf55a553e1ca3cea7ecfa03e156a2a61d340c11821a5fd8d1198117b54dc31f0cb6215062a1eafd74640be1ba27ffe8fada6be06a244a8c148ca1206fcb05183ada90e6318aeff57bf6bf93e0f2b57143d16b88456dc65608f8602fb255979204d572b9288725d6424b8be7e943fba7e040d5241cb7a27767e30a52b829f869c831acbf3392651fab21eac04f23f335a3ac2ea603877011813365d7561c50341469bb8094f9086c83c699ffe2292d2ddbfcba0f6ac6da627aac12677280518ba4c0335552a0e5553fe3018d88a1d309a81f68108fa5fdd2fb6292cd7e03484864cff64cab40b3fa0aa5d1bafe309a8fe6511258676196ac31be484c698dc0262087e83c7482ba181412401ec2124cbf583b771e8a0cf70a5bf694191dfabe1037a58cf0cf69bf1393ac67fa0fbf187cf83622ec4a7de89f694def08267eb1fadca6f80b26438752f9e06e14f64ef61107e7145f57d3dca78b60abdd6121de0c260c19686ca9c9f7cd517a15d2701f3fe019ccea3dd7053f2de0a13fabac8c12dcbe23e9a11419f0f06cf4dc132a7e222266a4d13fadcad3004311b3cf90914af257866960a901c561097e78f7c24c0e6cf20181c2ef0b637ef62b9e3173cf7fbeafb7c38f78fa6d31b80469f2fe1edb4ac2b8fb248c2eaeca00db3e220d572a2df49045ebc261b07cb23fbf6f2025c9d85d48a3a68bcd3c383b893d4709af1fe8eb90f79b018caa77a3fa66857ff62267e3acadbe44e0eead61f02cc16b3d19118ea3b986b42bfa942d0a15f5fe1f57f6f76b2a8f21298e07c505b3e9b454f29d8eaf936c07d110daccb0a462ac0a98ca574d6924547578db1c8264286509d77f8f4c4e90ea63694ba698ad683b556ea6d1c412946f2a99338cef80fbf0c20485d3e566b9bc0634f3717374d6fa4e8d32c7b66979b6c24d83f47f79033d569d7d612a0c387c8d0221bb02f7de6f9605f62b98cfee0baca0f019c7af5a708f8cf2461a01ddb3956b24ec2427aa21e81fed1e409035388d5b768cef7107a1a01142870e9675f70955e3758103f26cad38619957d044196544fe61289bb6ab278db7e2043fa3f5f739763042f034db638604a4dac64fadd52cb0ceef18d6eff4636fa66914d9ec337c7cdeab998e8d1dc97428324b5e71536224ef6d9cacf3abe602a391cea8426e4954fd970a2471ea503e784636b9cf37d447f4d546aff511c80d3638f251e15fc837eee62574bdf5bffd3cd613fad20d5005bfb904aafa34d0bb7f36af0877a5e470e4c1dca8a5e3f1bf5391e8ff4ca306818e05f3aa3f24242b07cf1ac83f9527948681a68172d1958e8a580b6068ccb731fd5c612f29103599ffccc2d22a1133087654c91320bc6d4bb5c94bfbe6cadc39e4d09c2d87b38df42d2207085c430d2ebad42602567268236c8fb49fd64db8399bfbd337f87303c844464adf775ec2e6be5234579d86645c184ad4f5fa23385de3303108799499277379924ddbc98dd7aeed69bf6090a5161c306eca82be77d11529d2a12a5a88d20c6962cb710e217fae94bf14662aa1b9e64eb84cd70d492c27ef460df6ef38368bfb45cc5817738a6e94089dd4b98fcd9793a07bc71f55241c7c22f4ab7b7ae95f33647f1233e7a5a4c224cdd9c826cb06492109d0e529e31d26bff88955ef239f667125972531e4bd29501b8c1c345c881c09df824c468d1d3fafcb32e57162d332dd8680f8b4d8231e02ecbe5e62bb3a2732b2982c7aa777b275af5afa166c34c26b5248c2e9c616be546ed1145d1cc059c9ba33254b25ef2440cb1c44943c27db73433a356c9dc2eb0b42df86fbe822f1e049aad28b280b0ee3460e1cf2e65903af0cdda49b76fe677c1688639a6d7d26e2e82e8be518df9ebcb66d4c54c0e8f93bf11fdaab3696ccac446abc78146372bad90cf8bbf4a3ed145ea39431c7c236643d15349c10dd1a9d073e31886dd2d7488056b252f551fc77f07c4b1dc676b4c35c5725962c0081357fe8097f0c1efa40d3c7c32f4e22b11986e90645fc83326ab696666ed151166f18890c0f5ae1011899c868d168ab01a5b9dcd62e238104407316a3e1698d57739717847f1ab109c3e02fc6fd49a9f3e8da744a4e954e1b4cd2d0ef11f1eef96b96b855be42ea71bf97a80f89e5925deb4e819430fcd8114f18a3b1ae5eb78ca8c6ee3067c6f80fd5936d4d5db21a51bc452e093263b0be5128d5b91ef7351035f8c52a3c32a2d0bc1c571549af69749eaa618db89d80d0f3093a694555b67ace1ebf0cbb6feb27dc4f42cb0b548c61370430958c33916a086ab2d058021790e689dee956188a993972f216f02154c974f7a0c4acf6847869d6ddcd85f691d4776fe9195e2a9787d7ab614d42a3d78</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">这是我的日记，不能给你看哦，不过你要是猜对了密码，那就看叭~</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活的点点滴滴</category>
      </categories>
  </entry>
  <entry>
    <title>2022-8-8日记</title>
    <url>/posts/1195471348.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="20016d42abea60055aef92abf547a87a53b2bf1cb674d3c618a8ef01e5bbdab9">abb457e6177385421cb504d93a467f3d0c14aa6292d637a61525153b422d6c94cd492e77d092c1f4006daf7cf48da64e428e223002dcc0a76f051b9eec85f8166e9c7aeacf671b6a4bd133a0d1976e7705f397c039988f8b388a58cff95ccac9965d5f0686ec98af9fe8200eab8c9cbe34532853e9a3ebc0b1e7fd181fef7199c4e99fa6e3f41b08e0eecbcb9c34b66bdebc9e1c9ab5a2238963ca87634275591c029de5fa797441f2e05fb171639ed5e15865e1846e53d15870e4eb465dd567e5dcf442ee1b2fec8d199503a703d2c901d3d4180e5552bd3431f34995a0d71a0a862355255a5de5995559f84654a1799c6f322969501d4bd87c0a542c5bdb57efbe4adb4926ef7f565ba6d75cd58f628230ae8b736fc1650922471f273f617a6524e55db7696efda8db6700a15de54d8cdfa58b423792ad5d83ac61661f296ab6963428354dde9d6709df8e150faec8c811cbb975152140d551662ed8454df7033d7ecb2ddebdb086a68f3a583b9678f1f508f7b6c480626eff95d57491fb9fba89d4b08eb7773540e1890d69d1f5ca83d050826c161a09e221eb5b71f61d84563901e92437e2382ba73bbe03685a2e5e88fd4a4df3311df233a47cf9519943e65b2685d923d778d36a1807c11ba41552c4926e62d79148a92192c8fbd485b6ac0c71f5de61a7d92b89755774f2e7a2c1a86a18fc778a7549c0c17847f5e5b5abcb15cdd60c3e4f2d180fbed9c2d3142ad4451e07bd55199bfeee6e0372eeab8215abee7ff50e2b3045b1d6a08ee43450a0db5a4eec19d029f03deafa15bbd9527352355bb382868a437e0af11b0977d8630fc752d28ba39129be0235fce2321f42b4f95e06eb3824d7169114b957aaf8377c8364d9fb25fac0c33f2f7b4ace93d6c61c6d7cb3116c1d5d3ad937868f229c851fa0e5853ecd0ed301a529b5ed285f6ce6ead2ae6641b381ededaaa1ee624e734ec30a2299e009ce4297fa2ebb59a669e8ff3c52efe8225894104d4b21a19e7b8fcc38664450233dae10e1104055a760ef173c688fefa2d661e8ad87e673d1edc15e39acd962313cf8950dee12c682f558a65265028b369c370b62aa3970d8fe8d63d40baa9caebc4be23aaf61f1159ba60e2e3077053c669ff92f0e7a6e64625e39bc06bf87a191ff9127fb0cc09053f577e2f28f94c6d811bc3fde966fd78a0cdca4c16551c4069fd1029a453e688ccac2af109ca96f5e9d909a1b13e9e11181ca14629ff93d69427d3072c86d4373a20fa0d0fc6b61c68c67725f0b06c3067c14030436e7cb9c781c4605ed89a2b273ed0efa497b7a987caa61552f48dab3c612db55dbd1c354788fe08d8fa70c580f4ccabc05ac65aca00419993027e1bdcfd06a093e3f382f8feb019797b49c7abc94601c470cc36b43d09c6f8ad982327376ef84c1998c84865270b05dede32fbffe2cbafaba44efea4f73e2bf</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">这是我的日记，不能给你看哦，不过你要是猜对了密码，那就看叭~</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活的点点滴滴</category>
      </categories>
  </entry>
  <entry>
    <title>2022年终总结</title>
    <url>/posts/536100284.html</url>
    <content><![CDATA[<p>提笔还是这么困难。我曾以为写年终总结时的灵感会像我回忆这一年做过什么一样，思如泉涌。年终总结这事儿，倒不是第一次做了。最早的年终总结应该还是给小刘写小作文的时候，热恋时候的我们，会在新年、除夕等等时候给对方写上一大段话，表达爱意、许下承诺什么的。这种习惯没有坚持太久，热恋期过了就不再坚持了，能坚持固然很好、不能坚持也不觉得遗憾。后来也许是大一吧，还会在朋友圈发九图年终总结什么的。现在大家都这么做，我反而不愿意这样做了。如果本着想让大家知道这一年过的怎么样的想法，那么也许你费尽心思地挑图片、码字，在年终总结的洪流当中，也不会真的有谁在意；如果本着对自己的一年做总结，又何必发在朋友圈里呢，看的人多了自然和自己独自反思不同。我只想自己回顾这一年，有什么辛酸苦辣，自己知道就好。若有缘的朋友在博客上看到我的年终总结，自然也是一件趣事。</p>
<p>这一年值得回忆的事情太多，就让我用记流水账的形式记录下来吧。</p>
<h4 id="一月"><a class="header-anchor" href="#一月">¶</a>一月</h4>
<p>我还记得去年的这时候已经开始考试周了，大概是12月底的那一周和1月初的那一周是考试周，中间两场考试的间隔是四天左右，为跨年空出了时间。记得考完中间最后一场，我就飞奔出校，坐上了刚通的地铁，去往市区。中午应该是在舅舅家吃了午饭。然后下午去找小刘了，在某个地下商场吃了火锅。晚上在清冷的市区漫无目的地逛着。当时错过了回去的末班地铁，只能选择打车回学校。当时又不舍得分别，于是两人商量着向着津南校区的方向散步，这样既可以散步又可以缩短车程节省车费，哈哈。很喜欢那一夜的感觉，天津市的夜晚，冷清、干冷得很舒服。还记得我向小刘分享了我当时特别喜欢的赵雷的《理想》。</p>
<img src="/posts/536100284/p1.jpg" alt="image" style="zoom: 50%;">
<p>还记得1.7考试周的最后一天我才考完。约了因为考试周复习饥渴已久的兄弟们，一考完试就马上离开学校，去了津门羊大爷，点了一桌子的肉，还去外面的小摊上买了烤冷面、烤鱿鱼，喝了一桌的啤酒。这似乎居然是今年最后一次和兄弟出学校吃肉喝酒。接着去了KTV唱歌。总体来看是非常美好的一夜。</p>
<img src="/posts/536100284/p.jpg" alt="image" style="zoom:50%;">
<p>不幸的是，第二天，奥密克容登录中国，没错，天津是第一站，就在津南。那可是我国第一次迎战奥密克容。所幸当时我已经离开学校不在津南了。还记得当时学校的同学们逃荒似的逃离学校，当时没有出租车的时候，甚至有同学走路到西青区打车。反正大家都很狼狈，我也很狼狈地提早买了机票回上海了。为此，小刘还和我生气了。不过所幸，我做了正确的决定。能平安回家就不错了。</p>
<p>回家之后就是难忘的14天集中隔离了。其实当时蛮期待的。想挑战一下独处14天，看看自己是不是能很好地客服孤独感。我想我是挑战成功了。实际上我很怀念那一段日子。虽然一个人在房间里呆了十几天，但是买了弹力带坚持健身，也在里面写完了期末作业，睡了很多…总之就是和自己相处的很顺利。唯一难受的就是那时候吃的单调，想吃炸鸡火锅都吃不了。但是我还是经常会想过那样的生活的哈哈。那时候身材管理非常成功。</p>
<img src="/posts/536100284/p3.jpg" alt="image" style="zoom:50%;">
<p>隔离出来就是一月底了，一月份似乎没什么值得回忆的了。</p>
<h4 id="二月份"><a class="header-anchor" href="#二月份">¶</a>二月份</h4>
<p>二月的第一天，去了欢乐谷。体验了绝顶雄风、谷木游龙、跳楼机等等。感觉玩的最多的就是各种各样的过山车。实际上过程中还是蛮怕的，但是非常刺激。一年玩一次还是不错的。记得跳楼机是最后玩的，已经怕的不敢玩了。全程都怕得要死。</p>
<img src="/posts/536100284/p4.jpg" alt="image" style="zoom:50%;">
<p>二月中旬回将乐去了。见到了一些可爱的小屁孩，家里过年的感觉真好。</p>
<img src="/posts/536100284/p5.jpg" alt="image" style="zoom:50%;">
<img src="/posts/536100284/p6.jpg" alt="image" style="zoom:50%;">
<p>去年的二月份还去了三明，和高中的兄弟们约了一天。想来似乎也快一年没见了。和高中的兄弟们虽然联系不多，但是还是很怀念那时候的感情。我还是很期待什么时候跑男团能一起再去二中的操场上跑一个3km。一定会有的，我相信。</p>
<img src="/posts/536100284/p7.jpg" alt="i" style="zoom:50%;">
<p>接着就是开学了。不过没能顺利返校，还是上了快两周的网课。回学校之后就是漫无天日的封校生活了。没有尽头的核酸检测，根本就出不去的校门。</p>
<h4 id="三月份"><a class="header-anchor" href="#三月份">¶</a>三月份</h4>
<p>三月份应该是我第一次萌生了转专业的想法。也意味着我大半年焦虑的开始。不过也很幸运，焦虑和努力有了回报。我也最终在十月份得偿所愿。</p>
<p>三月份照惯例参加了队里的二月二龙抬头。我突破了自己，平板支撑时间突破到了二十一分钟，幸运地拿下了队里的第三名。坚持会有意义的。</p>
<p>（其实已经跨过了2022年，感觉要写不完了，赶赶进度，哈哈）</p>
<p>甚至到了3.18天津还下了一场大雪。</p>
<img src="/posts/536100284/p8.jpg" style="zoom:50%;">
<p>三月份已经开始感到大二下学期的push了。计组、数据库、算法导论、人工智能导论、软件安全、并行、计算方法。感觉是最累的一学期了（因为大三上转专业到软件了，往后的日子应该都不会有这么多作业和压力了）。</p>
<p>似乎也是这段时间，开始看东北往事那种抽象的乐子了。</p>
<h4 id="四月份"><a class="header-anchor" href="#四月份">¶</a>四月份</h4>
<p>四月份学期到了中间。</p>
<p>好吧，暂时停更了，今天不想写了。困了。。。。。。</p>
<p>------------------------------------------------------------------------------------手动分割线，我又回来了，在写完操作系统期末报告之后。1.1的中午，似乎也不算晚。</p>
<p>四月份，封校继续、抽检继续，大部分时候都是网课。这个时候我意识到了这学期是我提升排名的机会。因为之前不封校的时候，每到周末都会因为龙舟队的训练和聚餐而失去比较多的学习时间。在CS这么卷的专业，似乎显得比较奢侈。不过这么想倒不是说后悔什么的，只是当封校剥夺了我训练和玩乐的机会，那我就有更多的时间专心学习。上网课也去除了为了上课奔波的时间。总体来说除了不能出去玩略显遗憾，我还是非常享受那样的时光的。</p>
<p>四月份似乎也是上海疫情开始严重的时候。家里人在上海，老是担心他们感染了。在那时候看，感染新冠似乎还是一件非常可怕的事情，而在年底，我们却都感染过了。世殊事异啊。</p>
<img src="/posts/536100284/p9.jpg" style="zoom:50%;">
<p>校外的美与热闹，还是牵动着校内同学们的心，校园集市上开始一年中经典的骂学校、骂市教委的现象。好在封校的日子不算长，闹的不算激烈。</p>
<p>也是在四月份，我当时开始晚上吃水煮餐。倒不是说多自律，实在是吃学校其他的东西吃腻了，觉得水煮也很好吃。于是就开始吃水煮餐了。平均下来一餐16左右吧，如果我正常吃快餐应该是11/12这样，还是贵了一些。</p>
<img src="/posts/536100284/p10.jpg" style="zoom:50%;">
<p>因为疫情，没有比赛、没有健身房训练，队里状态松懈，好像开会还被老大骂了。记得这是当时被骂之后第一次训练。去了泰达之后，这样的氛围就渐渐离我远去了。</p>
<p>4.17是我的20岁生日，还记得喝完酒兄弟们给我买的小蛋糕和奇怪的蜡烛。一人一口把“生日蛋糕”吃完了。</p>
<p><img src="/posts/536100284/p11.jpg" alt=""></p>
<h4 id="五月份"><a class="header-anchor" href="#五月份">¶</a>五月份</h4>
<p>当时嫌弃天气太热，脑子一热就去剃了个寸头，当时好像是3mm的推子吧。丑是真的丑，但是凉快是真的凉快。</p>
<img src="/posts/536100284/p12.jpg" style="zoom:50%;">
<p>云鹏在健身房训练的时候不小心把牙磕掉了一块，还好没有大碍。</p>
<p>也是在这个月底，大家被封得忍无可忍了，集市上大家的措辞越发激烈。感觉是有人在恶意渲染，推动一些运动。隔壁天大的学生居然在某个晚上集会了，一群人围在一起，大喊什么“打倒官僚主义、打倒资本主义”之类的，说实话感觉有点过了。不过学校倒是因此提前把学生遣返回家了。</p>
<p>因此五月底，在校的最后几天的主题就是送别。一方面云鹏和小明要去当兵了，一切顺利的话，在当时看来是没有机会再见了；另一方面是中华哥这个老大哥也毕业了。虽然最后云鹏和小明没走，但是这可能也是我们缘分未尽吧。也许是十五的月亮十六圆，我还要和云鹏作为配桨，为了队伍十六周年的荣誉奋斗呢！</p>
<p><img src="/posts/536100284/p13.jpg" alt=""></p>
<p><img src="/posts/536100284/p14.jpg" alt=""></p>
<p>当一切告别完毕，我就和小刘一块儿回家去了。</p>
<img src="/posts/536100284/p15.jpg" style="zoom:33%;">
<h4 id="六月份"><a class="header-anchor" href="#六月份">¶</a>六月份</h4>
<p>刚回家就去乡下的爷爷家隔离去了。前一两天爷爷奶奶去三明了，就我一个人住。还记得自己煮的蛋花汤面简直和屎一样哈哈。</p>
<img src="/posts/536100284/p16.jpg" style="zoom:25%;">
<p>十几天的居家隔离，应该是我第一次在爷爷家住这么久吧。他很高兴，给我煮各种好吃的。还去洋布买了一大盆羊肉，吃了好几天。</p>
<p>在乡下的日子不能运动十分难受，那时候开始跳刘耕宏健身操。感觉确实蛮有用的，不觉得累，但是心率很高，出汗很多，跳完效果也很好。只不过后来一直没有合适的场合再跳（还是觉得有些羞耻）。</p>
<img src="/posts/536100284/p17.jpg" style="zoom: 25%;">
<p>隔离十几天之后我就迫不及待地去将乐了。办了健身房的卡，开始规律的健身生活。</p>
<p>六月份的ddl不算太多，相比七八月份还是轻松不少的。</p>
<p>六月份的尾巴，去驾校报名学车了。之前放假老是在上海待一段时间在将乐待一段时间，都没有完整的时间来学车。这次机缘巧合，就想着把车给学完了。</p>
<p>六月份很特殊地线上拍了南开龙例行的毕业照。</p>
<p><img src="/posts/536100284/p18.jpg" alt=""></p>
<p>六月份的蹲腿训练拍到了自己股四头肌最好的状态。后来膝盖受伤之后就逐渐退化了，唉。</p>
<img src="/posts/536100284/p20.jpg" style="zoom: 25%;">
<h4 id="七月份"><a class="header-anchor" href="#七月份">¶</a>七月份</h4>
<p>七月份就开始很忙了。暑期实训、还未忙完的ddl、学车，全都挤在一起了。不过这也是很值得我骄傲的一段时间。学期末的ddl都非常出色的完成了，暑期实训也算圆满结束了。学车嘛，倒是刚开始。</p>
<p>健身也没落下，那时候练的比较凶，一天无氧+有氧+腹肌训练，连着练了很长一段时间，也没有休息日。跑步也是3/5km和变速跑交叉，当时刚发现变速跑的快乐，也刚刚掌握跑步机的技巧，甚至跑姿也让自己十分满意。然后就把自己的膝盖跑伤了。膝盖的伤病让我不舒服了半年，知道写年终总结的今天，我也不知道自己恢复的怎么样了。反正跑步成绩是距离从前差远了，希望新年能慢慢恢复吧。这算是2022年我最大的遗憾了吧。</p>
<p>学车蛮顺利的。</p>
<p>七月底和小刘以及朱子林夫妇去平潭旅游了。一年中唯一一次自由的气息。海边真的很美好。</p>
<img src="/posts/536100284/p22.jpg" style="zoom:25%;">
<img src="/posts/536100284/p21.jpg" style="zoom:25%;">
<h4 id="八月份"><a class="header-anchor" href="#八月份">¶</a>八月份</h4>
<p>八月份总体还是很忙碌。当时一面仍然在纠结转专业的事情，另一面主要就是开学考复习和学车的交织。一面想赶在去学校之前把驾驶证拿下，另一面要准备开学的六七门考试，当时队伍还召集我们提前去学校开展集训。权衡再三之后我还是把集训给推了，时至今日我也不后悔。</p>
<p>当时压力蛮大的，因为学车这件事不是决定学就能拿下的，还有可能因为自己的原因考证失败。当时一面紧凑地学车、准备考试，一面还要抓紧时间复习考试。</p>
<p>不过七八月的努力都在九月得到了回报。</p>
<h4 id="九月份"><a class="header-anchor" href="#九月份">¶</a>九月份</h4>
<p>九月份的开头就是开学考得到了回报，基本每一门考试都取得了令自己满意的成绩，学分绩提高了0.8分，排名也进步了十几名，算是阶段性的小胜利吧。</p>
<p>然后就是转专业的事情，焦虑担心了半年，终于如愿转到软件工程专业了，具体的情况之前也写帖子回顾过了。总之就是处境的豁然开朗。</p>
<p>当然也还是遇到了一些问题，就不一一细说了。</p>
<p>在九月下旬搬到了泰达校区。</p>
<p>一切都比我想象的令我适应。我非常喜欢在泰达的生活。唯一的不足就是运动器械的不足。</p>
<p>九月底也申请加入了张老师的课题组，做异常检测的项目。</p>
<p>总之，九月份是收获的一个月，也是过渡的一个月。</p>
<h4 id="十月份"><a class="header-anchor" href="#十月份">¶</a>十月份</h4>
<p>十月份我又开始吃水煮餐了。这一次减脂的原因是选了游泳课，还是希望在课上保持良好的身材的，因此就减脂了一段时间。后来因为疫情，游泳课也不怎么上了，加上水煮实在是性价比不高，价格贵了好多，就放弃了。</p>
<p>到了十月份膝盖还是很不舒服。申请出学校去泰达医院做了一次检查。医生倒是说膝盖没有什么明显的损伤，主要是下肢力线不正。感觉就是小腿外翻吧，确实是自己没有控制好运动量，把自己折腾伤了。</p>
<img src="/posts/536100284/p23.jpg" style="zoom:25%;">
<p>医生推荐去外面的机构定制矫正垫，但是感觉是个坑，仔细权衡之后就放弃了。打算静养。有氧运动就改成游泳为主了。</p>
<p>十月中旬在津南笑言宿舍的空床搭起了自己的临时宿舍。在淘宝上买了一套一百元左右的床具，在津南也算有了落脚的地方。</p>
<p>月底开始追了《龙之家族》第一季，可惜剧集很短，意犹未尽之下我又把后续的故事都看完了。新的一季据说要2024才播，瞬间没有了期待。</p>
<img src="/posts/536100284/p24.jpg" style="zoom:25%;">
<p>感觉权游世界非常和我胃口，没有其他美剧让我如此着迷了。</p>
<h4 id="十一月份"><a class="header-anchor" href="#十一月份">¶</a>十一月份</h4>
<p>十一月份的开始被创高给难住了。以前创高从来不会是令我头疼的问题，但是今年情况有些特殊。一方面是我自己的膝盖不舒服，急需休息；另一方面是我搬到了泰达校区，在津南能跑创高的日子并不多。但是却要一学期跑70km。显然还是比较头疼。后来就花钱解决问题——找人代跑了。</p>
<p>十一月份没有什么值得回忆和记录的。一切就都在正常当中推进。不过十一月份已经显露出要放开的迹象了。暴风雨前的平静。</p>
<p>十一月份的惊喜应该就是买了林筠皓的头戴式耳机，款式非常喜欢，头戴式耳机也让我更沉迷于听音乐了。</p>
<h4 id="十二月份"><a class="header-anchor" href="#十二月份">¶</a>十二月份</h4>
<p>果不其然，学校的防疫还是被击穿了，当校内有了阳性病例之后，学生的情绪非常难以控制。我们预想学校也不能组织线下的考试。民意沸腾之后，学校再次提前把我们遣返了。在十二月初，我时隔一年来到了上海，见到了爸妈姐姐奶奶。</p>
<p>虽然疫情还是比较严重，但是我还是没忍住办了健身卡。为了让自己尽量晚一些🐏，我选择戴口罩健身，这倒没什么不适。</p>
<p>不过该来的总会来的，在十二月的尾巴，我们家还是无一例外全部中招了。最难受的就是发烧的两天，加上嗓子疼，病程算三天吧，之后就没什么感觉了。不过为了保险起见，我一直没有运动。打算再休息一两天开始恢复运动了。</p>
<p>十二月份又找了一份科研实习的工作。这给了我的生活很大的压力。希望我能处理好吧。</p>
<h4 id="总结"><a class="header-anchor" href="#总结">¶</a>总结</h4>
<p>回顾这一年，可以说是值得回忆的、令我骄傲的一年。因为疫情原因，虽然没有很多玩乐值得回顾。但是在学习上确实算是丰收的一年。</p>
<p>养成了自己的学习习惯，会做好每一次的平时作业，会好好对待期末的任务。我想这是好的。</p>
<p>感觉自己成长了，也变得更努力了。之前也不是摆烂，但是总是感觉努力的很一般。转专业之后对于自己的定位变了，也有了相对明确的追求，push着自己慢慢走下去。</p>
<p>这一年看的书少了很多，希望自己重新捡起来。到了年底，因为疫情原因，养了一身的肥肉，新的一年也希望保持身材管理。</p>
<p>明年的年终总结就可以写下自己的去向了吧。北京还是华东，学硕、专硕还是直博，做什么方向，一切似乎都还是迷雾重重。希望我能选一条让自己满意的路吧。</p>
<p>我只希望一直这样走下去，慢慢地学习，慢慢地变好，慢慢地品味生活。我不是一个很努力、很执着于学习的人，但是我是一个想保持学习状态的人。一鸣哥的“承认自己走得慢”让我对自己的习惯有了新的看法。</p>
<p>希望未来能和更多的人接触，在放开之后，去看更精彩的世界。</p>
<p>2022，年终~</p>
]]></content>
      <categories>
        <category>生活的点点滴滴</category>
      </categories>
      <tags>
        <tag>自言自语</tag>
        <tag>年终总结</tag>
      </tags>
  </entry>
  <entry>
    <title>GraphStructures01阅读笔记</title>
    <url>/posts/38813817.html</url>
    <content><![CDATA[<p>本次阅读的论文是《<strong>Learning Graph Structures With Transformer for Multivariate Time-Series Anomaly Detection in IoT</strong>》，主要目的是了解图结构在异常检测当中的应用。</p>
<h4 id="摘要"><a class="header-anchor" href="#摘要">¶</a>摘要</h4>
<p>IoT系统会产生大量的<strong>多变量时间序列数据</strong>。异常检测对此非常重要。但是和此前研读的论文不同的是，物联网是一个整体系统，我们不能孤立地考虑其中的时间序列数据，需要考虑<strong>传感器之间复杂的拓扑关系和非线性关系</strong>（需要对此建模）。</p>
<p>本文介绍GTA，用于<strong>多变量时间序列异常检测</strong>，包括：<strong>自动学习一个图结构</strong>、图卷积、使用基于转换器的架构对时间依赖性建模。</p>
<h4 id="一-简介"><a class="header-anchor" href="#一-简介">¶</a>一. 简介</h4>
<p>IoT系统传感器很多，多个传感器形成多个指标，因此形成多变量时间序列。<strong>整体状态的检测</strong>更为重要。多个传感器的数据以<strong>复杂</strong>的拓扑逻辑和非线性方式<strong>相关</strong>。</p>
<p>现实的问题是：<strong>传感器依赖关系不可见</strong>，获取成本极高，可否自己建立？</p>
<p>现有的方法分为两条线：<font color="red">基于重建的模型（R-model）</font>和<font color="red">基于预测的模型（F-model）</font>。</p>
<p>图卷积网络（GCNs），图形神经网络（图形节点通过结构传播信息），<strong>对传感器的拓扑关系进行建模</strong>。</p>
<p>大多数现有的基于图的方法：通过测量<strong>传感器嵌入之间的余弦相似度</strong>学习图结构，并将最前K个节点定义为源节点连接，然后用graph attention convolution捕捉信息传播过程。</p>
<p>对此提出问题：</p>
<p>（1）传感器之间的点乘（余弦相似度）导致时间和空间的复杂性。</p>
<p>（2）空间距离紧密不代表拓扑结构强关联。</p>
<p>对此，提出了GTA（异常检测的图形学习与转化器）。通过基于Gumbel-Softmax采样技巧的连接学习策略，从学习涉及实体内所有传感器的全局双定向图结构的角度设计。</p>
<p>可以在训练过程中自动发现隐藏的关联。</p>
<h4 id="二-相关工作"><a class="header-anchor" href="#二-相关工作">¶</a>二. 相关工作</h4>
<h5 id="A-单变量时间序列异常检测"><a class="header-anchor" href="#A-单变量时间序列异常检测">¶</a>A. 单变量时间序列异常检测</h5>
<p>传统的框架：估计&amp;检测，。<strong>估计值与实际值的差异</strong>，也是我最早理解的方法。</p>
<h5 id="B-多变量时间序列异常检测"><a class="header-anchor" href="#B-多变量时间序列异常检测">¶</a>B. 多变量时间序列异常检测</h5>
<p>利用多个变量之间的<strong>关联性</strong>来<strong>提高</strong>异常检测的<strong>准确性</strong>。</p>
<h4 id="三-问题陈述"><a class="header-anchor" href="#三-问题陈述">¶</a>三. 问题陈述</h4>
<p>考虑的是<strong>一个实体内</strong>，由多个传感器检测数据构成的多变量（还没有到跨实体的层次）。</p>
<p><strong>他们认为正常数据和异常数据高度不平衡，因此只在正常数据上建模（继承基于预测的策略）</strong>。基于窗口大小为n的历史数据，预测x(t)。</p>
<p>每个测试时间点有一个异常分数，由此决定是否异常。</p>
<p><strong>定义与图有关的基本概念：</strong></p>
<p><strong>有向图</strong>的定义G（V, E）和之前一样，点代表传感器。</p>
<p><strong>节点的领域</strong>，就是和节点相邻的点。</p>
<h4 id="四-方法论"><a class="header-anchor" href="#四-方法论">¶</a>四. 方法论</h4>
<p>物联网系统中，传感器系统有复杂的拓扑关系。此前的方法应用<strong>不同的距离计量方法</strong>衡量节点的关系，选最接近的K个作为邻居。</p>
<p>现在，设计一个有向图结构的LP，自动学习节点间的关系矩阵。LP的核心被命名为Gumbel-Softmax。</p>
<p>被发现的隐藏关联随后被送入图卷积层。</p>
]]></content>
      <categories>
        <category>科研</category>
      </categories>
      <tags>
        <tag>异常检测</tag>
        <tag>Graph Structures</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo的Next主题下为文章添加pdf文件</title>
    <url>/posts/3489905768.html</url>
    <content><![CDATA[<h4 id="前言："><a class="header-anchor" href="#前言：">¶</a>前言：</h4>
<p>其实之前就有想过应该给自己的博客添加<strong>在文章中附带文件的功能</strong>，当时想过如果有一些笔记可以直接放到博客的文章里，不过一直没有刚需就没有动手。</p>
<p>最近刚参与的科研项目在文献调研阶段，读了一些论文记了一些笔记，想着可以分享到博客上来（不过这种行为是不是允许，后续还要问问实验室的师兄，不过暂时本博客也没有公开，所以先放着）。</p>
<p>其实添加这个功能很简单，网络上的教程也很多，但是热度高的基本都不完备，跟着做了很多遍都没成功，一度让我怀疑是不是我的Hexo版本不支持这个功能。不过后来改用Google搜索，看了很多篇帖子之后，完成了任务，在这里进行总结与梳理。</p>
<p><strong>注意：本人使用的是Hexo的Next主题，其他主题也许有不同，但是应该可以参考。</strong></p>
<h4 id="正文："><a class="header-anchor" href="#正文：">¶</a>正文：</h4>
<h5 id="1-下载相关插件"><a class="header-anchor" href="#1-下载相关插件">¶</a>1.下载相关插件</h5>
<figure class="highlight ada"><table><tbody><tr><td class="code"><pre><span class="line">npm install <span class="comment">--save hexo-pdf</span></span><br></pre></td></tr></tbody></table></figure>
<p>有的方法这一步就告诉你可以使用这个插件的功能了</p>
<p>说是按照</p>
<figure class="highlight django"><table><tbody><tr><td class="code"><pre><span class="line"><span class="template-tag">{% <span class="name">pdf</span> 本地文件地址/网页链接 %}</span></span><br></pre></td></tr></tbody></table></figure>
<p>这个格式就可以展示pdf了。</p>
<p>有的人可能会成功，但是从逻辑上来说，这样显然不对。</p>
<p>对于我使用的Next主题来说，默认的配置是禁用pdf，所以需要对主题文件配置进行修改。</p>
<h5 id="2-修改主题配置文件"><a class="header-anchor" href="#2-修改主题配置文件">¶</a>2.修改主题配置文件</h5>
<p>在根目录的themes文件夹下，打开你的主题文件夹，再打开_config.yml文件。</p>
<p>搜索pdf，找到如下图所示的位置：</p>
<p><img src="/posts/3489905768/i1.png" alt="i1"></p>
<p>这里的enable默认是false，也就是不支持显示pdf文件，需要改成true。不然再怎么设置都显示不了pdf文件。</p>
<p>还需要注意，<strong>我的配置文件当中默认只设置了height</strong>，即显示区域的高度。如果不做任何修改，那么我hexo s的时候显示还是正常的，但是hexo d之后显示区域宽度极小，非常奇怪。</p>
<p>所以在这里，<strong>建议大家添加一条宽度设置</strong>，如下图所示：</p>
<p><img src="/posts/3489905768/i2.png" alt="i2"></p>
<p>（这个高度和宽度的参数取决于个人喜好）</p>
<h5 id="3-顺便说一下便于文件管理的功能"><a class="header-anchor" href="#3-顺便说一下便于文件管理的功能">¶</a>3.顺便说一下便于文件管理的功能</h5>
<p>在我们写一篇文章的时候，可能需要调用各种各样的图片、文件等。</p>
<p>如果不进行这一步的设置，也许你写一篇文章，通常会先</p>
<figure class="highlight gauss"><table><tbody><tr><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="built_in">title</span></span><br></pre></td></tr></tbody></table></figure>
<p>于是生成一个以title为名的md文件。</p>
<p>当然，这样你也可以调用图片、文件，按照制定格式输入图片、文件的路径即可，但是这样的文件管理显得杂乱无章。</p>
<p>所以，可以做如下修改。</p>
<p><strong>打开站点的配置文件（不是主题的配置文件）</strong>，找到post_asset_folder，设置为true。</p>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure>
<p>这一修改的意义就是，在你hexo new一篇文章的同时，在文章所在的文件夹同时创建一个与文章的同名的文件夹。你可以把该文章需要的图片、文件放在该文件夹中，再进行调用。（这样是不是就规整了很多呢）</p>
<h5 id="4-调用pdf文件的格式"><a class="header-anchor" href="#4-调用pdf文件的格式">¶</a>4.调用pdf文件的格式</h5>
<p>本地文件</p>
<figure class="highlight django"><table><tbody><tr><td class="code"><pre><span class="line"><span class="template-tag">{% <span class="name">pdf</span> pdf文件路径 %}</span></span><br></pre></td></tr></tbody></table></figure>
<p>网络文件</p>
<figure class="highlight django"><table><tbody><tr><td class="code"><pre><span class="line"><span class="template-tag">{% <span class="name">pdf</span> 网络文件url %}</span></span><br></pre></td></tr></tbody></table></figure>
<h5 id="5-效果显示"><a class="header-anchor" href="#5-效果显示">¶</a>5.效果显示</h5>
<p><img src="/posts/3489905768/i3.png" alt="i3"></p>
<h5 id="6-注："><a class="header-anchor" href="#6-注：">¶</a>6.注：</h5>
<p>有两点想提醒大家</p>
<p>（1）虽然有的朋友用的是Typora这种及时显示效果的编辑器，但是调用pdf文件并不会像调用图片一样，在编辑的时候就显示效果，你看到的只是一行代码。</p>
<p>（2）这种方法目前只支持PC端阅览，不支持手机端。（不过就这样将就吧）</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux当中判断两个文件夹是否相同</title>
    <url>/posts/1325211420.html</url>
    <content><![CDATA[<p>作业中遇到的问题：怎么判断Linux当中两个文件夹是否完全相同？</p>
<figure class="highlight livecodeserver"><table><tbody><tr><td class="code"><pre><span class="line">$ diff -u/-r/-N/-<span class="keyword">a</span> dir1 dir2</span><br><span class="line">　　-<span class="keyword">a</span> Treat all <span class="built_in">files</span> <span class="keyword">as</span> <span class="keyword">text</span> <span class="keyword">and</span> compare them <span class="built_in">line</span>-<span class="keyword">by</span>-<span class="built_in">line</span>, even <span class="keyword">if</span> they <span class="built_in">do</span> <span class="keyword">not</span> seem <span class="built_in">to</span> be <span class="keyword">text</span>.</span><br><span class="line">　　-N, <span class="comment">--new-file</span></span><br><span class="line">　　　　In <span class="built_in">directory</span> comparison, <span class="keyword">if</span> <span class="keyword">a</span> <span class="built_in">file</span> is found <span class="keyword">in</span> only <span class="literal">one</span> <span class="built_in">directory</span>, treat <span class="keyword">it</span> <span class="keyword">as</span> present but <span class="literal">empty</span> <span class="keyword">in</span> <span class="keyword">the</span> other <span class="built_in">directory</span>.</span><br><span class="line">　　-r When comparing <span class="built_in">directories</span>, recursively compare <span class="keyword">any</span> subdirectories found.</span><br><span class="line">　　-u Use <span class="keyword">the</span> unified output <span class="built_in">format</span>.</span><br></pre></td></tr></tbody></table></figure>
<p>建议使用-r，比较符合逻辑。</p>
<p>效果如图。</p>
<p><img src="/posts/1325211420/image.png" alt="image"></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/posts/1243066710.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a class="header-anchor" href="#Quick-Start">¶</a>Quick Start</h2>
<h3 id="Create-a-new-post"><a class="header-anchor" href="#Create-a-new-post">¶</a>Create a new post</h3>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a class="header-anchor" href="#Run-server">¶</a>Run server</h3>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a class="header-anchor" href="#Generate-static-files">¶</a>Generate static files</h3>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a class="header-anchor" href="#Deploy-to-remote-sites">¶</a>Deploy to remote sites</h3>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo上设置文章加密</title>
    <url>/posts/661629439.html</url>
    <content><![CDATA[<p>之前在创建博客的想法中有说到：由于我想在本博客记录我的学习和生活，学习需要开源、生活需要隐私，导致我对这个博客的定位和开放性一直很纠结。现在新的技术——文章加密的引入解决了我面临问题。下面直接说如何设置文章加密。</p>
<p>1.安装插件</p>
<p><code>$ npm install hexo-blog-encrypt --save</code></p>
<p>2.在站点配置文件最后添加</p>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 文章加密</span></span><br><span class="line"><span class="attr">encrypt:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">abstract:</span> <span class="string">（例）这是一篇加密文章，内容可能是个人情感宣泄或者收费技术。如果你非常好奇，请与我联系。</span></span><br><span class="line">  <span class="attr">message:</span> <span class="string">（例）输入密码，查看文章。</span></span><br></pre></td></tr></tbody></table></figure>
<p>这样就完成了站点的配置要求。</p>
<p>3.对于要加密的文章，在Front-matter中单独添加信息，比如：</p>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Hello</span> <span class="string">World</span></span><br><span class="line"><span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"><span class="attr">message:</span> <span class="string">看不到吧，hhhh，不告诉你密码是123456</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></tbody></table></figure>
<p>（这样不同文章的密码可以不一样）</p>
<p>4.后续还可以设置浏览数、评论、作者信息的隐藏，但是我没有这方面需求，不再额外拓展啦。</p>
<p>ps：一开始想的是隐藏文章而不是文章加密，但是实际上文章加密更符合我的小心思，这样博客文章显得很多，但是又不会都被看到。就不给你们看，猜密码去吧~</p>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcodeT3无重复字符的最长子串题解</title>
    <url>/posts/2652043700.html</url>
    <content><![CDATA[<h4 id="题目描述："><a class="header-anchor" href="#题目描述：">¶</a>题目描述：</h4>
<p>题目描述如下</p>
<p><img src="/posts/2652043700/i1.png" alt=""></p>
<h4 id="题解一："><a class="header-anchor" href="#题解一：">¶</a>题解一：</h4>
<p>首先想到一个暴力的方法，考虑所有的子串。比如一个字符串的长度是n，那么它有1个长度为n的子串，2个长度为n-1的子串，…，n个长度为1的子串。从长到短遍历，对于每个子串判断其是否包含重复元素(这个比较简单)，一旦找到长度为x的不重复的子串，就可以返回长度x了。</p>
<p>时间复杂度是O（n3），长度遍历一层循环、特定长度子串遍历一层循环、判断是否重复一层循环。</p>
<p>这个方法是正确的，但是不能ac。因为太慢了，最长的一个测试样例时间超限。</p>
<p>源代码如下：</p>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> {</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//判断一个字符串是否存在某个字符</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">ifExist</span><span class="params">(<span class="keyword">char</span>* arr,<span class="keyword">int</span> count, <span class="keyword">char</span> c)</span></span>{</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;count;i++){</span><br><span class="line">            <span class="keyword">if</span>(arr[i] == c){</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//判断一个字符串是否含有重复字符</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">ifRe</span><span class="params">(<span class="keyword">char</span>* s, <span class="keyword">int</span> len)</span></span>{</span><br><span class="line">        <span class="keyword">char</span> arr[<span class="number">200</span>];</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++){</span><br><span class="line">            <span class="keyword">if</span>(ifExist(arr, count, s[i])){</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            } </span><br><span class="line">            arr[count] = s[i];</span><br><span class="line">            count++;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(string s)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> len = s.<span class="built_in">length</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=len;i&gt;=<span class="number">1</span>;i--){</span><br><span class="line">            <span class="keyword">int</span> nums = len - i + <span class="number">1</span>;  <span class="comment">//i长度得子串数目</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;nums;j++){</span><br><span class="line">                <span class="keyword">char</span> temp[<span class="number">50000</span>];</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=j;k&lt;(j+i);k++){</span><br><span class="line">                    temp[k-j] = s[k];</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">if</span>(!ifRe(temp, i)){</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>
<h4 id="题解二："><a class="header-anchor" href="#题解二：">¶</a>题解二：</h4>
<p>只好选择时间复杂度更为优化的算法。</p>
<p>想到，遍历字符串的每个字符，所有的子串一定是以其中某个字符开头的连续序列。那么我们把每个字符开头的最长连续子串长度算出，再取其中的max即可。</p>
<p>对于每个字符，逐个取其后的字符，如果没有重复就加入子串，直到出现重复，从而计算出最长长度。</p>
<p>源代码如下：</p>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> {</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//判断一个字符串是否存在某个字符</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">ifExist</span><span class="params">(<span class="keyword">char</span>* arr,<span class="keyword">int</span> count, <span class="keyword">char</span> c)</span></span>{</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;count;i++){</span><br><span class="line">            <span class="keyword">if</span>(arr[i] == c){</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(string s)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> len = s.<span class="built_in">length</span>();</span><br><span class="line">        <span class="keyword">int</span>* max;</span><br><span class="line">        max = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">char</span> start = s[i];</span><br><span class="line">            <span class="keyword">char</span> temp[<span class="number">50000</span>];</span><br><span class="line">            temp[<span class="number">0</span>] = start;</span><br><span class="line">            <span class="keyword">int</span> maxlen = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; len; j++)</span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">if</span>(ifExist(temp, maxlen, s[j])){</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">                temp[maxlen] = s[j];</span><br><span class="line">                maxlen += <span class="number">1</span>;</span><br><span class="line">            }</span><br><span class="line">            max[i] = maxlen;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">if</span>(max[i] &gt; result){</span><br><span class="line">                result = max[i];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>
<p>这个算法已经可以通过测试了，但是时间复杂度不算好，O（n2）。</p>
<p><img src="/posts/2652043700/i2.png" alt=""></p>
<h4 id="题解三："><a class="header-anchor" href="#题解三：">¶</a>题解三：</h4>
<p>在题解二的基础上进一步优化。</p>
<p>实际上题解二是有重复计算的部分的：对于第k个字符，其最长不重复子串可能到第rk个字符。那么我们继续计算k+1个字符的最长不重复子串时，k+1到rk的字符子串是不会重复的，完全可以避免判断，直接从rk之后开始。所以只需要维护一个变量last，记录上一个字符最后的索引，下一次直接从last+1开始考虑，前面照搬即可。</p>
<p>源代码如下：</p>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> {</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//判断一个字符串是否存在某个字符</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">ifExist</span><span class="params">(<span class="keyword">char</span>* arr,<span class="keyword">int</span> count, <span class="keyword">char</span> c)</span></span>{</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;count;i++){</span><br><span class="line">            <span class="keyword">if</span>(arr[i] == c){</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(string s)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> len = s.<span class="built_in">length</span>();</span><br><span class="line">        <span class="keyword">int</span>* max;</span><br><span class="line">        max = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">        <span class="keyword">int</span> last = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">char</span> temp[<span class="number">50000</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;=last;j++){</span><br><span class="line">                temp[j-i] = s[j];</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">int</span> maxlen = last - i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = last+<span class="number">1</span>; j &lt; len; j++)</span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">if</span>(ifExist(temp, maxlen, s[j])){</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">                temp[maxlen] = s[j];</span><br><span class="line">                maxlen += <span class="number">1</span>;</span><br><span class="line">            }</span><br><span class="line">            max[i] = maxlen;</span><br><span class="line">            last = i + maxlen - <span class="number">1</span>; </span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">if</span>(max[i] &gt; result){</span><br><span class="line">                result = max[i];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>
<p>虽然时间复杂度还是O（n2），但是一定比上一个方法快。</p>
<p><img src="/posts/2652043700/i3.png" alt=""></p>
<p>以上。</p>
]]></content>
      <categories>
        <category>算法学习</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcodeT5最长回文子串题解</title>
    <url>/posts/4207987680.html</url>
    <content><![CDATA[<h4 id="题目描述如下："><a class="header-anchor" href="#题目描述如下：">¶</a>题目描述如下：</h4>
<p><img src="/posts/4207987680/i1.png" alt="i"></p>
<h4 id="题解："><a class="header-anchor" href="#题解：">¶</a>题解：</h4>
<p>对于一个回文子串，比如“abjba”，去除首尾字符得到的“bjb”仍然是回文子串，由这样的结构容易想到<strong>动态规划</strong>。</p>
<p>s[i,j]表示i到j的子串。</p>
<p>s[i,j]是回文串的前提是<strong>s[i+1,j-1]是回文串且s[i]==s[j]</strong>，这也就能成立递归了。</p>
<p>直接开一个n*n的bool型数组IF[i] [j]，其值为1表示s[i,j]是回文串，否则不是，我们只需要考虑i&lt;=j的情况就好了。</p>
<p>首先IF[i] [i]直接赋1，因为单个字符一定是回文串。</p>
<p>接着按照长度开始遍历，2~n，起始点均从0开始，注意边界。需要单独处理的是长度为2/3的子串**（只需要s[i]==s[j]）**，否则按照递归条件处理。</p>
<p>对于是回文串的子串，需要和已存储的最长回文子串进行比较。</p>
<p>如此则完成。</p>
<p>时间复杂度O(n^2)。</p>
<h4 id="源代码："><a class="header-anchor" href="#源代码：">¶</a>源代码：</h4>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> {</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">longestPalindrome</span><span class="params">(string s)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> len = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span> (len == <span class="number">1</span>){</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> maxLen = <span class="number">1</span>;</span><br><span class="line">        string maxs = <span class="string">""</span>;</span><br><span class="line">        maxs += s[<span class="number">0</span>];</span><br><span class="line">        vector&lt;vector &lt;<span class="keyword">bool</span>&gt;&gt; <span class="built_in">IF</span>(len, vector&lt;<span class="keyword">bool</span>&gt;(len));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++){</span><br><span class="line">            IF[i][i] = <span class="literal">true</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">2</span>;l&lt;=len;l++){</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++){</span><br><span class="line">                <span class="keyword">int</span> j = i + l <span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">if</span>(j &gt; (len<span class="number">-1</span>)){</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">if</span>(s[i] != s[j]){</span><br><span class="line">                    IF[i][j] = <span class="literal">false</span>;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">else</span>{</span><br><span class="line">                    <span class="keyword">if</span>((j - i <span class="number">-1</span> &lt; <span class="number">2</span>)){</span><br><span class="line">                        IF[i][j] = <span class="literal">true</span>;</span><br><span class="line">                    }</span><br><span class="line">                    <span class="keyword">else</span>{</span><br><span class="line">                        <span class="keyword">if</span>(IF[i+<span class="number">1</span>][j<span class="number">-1</span>]){</span><br><span class="line">                            IF[i][j] = <span class="literal">true</span>;</span><br><span class="line">                        }</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">if</span>(IF[i][j]){</span><br><span class="line">                    <span class="keyword">int</span> length = j - i + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span>(length &gt; maxLen){</span><br><span class="line">                        maxs = <span class="string">""</span>;</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">int</span> k=i;k&lt;=j;k++){</span><br><span class="line">                            maxs += s[k];</span><br><span class="line">                        }</span><br><span class="line">                        maxLen = length;</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> maxs;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>
<p>以上。</p>
]]></content>
      <categories>
        <category>算法学习</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>“导师有约下午茶”听汪定老师分享有感</title>
    <url>/posts/2873798393.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="65ea7a07bc74c12c524ca377095765be63f32c9bd0f43b2d6b95763dd1f52eab"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">这篇文章不能给你看哦，不过你要是猜对了密码，那就看叭~</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>漫无目的地思考</category>
      </categories>
      <tags>
        <tag>自言自语</tag>
      </tags>
  </entry>
  <entry>
    <title>《微软公司的时间序列异常检测服务》个人笔记</title>
    <url>/posts/124289153.html</url>
    <content><![CDATA[<p>第三篇论文，原名《Time-Series Anomaly Detection Service at Microsoft》，译作《微软公司的时间序列异常检测服务》，CCF A。方法是光谱残差（SR）+CNN。</p>
<p>具体见笔记。</p>


	<div class="row">
    <embed src="./TSADMicrosoft.pdf" width="100%" height="550" type="application/pdf">
	</div>



]]></content>
      <categories>
        <category>科研</category>
      </categories>
      <tags>
        <tag>异常检测</tag>
        <tag>卷积神经网络</tag>
      </tags>
  </entry>
  <entry>
    <title>emoji汇总</title>
    <url>/posts/3853121154.html</url>
    <content><![CDATA[<p>折腾了半天还是失败了，试了网上几乎所有方法，都没能正常渲染出emoji，暂时放弃，如果正在读这篇文章的你知道好的办法，麻烦联系我。</p>
<p><img src="/posts/3853121154/i1.png" alt="image"></p>
<p><img src="/posts/3853121154/i2.png" alt="image"></p>
<p><img src="/posts/3853121154/i3.png" alt="image"></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>《云系统的跨数据集时间序列异常检测》个人笔记</title>
    <url>/posts/4264007857.html</url>
    <content><![CDATA[<p>最近读的这篇论文原名《Cross-dataset Time Series Anomaly Detection for Cloud Systems》，也是一篇CCF A类论文。译作《云系统的跨数据集时间序列异常检测》，应用对象是云系统上的大规模数据集，目标是<strong>时间序列异常检测</strong>，提出的最有价值的思想是<strong>跨数据集检测</strong>。</p>
<p>以下pdf是个人阅读笔记，欢迎交流指正。</p>
<p>注：pdf暂时只支持PC端阅读。</p>


	<div class="row">
    <embed src="./CrossdatasetAD.pdf" width="100%" height="550" type="application/pdf">
	</div>



]]></content>
      <categories>
        <category>科研</category>
      </categories>
      <tags>
        <tag>异常检测</tag>
      </tags>
  </entry>
  <entry>
    <title>《父亲》——梁晓声</title>
    <url>/posts/2912856967.html</url>
    <content><![CDATA[<p>简介（摘自微信读书）：</p>
<p>《父亲》用朴素真挚的文字记录了梁晓声与自己父亲之间真实发生的故事。全家人都靠他出卖体力供吃穿，不善于表达的父亲总是默默吞下生活中的所有苦。他的愚昧与狭隘曾让自己的孩子遭受苦难、、让家人之间有了隔阂，但当他开始老了他也终于慢慢对自己和家人有了新的理解。当一个儿子步入中年时，父亲在他眼里已需要依附于自己的人格才能继续在社会上存在，这时如何让父亲重新获得与自己比并存的人格已是父子关系中的头等大事。</p>
<p>语句摘抄：</p>
<ul>
<li>中国的贫穷家庭的主妇，对困苦生活的适应力和忍耐力是极可敬的。她们凭一种本能对未来充满憧憬。虽然这憧憬是朦胧的，盲目的，带有浪漫的主观色彩的。期望孩子长大成人后都有出息，是她们这种憧憬的萌发基础。</li>
<li>一天晚上，我亲眼看见，父亲将一包中草药偷偷塞进炉膛里，满屋弥漫一种苦涩的中草药味。父亲在炉前呆呆站立了许久，从炉盖子缝隙闪耀出的火花，忽明忽暗地映在父亲脸上。父亲地神情那般肃穆，肃穆中呈现一种哀伤…</li>
<li>父亲侧过脸，低下头，不再吼什么。许久，父亲长叹了一声，那是从心底发出地沉重负荷下泄了气似的长叹。</li>
<li>报答这种心理，在父子关系中，其实质无异于溶淡骨血深情的稀释剂。它将最自然的人性最天经地义的伦理平和扭曲为一种最荒唐的债务。而穷困之所以该诅咒，不只因为它造成物质方面的债务，更因为它造成精神上和情感上的债务。</li>
<li>列车开动前，父亲从车窗口探出身，对哥哥说：“老大，听爸的话，别考大学！咱们全家七口，只我一个挣钱，我已经五十出头了，身板一天不如一天了，你应该为我分担一点家庭担子了啊！”<strong>父亲的语调中，流露出无限的苦衷和哀哀的恳求。</strong></li>
<li>三年大学，我一次也没有探过家，为了省下从上海到哈尔滨的半票票价。也为了父亲每个月少吃一块臭豆腐，多吃一盘炒菜。</li>
<li>我又几年没探家了。我与父亲又几年没见面了。我已经三十五岁了，可以说是一个中年人了。电报使我心中涌起了一个中年人对自己老父亲的那种情感。**人的回忆，是可以随着年龄的增长而改变“焦距”的，好像照片随着时间改变颜色一样。**回忆往事，我心中对父亲的谴责少了，对自己的谴责反而多了。我毕竟没有给过父亲多少一个儿子对父亲的爱啊！</li>
</ul>
]]></content>
      <categories>
        <category>书海徜徉</category>
      </categories>
      <tags>
        <tag>阅读笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>不一样的页脚设置</title>
    <url>/posts/3905669575.html</url>
    <content><![CDATA[<h4 id="碎碎念"><a class="header-anchor" href="#碎碎念">¶</a>碎碎念</h4>
<p>星期天发现了Butterfly主题的美，于是决定换主题。没想到这一换就是三天。。。</p>
<p>很难去评价Butterfly主题的作者写的文档，可以说瑕不掩瑜吧，但是这个瑕还是挺搞人心态的。好的地方就是安装文档有一条很清晰的线，你可以按着它一步一步美化你的网站，作者可以说比较费心了。但是就我体验到的不好的地方，比如它的完备性甚至不如很多用户自己写的配置文档，还有就是有的地方教学过于潦草了。</p>
<p>以及，不知道是不是版本的问题（4.4.0），遇到了一些bug，比如说导航栏不能用自己定义的名字（比如中文），否则会出现中英两个导航栏，还有的bug下文会说。</p>
<h4 id="关于更换主题时评论系统的移植"><a class="header-anchor" href="#关于更换主题时评论系统的移植">¶</a>关于更换主题时评论系统的移植</h4>
<p>前面挺多操作都是按部就班，或者因为已经过去一两天我也没有动力回顾了。</p>
<p>觉得值得一讲的就是评论系统的移植吧。</p>
<p>如果是初次配置评论系统，读者自行利用搜索引擎就好，这里主要说说移植。</p>
<p>大部分人评论系统的数据库都是leancloud上的某个应用，在主题配置文件中绑定AppId和AppKey即可。</p>
<p>但是我一直不知道是不是允许移植。</p>
<p>Butterfly的文档里面介绍到配置评论系统好像只是介绍了配置文件开启valine。甚至没有教如何配置数据库。没有数据库怎么存储评论信息？也许作者默认大家自学了吧。</p>
<p><strong>经验证，不同主题之间，评论系统可以移植。butterfly的配置文件也绑定对应的leancloud应用即可</strong>。</p>
<h4 id="正文"><a class="header-anchor" href="#正文">¶</a>正文</h4>
<p>先看一下页脚的初始效果和最终效果吧。</p>
<p>初始效果：</p>
<p><img src="/posts/3905669575/i1.png" alt="i1"></p>
<p>最终效果：</p>
<p><img src="/posts/3905669575/i3.png" alt="i1"></p>
<p>感觉变化还是蛮大的吧。没想到这么小的一块做了一天。。。</p>
<h5 id="1-背景透明"><a class="header-anchor" href="#1-背景透明">¶</a>1.背景透明</h5>
<p>这一步就把丑陋的蓝色板块去掉了，可以看见我的主页背景图了。</p>
<h5 id="2-去掉Hexo和Butterfly支持"><a class="header-anchor" href="#2-去掉Hexo和Butterfly支持">¶</a>2.去掉Hexo和Butterfly支持</h5>
<p>虽然说这样不太好，毕竟人家提供了技术支持。但是为了美感，还是决定去掉。</p>
<p>把图中第二个if大段注释掉就好了，看懂代码应该就知道了。</p>
<p><img src="/posts/3905669575/i4.png" alt="i"></p>
<h5 id="3-修改起止时间"><a class="header-anchor" href="#3-修改起止时间">¶</a>3.修改起止时间</h5>
<p>这个在上面那个图的第一个if，在主题配置文件的footer底下把owner的相关信息（包括since）修改一下。</p>
<p>我这里的代码思路应该和初始配置文件不一样，我的思路是首先起始时间是我建站时间，如果建站时间不到一年，就只显示当前年份，如果超过一年就显示起止年份。</p>
<p>应该看得懂代码。</p>
<h5 id="4-自定义语句"><a class="header-anchor" href="#4-自定义语句">¶</a>4.自定义语句</h5>
<p>这个网络说的很多，不多说了。</p>
<p>可以发现到目前为止很顺，但是我最喜欢的就是那句“本站已安全允许…”，做完这个我这一阶段就结束了。</p>
<p><strong>吐槽一下，官方文档不教这个。。。</strong></p>
<p>利用搜索引擎吧。</p>
<p>但是一般人家会这么教你。</p>
<p><img src="/posts/3905669575/i5.png" alt="i"></p>
<p>好像大部分人都是这么做的，配置文件你找到这个位置就会发现有时间格式说明，但是很抱歉，按照这么做无法显示。</p>
<p>我以为是其他地方还要改，查了半天，发现都不是。</p>
<p>那可能就是bug了，毕竟有前车之鉴（导航菜单）。</p>
<p>应该不是我其他地方改错了，因为我复制了官方配置文件，只修改这里，也没用。</p>
<p>但是我很想要这个功能。</p>
<p>想到自己写一个，前面那个footer.pug文件显然就是前端页面了，直接代码写应该没问题。</p>
<p>但是问题在于，我不会这个代码。</p>
<p>只好Google，疯狂翻，然后找到了一个博主（谢谢博主！）</p>
<p><img src="/posts/3905669575/i6.png" alt="i"></p>
<p>于是采纳，但是发现运行时间计算错了，89算成了58（刚好一个月）。时分秒倒是没错。</p>
<p>**但是看代码比写代码容易呀。**不会这个语言不代表不能debug。于是顺了一下思路：很简单，就是获取当前时间和起始时间，然后一减，先整除365天的时间，有多就是年；再整除天数（因为不显示月份）；再整除时分秒…</p>
<p>不详细说了，应该都看得懂。</p>
<p>很奇怪，逻辑没错呀。</p>
<p>于是猜测是getTime获取当前时间出问题了，要是getTime是准的，为什么要手动加上8小时的时间，于是猜测getTime不准。</p>
<p>所以，好吧，手动算差了多少，补上。。。。。</p>
<h5 id="弊端"><a class="header-anchor" href="#弊端">¶</a>弊端</h5>
<p>这样做弊端很明显的，首先没考虑闰年，那么每四年就会差1天，当然也有可能他们使用主题提供的也没考虑闰年。</p>
<p>还有就是这个getTime到底怎么回事，他这个误差是稳定31天8小时，还是不稳定的，比如取决于每个月多少天（因为前面说了刚好差一个月）。</p>
<p>以上隐患都可能导致出现误差，但是大体算是实现了。</p>
<p>很累，不想深究了，先这样吧，有空再深究。</p>
<p>顺便，把这个bug在Github上提供给作者了。</p>
<p>有什么你遇到的bug，我没讲清楚，欢迎联系我。急着去健身，脑子也累了，也烦了。</p>
<p>以上。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>《用自监督的对比预测编码进行时间序列变化点检测》个人笔记</title>
    <url>/posts/4006454964.html</url>
    <content><![CDATA[<p>该论文原名《Time Series Change Point Detection with Self-Supervised Contrastive Predictive Coding》，是CCF A类论文。译作《用自监督的对比预测编码进行时间序列变化点检测》。个人阅读主要是为了了解<strong>异常检测</strong>的相关方法。</p>
<p>由于担心侵权问题，不能展示原文，大家若有需要，直接利用Google学术搜索即可，很容易获取。</p>
<p>以下为个人笔记，欢迎交流和指正。</p>


	<div class="row">
    <embed src="./TSCPD.pdf" width="100%" height="550" type="application/pdf">
	</div>



]]></content>
      <categories>
        <category>科研</category>
      </categories>
      <tags>
        <tag>异常检测</tag>
        <tag>自监督</tag>
        <tag>对比预测编码</tag>
      </tags>
  </entry>
  <entry>
    <title>从Windows到Mac，要重新捡起写博客的习惯</title>
    <url>/posts/408765249.html</url>
    <content><![CDATA[<p>看了看上次博客的更新时间是2024年4月11日，已经是几乎一年以前了，不禁觉得十分遗憾和惭愧。的确有一些博主会以半年或一年的周期进行博客的更新，但是他们往往都是攒着写一个高质量的博客，而我似乎是想起来了才草草更新一下。博客的写作频率变得极低的主要原因和主观原因在我自己。客观的原因（借口）当然也有，现在的工作电脑从Windows换到了Mac，导致博客的本地端一直不在常用电脑上，有时候很想写博客了，却发现Windows电脑不在身边，就又放下了。</p>
<p>在今年的2月16日赶完了ACL的投稿之后，寒假尚未结束，总算是得以闲下来了。很想写博客，记录我的经历、反思我的状态，说实话过去的这一年多我过的还算精彩，很多值得记录的瞬间，不管是开心的还是崩溃的，都应该写下来。但是当我想写时，却发现本地端还在Windows电脑上，而我却没把电脑带回家。当然这主要还是借口，因为完全可以先找个markdown先写着，然后再迁移过去。但是可能缺少了推送的仪式感，最后就搁置了。</p>
<p>翻看自己过去的每一篇博客，心里都是满满的感动，庆幸自己及时记录下来了。其实这种感觉很像QQ空间的，x年前的今天，让你想起来那么多年前的今天，当时的自己在经历些什么。我早些时候特别喜欢发QQ空间，尤其是初中阶段，记得我的账号说说数量已经是接近1500条了。我从不觉得小时候那些中二的、傻乎乎的说说是黑历史，我觉得这是成长的印记，所以我从来不删除。多年以后翻起来，就会想起，原来那时候我是这样的啊，好有意思。但是随着年龄的增长，QQ空间毕竟有很多熟悉或不熟悉的人，在众人面前总是没有那么随心所欲，发布频率也几乎到了一年一条的地步。博客给我的感觉是一样的，但是博客是我自己的空间，想到什么写什么。我是一个健忘的人，如果不是这些文字记录，我可能早就忘了两三年前我在干些什么了。翻看过去的博客，我会想起大二跨年和小刘一起吃火锅、散了很久的步，打车回今年；想起大二考试周苦苦煎熬之后和云鹏、皓哥、小明去津门羊大爷放肆大吃大喝；想起保研前夕刚接触科研时候的忐忑辛苦；想起大三津南泰达往返的辛苦…虽然我文笔不好，但是我却仍然觉得读起来十分感动。有一种过去的自己和现在的自己隔着时空交流对话的感觉。</p>
<p>我真是没时间更新博客吗？其实也不是，零碎的时间、阶段性的休息，都完全足够记录下生活的点滴了。大四那一年，我去了很多地方，经历了很多事情，却都没有记录下来。我去了云南、秦皇岛、南京、长沙、大连、烟台、威海、大庆、石家庄、香港、呼和浩特、南昌、上饶、舟山、曼谷等等地方，看了日出日落、高山草原、广阔的大海，体验了南昌和长沙的爆辣、香港的高物价，吃了云南的牦牛火锅、酸汤猪脚、呼和浩特的铁帽子烤肉和冰煮羊。太多太多了。我也经历了很多痛苦和崩溃。2024年初赶ACL投稿，第一次写论文，跑着一个又一个复杂的实验、改论文一遍又一遍仍然是质量堪忧、每天工作到深夜然后和老师们打电话被打击得躺在床上哭。小刘评价我那段时间灵魂都要抽离了。2024年6月份，同时准备毕业论文、ACL录用的camera ready版本修改、EMNLP投稿、龙舟队毕业划的训练和比赛。随队伍出去比赛，休息时间不能出去玩，只能改论文，坐高铁、火车也只能工作。在香港比赛的时候真是，候场的时候坐地上打开电脑改论文，闷出一身汗，过一会又热身上场乘风破浪。即使是这样，EMNLP的进度仍然非常捉急。香港的第一个比赛日，上船比赛失联了一段时间，老师找不到我，事后被痛骂了一顿。于是不得已放弃了第二个比赛日，实在是太遗憾，但是真的没办法。那天从早上起床到晚上8点截稿，没有喝一口水、吃一点东西，最后脑子已经完全转不动了。交稿之后，一个人拖着疲惫的身躯找了一家香港的自助火锅，傻傻地吃了一顿。这是一段又一段值得记录的经历。</p>
<p>我自己的心理状态和性格其实也变了很多很多。最明显的是主动地减少了很多很多的社交，开始习惯一个人独来独往。其实这个苗头在大三去泰达的时候就有了。那时候还在疫情封校阶段，在泰达几乎可以说是没有认识的人，每天都是一个人，和人的交流最多就是告诉食堂阿姨我要吃什么。那时候其实是不习惯的。大一大二在津南，经常和兄弟们一起吃饭、锻炼、上自习，现在都没有了。长久没有社交明显感觉到自己的脾气变差，很容易烦躁。后来大四到计算所提前做毕设，也总是一个人。但是似乎已经逐渐习惯和自洽了。尤其是到了雁栖湖，住进了单人间，工作日完全就是和自己打交道。早上起床洗漱，一个人吃个早饭，上午、下午、晚上都是有课则去上课，课上也是做自己的事情，没课就在宿舍自己办公，找一个空闲时间自己一个人去游泳或者健身，如此反复。不过好在周末我都会和小刘一起好好放松休息，看电影、睡懒觉、吃大餐。久而久之也就习惯与自洽了。有人说人是社交动物，也有人说人要习惯和擅于独处。我觉得都不重要，主要是追求自己内心想要的东西。现在的生活虽然孤独，但是也很开心和满足，那就足够了。不过仍然有要改进的地方，比如说独处很重要的一项是摄入、阅读，这一点我做的很不足，我已经放下了阅读的习惯很久了。我想应该通过阅读使自己的精神和心理强大，才能更好地自处、更好地思考。</p>
<p>当然还有科研方面的进步，不敢说自己走上正轨，只能说相比刚接触科研时的自己还是进步了不少。我并不是非常勤奋刻苦，我的自驱力和兴趣也并不是很强，知识不丰富、技术不强，但是我想我还是有一点好奇心和兴趣、有一点可以付出的努力，希望我能继续在这条路上走下去，探索更多的未知和问题。</p>
<p>希望下一次博客更新不是在一年、半年以后～</p>
]]></content>
      <categories>
        <category>漫无目的地思考</category>
      </categories>
      <tags>
        <tag>自言自语</tag>
      </tags>
  </entry>
  <entry>
    <title>代理出问题了</title>
    <url>/posts/1193658689.html</url>
    <content><![CDATA[<p>如果你也出现了“<strong>使用代理不能上网，不用代理却可以上网</strong>”的问题，也许这篇博客会对你有帮助。（<strong>本篇文章不涉及计算机网络的知识</strong>，稍微了解一些计算机概念的同学即可阅读。因为本人计算机网络课程也还没学到什么东西，我自己是可以理解的）</p>
<p>今天打开电脑正要写作业，打开浏览器发现网络无连接，大概显示的是代理出问题或者防火墙之类的。但是看网络连接（校园网）是正常的。于是手机搜索了这个问题。网络上的指导是设置—&gt;网络和Internet—&gt;代理中，<strong>关闭手动设置代理</strong>。这一步的原理很简单，因为我<strong>没有挂VPN，但是电脑设置却开启了代理</strong>，那我自然没法上网，因为找不到代理嘛。</p>
<p>于是关闭手动设置代理，<strong>开始上网，没问题</strong>。</p>
<p>但是这次写作业有翻墙的需要，所以就需要挂VPN，于是像往常一样<strong>挂上VPN，网络又挂了</strong>，显示无法连接。（其实最后发现原因很简单）</p>
<p>网络上的教学只能说也是鱼龙混杂。</p>
<p>有的还是教你关闭手动开启代理，这个我试了没有用，因为关闭代理设置之后虽然可以上网，但是挂上VPN之后代理会自动打开，还是出问题。</p>
<p>我以为是我电脑出问题了。因为有很多人说是如果没有关VPN就关闭电脑，开启电脑的时候会自动寻找代理，就会出问题。但是这不是我问题的答案。</p>
<p>我一开始以为：电脑设置里面的代理和我挂VPN的代理是两条路，理想状态应该是挂了VPN但是电脑没开代理设置，所以我以为我的电脑出问题了会自动打开代理，我应该想办法关闭这个设置。当然这是错误的。</p>
<p>更有甚者说是还要打开注册表删除一些东西，还好我够懒，没有这么做。</p>
<p>看到了另一条路：打开IE浏览器，打开工具栏，选择Internet选项，选择连接栏，打开局域网设置，把代理服务器那边打开。（如下图所示）</p>
<p><img src="/posts/1193658689/i1.png" alt="image1"></p>
<p>还说其他浏览器也一样，都可以通过IE浏览器设置，这里我就觉得不靠谱。凭什么IE浏览器可以设置其他浏览器。我看着Internet选项也很眼熟，想想这不是设置里面那个嘛。于是直接打开菜单栏搜索Internet选项，就能打开这个设置了。</p>
<p>所以说我感觉这里的笔者根本不知道为什么要这么做，实际上打开Internet选项和IE浏览器有什么关系呢？搞得评论区很多人说没有IE浏览器怎么办，误人子弟！</p>
<p>回归正题，这样打开设置也没用，还是不能上网。</p>
<p>多试了几次我发现VPN、手动代理设置、Internet选项里的局域网设置其实是一体的，打开了VPN就会打开后两者，关闭了后两者VPN自然没有用。总的来说就是<strong>你的VPN实际上和你电脑中关于代理的设置是一体的，而不是我原本以为的电脑代理是正规渠道、我的VPN是旁门左道，所以互相独立</strong>。</p>
<p>所以回归网络上提供的两种方案，方案一针对的就是你没有挂VPN但是电脑却开了代理设置，这肯定是不能上网的，所以需要关闭代理设置，但是这就不能翻墙了。方案二针对的是你挂了VPN，但是电脑没有开代理设置，这自然也会出现网络问题。</p>
<p>但是现在我是开了VPN也设置了代理，却无法上网。</p>
<p>这时候我觉得可能是VPN的问题，于是卸载重装了clashforwindows，想要重新配置VPN。</p>
<p>重装之后发现保留了配置，但是我想重新配一遍。绑定订阅地址是没什么问题。**选择代理节点这边发现问题了，我选择的代理服务器停用了！**于是换了一个节点，网络正常了！</p>
<p>所以我的问题是代理服务器已经挂了。所以总结一下：我如果不挂VPN、电脑不设置代理，那么我可以在国内正常上网；我如果不挂VPN、电脑设置代理，自然出bug（方案一）；我如果挂了VPN，电脑不设置代理，也出bug（方案二）；我如果挂了VPN，电脑也设置代理，但是我的代理服务器挂了，我自然也挂了，但是换成正常服务器就可以科学上网了。</p>
<p>通过这件事，体会到遇到问题不能盲从网络上的解决方案，实际上网络上的人水平不一定高，他们也可能只是碰巧解决了问题，但是不知道原理，这种帖子阅读是没有好处的，不懂原理的解决方案，也许只是症状一致，照着改运气不好会越改越坏。<strong>一定要有自己的判断</strong>。</p>
<p>当然了，也不能闭门造车，不通过网上这些帖子的指导和个人的试错，我也不可能靠自己总结出这篇博客。</p>
<p>也许会觉得自己真傻，要是一开始就看看代理节点就好了。但是其实这样也不坏，虽然折腾了一上午，但是对于代理也有了更深刻的认识，挺好的。</p>
<p>有问题欢迎评论区交流~</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>代理（科学上网）</tag>
      </tags>
  </entry>
  <entry>
    <title>保研准备工作梳理</title>
    <url>/posts/1726264158.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="1292e04df76c35a7beb3f07f60ff41660c65f9f2d53d269a555a72bf9f09fe12">145938601c6079170969ae59f0501a7c7af1fb32cf2585360c8b2ae1fb70cc5c4e5c22f75eafed9eedd95ff82834dcaf9ffc57342e43b0e613d6f9438a3e198660c9caecc72caa62ffcd88fb0a0b4d408cc43f6214101b8713ae42f239facdc6a9a41b24d1e1997d628e0efbd83fe2daf76158ce0a9e2a806ccaff122b699fb46682b5a286452fbf6b05a5b8fe48be5914868fb6aa59bf3b74f80f81bc1b06156ec31357df0197b4e3b389d267ea55c5bd74494888621df95cb502d9ac596c8012b86adeebf4c4c907313375c70c31a213ec585776fb3b0c7febb8d96b6433e7b7d404302032f07a0b96086c4521a198025924077a5120a316dc413bf39bf98638f40f53552be3d56dd6e5104112f7275cf29c978a14cc92bf554d2d51c23124c5f00d109f181213072001471d956092fe4bed2729081892a52c5644f3dbcfa6e15f308281d3b38f43aeedb963da38ed9f2c4a6458aa4deb3753b7ca468ded693946bbdeb672bf83a140c8d339c75e42e44c081c2d7fe08205aee24f876d1a5ac1ee1739d83c74267ba177eebc4a84b9cbb3988b6c3200b79caf609d6b08084a8751a609fbca3a401f8bc10510c23175874e781824b20ac3c8995164fe6681f77fb38e9b74655914a212dbbf4a7eb2d34806d65d8391312a82a0e88a0733e845dc4ae6508bcd08c9bca1714c4132ebc0e7bd704ed143b9e5573f53b4ad2cbd33ff0043670dfb076766e61077a4dfaa6424c24680398c18aed93f704b5b90a17b376b277c75b44cdc7f8443dcaa22aefc87c9838120de9de23105ffa640dd5f2d5b2c4534030418db2485a28c57f0b11ead5d6d89c524c79e98172cd955e9642fe30b3f5da9453ce2b2e8417d339774d9592958df081ddca96b392f2df47c4d0697543a96bddc4bb1feab320f207045058a90aa23ab9d0786ae9e70ba5caf93dbb778b7516309cbe6549f1458e3d3e9a661d6142950e7027eab222755b22eed0ccb7e3a266727076fbce918c44fbcd6e19f74d5a4481d15f29c918f9fb839bb844fcde9af715be40e9ceffa60ecd806103a42622400dec0dc444387783dddeae05ff7933cfe881427adc5ef5115e782c202318f56fc7464d3bddec8817893038d80feac6eb0a2d9f76b42c5626edd0a6cab24790f7a800119f26d5ac769a62999b45db0eb1930b1b2de3ed99636e9cc748717ea7f10f1313071a1a7e2da09e42bf465b02d488b68fea05b08b810d00dd056fedf029f95a3edc63abdc39ea45136547512fe036f1837ad6beda0d7ccf109bf20ea7e21dba5ffc97a247e457c91f092fce627675b4b3a16988bef1bbf28b2eb655e90d20105f86165d04ff68f03b338409b24f05f7a511144ad39720a3dc3af8fde47a8b8414087c605ed5c401598363fefc65fa9390682b17ecd8a367ca204f11b46e285dd0187b4f9ce4981f0d0809bda2b1bcc912cae87378c7eab2f2d57a62422d291997a1e39c6264ea0111d871f782a709719e9d0177cc3b1c7553a8719bd2eee6d7e0c3a266a13cf639f6cba632def4ff9b40179d74d4eef3e6a0f07ed006b82a2b528010367e392bf66e0bd1426e104f5724f71a5a92b6008f24446590f10985632bb5dbb35e1876334a243c7618d26bd8f62567061b91e2b67ec19af6dbd4955d0e30890c5927daab21db0312cfa0ed7836520e137d79770b91b2645e921329efe4f5fcbc882751c00669b3a77259c7281d7d513501a1633cb2851415ff4fd75c067d84f1652472362a0b91fe7d889e31fcc77a96333502134ef69ad0123ce1bf4768b85bfe3e6a133efde410574e3670192fcaba28e7c65b2715ef7377e32b7273021d1db863472f68228e9a7191a396c3d9a8445673f5f77c667408fdf4508d0f0404fa0cc0f64d6e093a0ffb56e905b2e25f007ebf0503edddf61d05148a41ccf11159d895af0f6aebf363ff753c59d38af270a36ef38b8c0759efda98c3aa637e9fc6c16dc0311608219ad55bf0f865db742e61c64db2967e846a5e1e07ec6bfc92ca39e7ce75fea926f50f1a28ce8337aa73fbe0f1dc2d0db01b73fefcbafd11aa9725071a1c5fdc7e503957aad237e3e1741d0709624c1569918eb19c605545029db4a684658a9ac6b3b2e7a06ce5eba19f3b6222db28438f15e93e1b2751f7dd994492710526fbd3943ff6262569b0ed73f61d49d29ef3cde301919d7c1dd2a969379d81230284533112e7d3c0f7ef83ae695a0e641406eb671718f104b4f01e28f3517aac473d73b9948d42959769e9f510415a928ac6e132a8b455eb3a904555f189701fe6fb92152b9e20d056b47ed19d87ec996d42d13135cce029270b3532970146a68910ae99ec1dcbd9ec83a63e92518539ef7c2fdfa621fb5c53d29f2f28657838567abe5601c87a135feb84962811aed141d62be4643be6a60262e10010caca520baab05aeb1ece86297bbca5ab52cb95cbc330845826a908ba541bd665e9fb58755ab6412de6c4e99596faadf224facb799255587f00d656c4d0b69ff2431ec76d4e7cc4fa7b6df6a051de7436a397db0b1878ec134625380431451528b7197f8382342808dc4685c4b111d10701f985b6998e148a885be6d911429339a179fcb310f1b9754e1de568699dd68581a01b23ed4822d9c44a874c64c2afcabcfe9cb327afed0f3fbb92ef3458a6c15d8cd82f467edbd1a2274afd6584fd361188b80e339a4623fb41ef16175b5ee42f71cc050452e6366432d31b51072e440fb7848eac8366766ddd58142db6d6dbd3d7350f003224bba73e368be16351fbebc45cfdf52afc61e758858c82340891b06d8de3f9bd59f630708464ec122f68c621618e1ea8cfd6f244534e41d22064317ced8cfee7f3704905cb99a72106fb37bb2b1182746a73b9ae974e1a4fa33cf4e78f10527775a586855e3e11716bfd89bb9b0e2</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">这是一篇私密博客哦~</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活的点点滴滴</category>
      </categories>
      <tags>
        <tag>规划</tag>
      </tags>
  </entry>
  <entry>
    <title>《自监督对比预测编码》论文复现</title>
    <url>/posts/426886319.html</url>
    <content><![CDATA[<h3 id="前言-v2"><a class="header-anchor" href="#前言-v2">¶</a>前言</h3>
<p>本篇文章旨在记录《用自监督的对比预测编码进行时间序列变化点检测》论文的复现过程。</p>
<p>由于本人习惯一边做实验，一边写报告记录，所以文章的撰写也是和实验同步进行的。因此对于能否复现实验成果，我没有很大的把握。但是就算是失败的尝试，也算是值得记录的。</p>
<p>该论文的阅读笔记见</p>
<blockquote>
<p><a href="http://43.143.214.130/2022/10/03/%E3%80%8A%E7%94%A8%E8%87%AA%E7%9B%91%E7%9D%A3%E7%9A%84%E5%AF%B9%E6%AF%94%E9%A2%84%E6%B5%8B%E7%BC%96%E7%A0%81%E8%BF%9B%E8%A1%8C%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E5%8F%98%E5%8C%96%E7%82%B9%E6%A3%80%E6%B5%8B%E3%80%8B%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/">《用自监督的对比预测编码进行时间序列变化点检测》个人笔记 | Yangyy’s Life</a></p>
</blockquote>
<h3 id="要求："><a class="header-anchor" href="#要求：">¶</a>要求：</h3>
<p><img src="/posts/426886319/i12.png" alt="i"></p>
<h3 id="正文：-v2"><a class="header-anchor" href="#正文：-v2">¶</a>正文：</h3>
<h4 id="1-代码获取"><a class="header-anchor" href="#1-代码获取">¶</a>1.代码获取</h4>
<p>由于是挑选容易找到源代码的论文进行复现，所以这一步并不困难，源码在GitHub上有。</p>
<blockquote>
<p><a href="https://github.com/cruiseresearchgroup/TSCP2">https://github.com/cruiseresearchgroup/TSCP2</a></p>
</blockquote>
<p>该仓库包含所用的三个数据集中的USC数据集。</p>
<h4 id="2-设定参数"><a class="header-anchor" href="#2-设定参数">¶</a>2.设定参数</h4>
<p><img src="/posts/426886319/i1.png" alt="i"></p>
<p>根据提示，程序运行需要设定输出路径和输入数据集等参数，提到这两者是必要的参数。</p>
<p>参数可以在PyCharm中设定。（USC是默认的数据集名称）</p>
<p><img src="/posts/426886319/i2.png" alt="i"></p>
<p>设定参数之后试着运行程序，报错，似乎是因为我的电脑没有GPU资源。</p>
<p><img src="/posts/426886319/i3.png" alt="i"></p>
<p><strong>初步判断应该是程序采取CUDA编程，但是我本机不支持</strong>，看看能不能修改吧。</p>
<p>后来多等了一会，发现进度条动了</p>
<p><img src="/posts/426886319/i5.png" alt="i"></p>
<p>看来是可以跑，只不过也许是因为CPU很慢，所以才显示红色。确实，毕竟也不是报错。</p>
<p>当然，我觉得可能和我把GPU的参数注释掉有关。但是我在整个代码中确实没有发现某个实验过程显式调用了GPU。主要也是<strong>我对tensorflow如何选择硬件支持的机制不太了解</strong>，也许是它会自主选择，不需要人为设置？</p>
<h4 id="3-改用CPU支持tensorflow"><a class="header-anchor" href="#3-改用CPU支持tensorflow">¶</a>3.改用CPU支持tensorflow</h4>
<p>这一步暂时没找到合适的解决方案，先放着，尝试结合论文理解代码吧。</p>
<p>（自适应了，不用改）</p>
<h4 id="4-理解代码"><a class="header-anchor" href="#4-理解代码">¶</a>4.理解代码</h4>
<h5 id="（1）预设置"><a class="header-anchor" href="#（1）预设置">¶</a>（1）预设置</h5>
<ul>
<li>读取外部参数，比如数据集路径，模型存储路径等等</li>
<li>设置模型参数，比如时间窗口的大小、批处理大小、迭代轮数等等</li>
<li>设置损失函数</li>
</ul>
<h5 id="（2）数据预处理"><a class="header-anchor" href="#（2）数据预处理">¶</a>（2）数据预处理</h5>
<ul>
<li>装载数据集，在自定义的DataHelper.py当中有一个load_dataset()函数，参数是数据集所在路径、数据集名称等。（直接完成了数据预处理）</li>
</ul>
<p><img src="/posts/426886319/i4.png" alt="i"></p>
<p>这当中load_hasc_ds和load_usc_ds都是第三方库的函数。</p>
<p><strong>但是这里颇为奇怪，根据代码，如果输入的数据集不是HASC和USC，程序就会报错，那么实验的雅虎数据集是怎么做的？</strong></p>
<p>自己加上打印数据，从而<strong>观察输入数据集是什么样的</strong>（学长提问）</p>
<p><img src="/posts/426886319/i6.png" alt="i"></p>
<p>以上信息基本可以反映输入数据集的情况了。</p>
<p>首先总的样本数是18687，其中异常点有1400，大概占比7.5%。</p>
<p>其中选择14949个样本作为训练集，占比80%（常见的比例）。</p>
<p>可以发现输入的数据分为两块，trainx和trainlbl，也就对应着时间序列和是否为异常的标签。</p>
<p>trainx的shape是（14949，200），代表着有14949个样本，维度是200维，代表着200个属性。</p>
<p>而trainlbl的shape是（14949，1），代表着14949个样本，每个样本对应1维的0/1值，代表是否为异常值。</p>
<p>因此输入的数据集的shape是（14949，201）。</p>
<p><strong>可以看看最初始的数据集长什么样</strong></p>
<p><img src="/posts/426886319/i9.png" alt="i"></p>
<p>就是非常长的一串数据，应该是<strong>未经切分处理的时间序列数据</strong>。</p>
<h5 id="（3）构造特征编码器的基本结构"><a class="header-anchor" href="#（3）构造特征编码器的基本结构">¶</a>（3）构造特征编码器的基本结构</h5>
<p>TS-CP2方法的核心是编码器。这里主要定义其结构。</p>
<p><img src="/posts/426886319/i8.png" alt="i"></p>
<h5 id="（4）训练得到编码器"><a class="header-anchor" href="#（4）训练得到编码器">¶</a>（4）训练得到编码器</h5>
<p>训练的目的就是得到编码器的合适参数，也就是得到合适的编码器。类似于神经网络里的神经元的参数。</p>
<p><strong>过程采用对比预测编码（正样本集和负样本集的各种对比获取信息）</strong></p>
<p><img src="/posts/426886319/i7.png" alt="i"></p>
<p>用CPU进行训练非常漫长，而且每轮迭代的用时迅速增加，第6轮迭代到第8轮迭代用时1小时，花了近两小时训练过程仅未完成8/1600，所以没能完成训练模型的过程。</p>
<p>根据代码可以发现，编码器输出的编码特征的大小是可以指定的参数，默认是10。意味着向编码器输入时间序列，每个时间点得到一个10维的特征编码。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">parser.add_argument(<span class="string">'--code'</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">10</span>, <span class="built_in">help</span>=<span class="string">'size of encoded features'</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h5 id="（5）进行测试"><a class="header-anchor" href="#（5）进行测试">¶</a>（5）进行测试</h5>
<h6 id="1）装载测试数据集"><a class="header-anchor" href="#1）装载测试数据集">¶</a>1）装载测试数据集</h6>
<h6 id="2）输入到特征编码器"><a class="header-anchor" href="#2）输入到特征编码器">¶</a>2）输入到特征编码器</h6>
<h6 id="3）根据特征编码计算余弦相似度"><a class="header-anchor" href="#3）根据特征编码计算余弦相似度">¶</a>3）根据特征编码计算余弦相似度</h6>
<h6 id="4）根据余弦相似度判断是否异常"><a class="header-anchor" href="#4）根据余弦相似度判断是否异常">¶</a>4）根据余弦相似度判断是否异常</h6>
<p><strong>如何计算异常分数？异常阈值是多少？</strong></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">estimate_CPs</span>(<span class="params">sim, gt, name, train_name, metric=<span class="string">'cosine'</span>, threshold=<span class="number">0.5</span></span>):</span></span><br><span class="line">    <span class="comment">#if metric == "cosine":</span></span><br><span class="line">    <span class="comment">#    sim = _cosine_simililarity_dim1(h, f)</span></span><br><span class="line"></span><br><span class="line">    est_cp = np.zeros(sim.shape[<span class="number">0</span>])</span><br><span class="line">    est_cp[np.where(sim &lt; threshold)[<span class="number">0</span>]] = <span class="number">1</span></span><br><span class="line">    tn, fp, fn, tp = confusion_matrix(gt, est_cp).ravel()</span><br><span class="line">    f1 = f1_score(gt, est_cp)</span><br></pre></td></tr></tbody></table></figure>
<p>异常分数用余弦相似度衡量，异常的阈值也是需要指定的参数（默认就是0.5）。</p>
<p><strong>余弦相似度的相关知识：</strong></p>
<p><img src="/posts/426886319/i10.png" alt="i"></p>
<p><img src="/posts/426886319/i11.png" alt="i"></p>
<p>但是阈值这一参数也是需要计算（正负样本集）得到的：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">threshold=epoch_wise_sim[-<span class="number">1</span>] - ((epoch_wise_sim[-<span class="number">1</span>]-epoch_wise_neg[-<span class="number">1</span>])/<span class="number">3</span>)</span><br></pre></td></tr></tbody></table></figure>
<p>最终输出就是0/1序列，代表是否为异常点。</p>
<h5 id="（6）保存模型"><a class="header-anchor" href="#（6）保存模型">¶</a>（6）保存模型</h5>
<p><strong>结语</strong>：总体摸清了实验的思路，但是有的具体细节还没能理解，限于机器算力，未能完整复现实验。</p>
]]></content>
      <categories>
        <category>科研</category>
      </categories>
      <tags>
        <tag>异常检测</tag>
        <tag>自监督</tag>
        <tag>对比预测编码</tag>
        <tag>论文复现</tag>
      </tags>
  </entry>
  <entry>
    <title>二刷TSCP2论文</title>
    <url>/posts/4183696190.html</url>
    <content><![CDATA[<h2 id="前言-v3"><a class="header-anchor" href="#前言-v3">¶</a>前言</h2>
<p>TSCP2模型来自论文《Time Series Change Point Detection with Self-Supervised Contrastive Predictive Coding》，译作《用自监督的对比预测编码进行时间序列变化点检测》。</p>
<p>其实这篇论文我已经阅读过，并且“复现”过。这篇论文是我接触科研的第一篇论文（已经是四个月之前的事了）。当时对科研工作的了解几乎为零，所以实际上阅读和复现都不甚规范，了解异常检测及其方法的目的倒是达到了。</p>
<p>四个月后虽然我科研能力并没有提升多少，了解也并没有增加很多，但是好歹比此前进步了。主要也是课题组需要复现一些MTS AD的方法，进行效果的对比。此前由于没有GPU资源，只是简单地跑了一下。这次实实在在地复现一次，记录一下效果。</p>
<h2 id="正文-v2"><a class="header-anchor" href="#正文-v2">¶</a>正文</h2>
<h3 id="二刷论文"><a class="header-anchor" href="#二刷论文">¶</a>二刷论文</h3>
<h4 id="摘要-v2"><a class="header-anchor" href="#摘要-v2">¶</a>摘要</h4>
<p><strong>CPD</strong>识别与时间序列数据的趋势和属性变化相关的时间以描述系统的基本行为。</p>
<p>提出一种基于对比预测编码的自监督的时间序列变化点检测方法——<strong>TS-CP2</strong>。</p>
<p>TS-CP2是第一个在CPD中使用<strong>对比学习策略</strong>的方法，通过将<strong>相邻</strong>的时间区间与<strong>跨时间</strong>区间的嵌入表征的对比实现。</p>
<p>证明优于五个最先进的CPD方法（包括无监督和半监督）。</p>
<h4 id="简介"><a class="header-anchor" href="#简介">¶</a>简介</h4>
<p>大量处理能力和存储容量的提供意味着我们目前拥有前所未有的<font color="red">访问和分析数据的能力</font>。数据存储和共享的规模、速度意味着缺乏数据整理。数据注释昂贵。因此自监督和无监督学习很火热。</p>
<p>CPD是一种识别突变的时间点的方法。</p>
<p>变化点可以为系统基本行为提供重要理解，比如变化点代表系统状态的改变和故障或者紧急情况的发生。</p>
<p>CPD被广泛应用于多变量时间序列数据，以及其他具有时间特征的数据模式。</p>
<p>变化点通常是从时间序列的不同属性中的一个来估计的，包括时间连续性、分布或形状。<font color="red">无监督的CPD</font>方法通常是为了<font color="red">识别某一个特定属性</font>的变化而开发的。</p>
<p>目前CPD方法未能有效推广，因为<font color="red">不同应用的语义边界通常与不同的事件序列属性相关</font>。比如心电图的时间形状模式体现心脏节律异常、统计特征的突然变化可以体现人类姿势的变化。用统计学的CPD检测心电图，性能就会下降。</p>
<p>缓慢变化的时间形状和统计属性也是一个挑战。</p>
<p>因此提出了TS-CP2。提出问题：<strong>自我监督学习</strong>是否可以为CPD提供一个有效的、通用的表示。直觉是<font color="red">利用时间序列的局部相关性</font>，学习一个表征，使连续时间区间共享信息最大化，使分离的时间区间共享信息最小化。相邻时间区间学习到的<font color="red">表征有明显不同</font>就可能出现变化点。</p>
<h4 id="相关工作和背景"><a class="header-anchor" href="#相关工作和背景">¶</a>相关工作和背景</h4>
<h5 id="时间序列变化点检测"><a class="header-anchor" href="#时间序列变化点检测">¶</a>时间序列变化点检测</h5>
<p>目前CPD的方法<font color="red">大多是基于非深度学习方法</font>。现有的方法可以根据变化点检测考虑的<font color="red">时间序列的特征</font>来分类。</p>
<p>1、统计学方法通常在确定的时间序列中<font color="red">相邻短区间的统计差异</font>的基础上计算变化点。区间之间的<font color="red">统计差异</font>通常用参数或者非参数的方法测量。</p>
<p>2、还有一类统计学的CPD方法，将<font color="red">变化点确定为分段边界</font>，通过动态编程、贪婪搜索等方法<font color="red">使得统计学成本函数最优化</font>。</p>
<p>3、利用时间序列的时间形状模式，通过识别<font color="red">时间序列中与形状模式突出变化</font>相关的未知检测变化点。</p>
<p>4、<font color="red">混合的CPD方法</font>，利用时间序列的时间形状模式和统计分布。</p>
<p>5、基于深度学习的CPD方法最近也被提出来了。</p>
<p>6、CPD在视频处理应用也非常实用。</p>
<h5 id="表征学习（自监督表征学习）"><a class="header-anchor" href="#表征学习（自监督表征学习）">¶</a>表征学习（自监督表征学习）</h5>
<h6 id="对比学习"><a class="header-anchor" href="#对比学习">¶</a>对比学习</h6>
<p>对比学习是一种使用一组由<font color="red">正面样本对</font>和<font color="red">负面样本对</font>组成的训练实例来制定数据集中样本相似或不相似的原因。</p>
<h6 id="基于对比的表征学习"><a class="header-anchor" href="#基于对比的表征学习">¶</a>基于对比的表征学习</h6>
<p>前面这些都属于比较宽泛的概括性知识，建立起对CPD领域的大致了解即可。</p>
<p>主要还是学习TS-CP2模型的具体方法论。</p>
<hr>
<h4 id="方法论"><a class="header-anchor" href="#方法论">¶</a>方法论</h4>
<h5 id="问题定义"><a class="header-anchor" href="#问题定义">¶</a>问题定义</h5>
<p>给定多变量时间序列**{X1,X2,…,XT}有T个观测值，Xi∈Rd**。试图估计与时间序列属性变化相关的时间t。<font color="red">未来表征和预期表征的异同</font>可以看作过渡到下一个片段的措施。</p>
<h5 id="TS-CP2概述"><a class="header-anchor" href="#TS-CP2概述">¶</a>TS-CP2概述</h5>
<p>有一些异常检测方法使用<font color="red">自动回归模型进行预测</font>，在这些方法中，变化点是在与<font color="red">预测误差显著增加</font>相关的样本中检测出来的。</p>
<p>建议使用表征学习提取紧凑的潜在表征，其对原始数据分布不变。</p>
<p>论文采用类似CPC的方法来学习<font color="red">使连续时间窗口之间相互信息最大化</font>的表示方法。</p>
<p>首先，一个自动回归的深度卷积网络<font color="red">WaveNet</font>被用来对<font color="red">每个时间序列窗口进行编码</font>；其次，在编码的基础上采用一个3层的全连接网络产生更紧凑的嵌入表征。连续时间窗口的嵌入表征之间的余弦相似度被计算出来以估计变化点。</p>
<p><strong><font color="red">对比学习的方法被用来训练编码器</font></strong>，in each batch用<strong>一对</strong>连续的时间窗口和<strong>一组</strong>跨越时间的窗口对。</p>
<h5 id="表征学习"><a class="header-anchor" href="#表征学习">¶</a>表征学习</h5>
<p><strong><font color="red">TS-CP2方法的核心就是编码器</font></strong>，将连续的时间窗口转换成紧凑的嵌入表征。通过最大化<font color="red">相邻时间窗口的交互信息</font>训练该表征以学习短时间尺度上的相似性。</p>
<p>使用WaveNet而不使用LSTM。</p>
<p>具体的编码器的架构就不复述了，主要就是将时间窗口映射到低维度空间。</p>
<p>其实<font color="red">最主要的是如何训练编码器</font>，我们输入<font color="red">一对正样本和一组负样本</font>，关键还是设计好成本函数。</p>
<h6 id="成本函数"><a class="header-anchor" href="#成本函数">¶</a>成本函数</h6>
<p>采用**<font color="red">InfoNCE loss function</font>**。</p>
<p>计算每个批次的阳性样本对概率：</p>
<img src="/posts/4183696190/p1.png" alt="计算ρi" style="zoom:50%;">
<p>Sim代表计算余弦相似度。t是缩放参数。</p>
<p>损失函数：</p>
<img src="/posts/4183696190/p2.png" alt="损失函数" style="zoom:50%;">
<h6 id="负向采样"><a class="header-anchor" href="#负向采样">¶</a>负向采样</h6>
<p>随机抽出阳性样本对，用于构建每个批次的阴性样本对。</p>
<p>基本原理如下图所示：</p>
<img src="/posts/4183696190/p3.png" alt="负向采样" style="zoom:40%;">
<p><font color="red">个人理解</font>：</p>
<p>选出K个相邻的时间窗口对(x1, y1)、(x2, y2)、…、(xk, yk)，但是每一对时间窗口之间的时间间隔要足够长。这样一来:</p>
<p>x1和y1构成正样本对，(x1, y2)、(x1, y3)、…、(x1, yk)就构成一组k-1个负样本对。</p>
<p>因此k个连续时间窗口，实际上生成了k组训练实例。</p>
<p><font color="red"><strong>简单又巧妙！</strong></font></p>
<h5 id="变化点检测模块"><a class="header-anchor" href="#变化点检测模块">¶</a>变化点检测模块</h5>
<p><strong>现在已经完成了编码器的构建以及训练的设计，理论上编码器已经能够实现较好的自监督效果了，接下来的问题就是如何检测变化点了。</strong></p>
<p>将成对的历史和未来窗口转换为嵌入表征，计算余弦相似度；和平均值做差；用寻峰算法寻找差值函数的局部最大值，与之相关的点通常被认为是变化点。</p>
<h4 id="实验"><a class="header-anchor" href="#实验">¶</a>实验</h4>
<p>（来到了最重要的实验阶段。一方面实验才是真正的任务需求(作为基线方法对比；另一方面实验能使得我更好地理解论文idea的真正落实)</p>
<h5 id="数据集"><a class="header-anchor" href="#数据集">¶</a>数据集</h5>
<p>分析方法在各种应用中的有效性：网络服务流量分析、人类活动识别和移动应用程序使用分析。</p>
<ul>
<li>雅虎基准数据集是最广泛引用的异常检测基准之一。（网络服务流量分析）</li>
<li>HASC挑战赛的数据集。（多个传感器收集的人类活动数据集）</li>
<li>USC-HAD。也是收集人类活动的数据集。</li>
</ul>
<img src="/posts/4183696190/p4.png" alt="数据集属性" style="zoom:50%;">
<h5 id="Baseline方法"><a class="header-anchor" href="#Baseline方法">¶</a>Baseline方法</h5>
<p>提出的TS-CP2方法的性能与五种最先进的**<font color="red">无监督</font>**变化点检测技术进行比较。</p>
<ul>
<li>ESPRESSO</li>
<li>FLOSS</li>
<li>aHSIC</li>
<li>RuLSIF</li>
<li>KL-CPD</li>
</ul>
<h5 id="评价指标"><a class="header-anchor" href="#评价指标">¶</a>评价指标</h5>
<p>模型性能以F1 Score来评价。</p>
<p>注意！注意！变化点的检测是有误差范围的，而不是直接对比标签和预测结果的。比如t1是变化点，t2不是；预测的结果是t1不是，t2是；不一定是预测错了两次，如果t1和t2间隔在允许的误差范围内，那么我们会认为这次预测是正确的。</p>
<h5 id="微调和敏感度分析"><a class="header-anchor" href="#微调和敏感度分析">¶</a>微调和敏感度分析</h5>
<p>主要分析TS-CP2对以下方面的敏感性：</p>
<ul>
<li>
<p>Window size。窗口大小，也就是历史和未来间隔的长度。这个数值不宜大也不宜小，并且通常由数据集决定。</p>
<p><font color="red">较长的时间窗口拥有最高的F1分数</font>。</p>
</li>
<li>
<p>Batch size。也就是前面提到的数值K。在4~128之间。</p>
<p><font color="red">通常情况下，批量大小和检测性能之间有一个单调的递增关系。</font></p>
</li>
<li>
<p>Code size。编码长度。就是输出的嵌入表征的维度，在4~20之间。</p>
<p>最佳代码大小取决于窗口大小和批大小</p>
</li>
</ul>
<h5 id="Baseline-Comparison"><a class="header-anchor" href="#Baseline-Comparison">¶</a>Baseline Comparison</h5>
<img src="/posts/4183696190/p5.png" alt="Baseline Comparison" style="zoom:50%;">
<p><strong>非常非常重要的一个优势在于</strong>：</p>
<p><font color="red">TS-CP2模型一旦训练出来，CPD的实现就非常简单，只涉及到历史和未来窗口的学习表征之间的比较（余弦相似度的计算），很可能在低资源设备上实现在线操作。基准方法不能在线应用。</font></p>
<h4 id="复述论文核心思想"><a class="header-anchor" href="#复述论文核心思想">¶</a>复述论文核心思想</h4>
<p>本文的名字叫用于时间序列变化点检测的自监督对比预测编码，我认为核心就是两个点：**<font color="red">自监督</font>**和<font color="red"><strong>对比</strong></font>。</p>
<p>实际上时间序列异常检测如果有充足的成本进行异常点的标注（也就是标签的生成），那么用监督学习的方法效果会非常好（之前看的论文当中提到的）。但是由于这个成本太大了，不现实，所以大家被迫探索统计方法和无监督学习的方法。</p>
<p>本论文说的自监督就是自我生成表征（类似标签的作用），因此需要一个编码器。但是由于缺乏标签，我们没有实际值来验证编码的效果。所以引入了第二个重要的点，对比学习。也就是通过相邻的时间窗口和远隔的时间窗口学习正面和负面的信息（生成样本的负向采样方法也十分有趣）。因此采用了InfoNCE计算损失函数进行学习。学习得到一个良好的编码器之后，可以通过计算相邻时间点的余弦相似度进行变化点的检测。</p>
<p>最终变化点的验证还会涉及到误差范围的设置。</p>
<p><strong>以上完成了论文的阅读，接下来开始复现模型效果。</strong></p>
<h3 id="复现模型效果"><a class="header-anchor" href="#复现模型效果">¶</a>复现模型效果</h3>
<img src="/posts/4183696190/p6.png" alt="GPU利用率" style="zoom:50%;">
<img src="/posts/4183696190/p7.png" alt="显存利用率" style="zoom:50%;">
<p>可以发现，在训练的过程中：显存的利用率非常大，但是GPU的利用率却不到10%，非常奇怪。</p>
<p>看到一种说法是“如果图片的分辨率太大，即使一张图片（batch_size为1）放入显存，也直接爆了，GPU利用率当然也无从谈起，外在表现就是显存几乎占满，但同时GPU等不到数据，一直空闲。解决方法是将图片分辨率改小就OK了。”</p>
<p>我把batch_size从64调整为16，显存还是撑满，GPU使用率降低了</p>
<img src="/posts/4183696190/p8.png" alt="GPU使用率" style="zoom:50%;">
<p>利用率反而只有一半了。</p>
<p>再把batch_size从16调到256</p>
<img src="/posts/4183696190/p10.png" alt="GPU使用率" style="zoom:50%;">
<p>GPU使用率大幅度提高。但是预计训练用时没怎么变化（还是需要20小时左右，CPU是621个小时😥）属实离谱。</p>
<img src="/posts/4183696190/p11.png" alt="GPU使用率" style="zoom:50%;">
<p>果然batch_size越大使用率越高，1024的时候已经到了60%左右了，提升了10倍，反正显存都是撑爆。但是总时间还是19小时啊。</p>
<p>总共时间点的数量就是T，不会反复训练，大抵是epoch = batch /4，然后会随机在一定时候停止一下训练，进行验证。验证之后会存储模型。</p>
<p>修改了一处代码错误：</p>
<p>原代码：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">history = prep_model(x_test[:, <span class="number">0</span>:WIN].reshape((num, <span class="number">1</span>, WIN)))</span><br><span class="line">future = prep_model(x_test[:, WIN:].reshape((num, <span class="number">1</span>, WIN)))</span><br></pre></td></tr></tbody></table></figure>
<p>但是这样会报错</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"main.py"</span>, line 127, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="built_in">history</span> = prep_model(x_test[:, 0:WIN].reshape((num, 1, WIN)))</span><br><span class="line">  File <span class="string">"/root/miniconda3/lib/python3.8/site-packages/keras/utils/traceback_utils.py"</span>, line 67, <span class="keyword">in</span> error_handler</span><br><span class="line">    raise e.with_traceback(filtered_tb) from None</span><br><span class="line">  File <span class="string">"/root/miniconda3/lib/python3.8/site-packages/keras/engine/input_spec.py"</span>, line 264, <span class="keyword">in</span> assert_input_compatibility</span><br><span class="line">    raise ValueError(f<span class="string">'Input {input_index} of layer "{layer_name}" is '</span></span><br><span class="line">ValueError: Input 0 of layer <span class="string">"model"</span> is incompatible with the layer: expected shape=(None, 100, 1), found shape=(3738, 1, 100)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p>所以按照提示，我将代码修改为</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">history = prep_model(x_test[:, <span class="number">0</span>:WIN].reshape((num, WIN, <span class="number">1</span>)))</span><br><span class="line">future = prep_model(x_test[:, WIN:].reshape((num, WIN, <span class="number">1</span>)))</span><br></pre></td></tr></tbody></table></figure>
<p>​	这样代码就可以跑通了。</p>
<p><font color="red"><strong>可是我是原封不动地clone整个项目的呀，为什么会出现这样的问题，原作者没有遇到吗？</strong></font></p>
<p>但是因为训练非常短暂，所以</p>
<h4 id="终于知道为什么训练会提前终止了"><a class="header-anchor" href="#终于知道为什么训练会提前终止了">¶</a>终于知道为什么训练会提前终止了</h4>
<p>因为它设置了提前终止条件</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> epoch &gt; <span class="number">5</span>:</span><br><span class="line">            <span class="keyword">if</span> np.<span class="built_in">abs</span>(epoch_wise_loss[-<span class="number">1</span>] - epoch_wise_loss[-<span class="number">2</span>]) &lt; <span class="number">0.0001</span> <span class="keyword">or</span> epoch_wise_loss[-<span class="number">2</span>] &lt; epoch_wise_loss[-<span class="number">1</span>]:</span><br><span class="line">                end_condition += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                end_condition = <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> end_condition == <span class="number">4</span>:</span><br><span class="line">                <span class="keyword">return</span> epoch_wise_loss, epoch_wise_sim, epoch_wise_neg, model</span><br></pre></td></tr></tbody></table></figure>
<p>就是训练五轮以上时，<font color="red"><strong>连续出现四次以上</strong></font>的loss没有明显变化或者loss反而增大了，那么就会停止训练。</p>
<img src="/posts/4183696190/p12.png" alt="GPU使用率" style="zoom:60%;">
<p>看训练过程中存储的Loss曲线，确实一下子降下来之后就不怎么变化了，所以很早就终止了。</p>
<p>但是目前的F1 score非常低，只有0.4，不知道为什么。</p>
<p><font color="red">主要是不能按照论文的batch_size跑，那样要很久（毕竟是自己花钱租服务器），为了提高GPU利用率，我只能提高batch_size，但是这样可能就没法复现效果。</font></p>
<p>loss确实是很快就降下来了。</p>
<p>论文中最佳效果对应的batch_size是8，但是这样的话GPU利用率只有3%左右，训练非常慢，不知道效果怎么样。</p>
<p>但是训练中loss很低，sim很高，neg也比较低，看起来效果是不错的，为什么F1就不好看。</p>
<h4 id="2-1的收获："><a class="header-anchor" href="#2-1的收获：">¶</a>2/1的收获：</h4>
<p>今天主要是改了两个bug，模型可以正常运行了</p>
<p>也发现了batch_size和GPU利用率的规律</p>
<p>但是没法达到论文中说明的效果。</p>
<h4 id="2023-2-2-总结一下当前的进度以及遇到的问题"><a class="header-anchor" href="#2023-2-2-总结一下当前的进度以及遇到的问题">¶</a>2023/2/2  总结一下当前的进度以及遇到的问题</h4>
<p>阅读论文熟悉TS-CP2模型。</p>
<p>找到官方源代码尝试实现论文中描述的效果。</p>
<p>clone的官方源代码会报错，进行了修改，目前模型可以正常运行。</p>
<p>问题：</p>
<p>现在复现的方法是不是之后论文中对比实验的基线方法？我自己随便选的会不会不合适。</p>
<p>目前没有达到论文中提到的效果有两方面原因：</p>
<p>1、利用的数据集是比较小的简化数据集（为了节省实验时间）</p>
<p>2、论文中最佳实验效果的batch_size大小是8这样的较小数字，而GPU的使用率和batch_size之间有类似单增的关系，batch_size=8是GPU的使用率只有3%左右，训练模型的预计时间很长。如果提高batch_size，GPU的使用率能得到提升，但是训练的效果不太理想。</p>
<h4 id="学长对问题的回答"><a class="header-anchor" href="#学长对问题的回答">¶</a>学长对问题的回答</h4>
<p>1、复现的方法不一定需要很高大上，主要是能通过对比实验看出我们的方法的效果是不是更好，可能在其中再挑一些方法作为baseline methods，所以自己找比较top的会议当中提出的论文进行复现就好了，最后就是要能转换到我们自己的数据集上。<font color="red">复现论文最重要的是要能把模型转换到我们自己的数据集上！！！</font></p>
<p>2、模型效果调不到理想也是十分正常的，基本上都很难调试到论文中描述的效果。</p>
]]></content>
      <categories>
        <category>科研</category>
      </categories>
      <tags>
        <tag>异常检测</tag>
        <tag>论文复现</tag>
      </tags>
  </entry>
  <entry>
    <title>假期中后期的一些回顾与规划</title>
    <url>/posts/2118603635.html</url>
    <content><![CDATA[<p>在上一篇文章当中提到，目前来看又是一个小阶段性的胜利。今天又是除夕，短暂地给自己放个假，让身心都松下来。</p>
<p>翻翻相册一看，学校提前遣返、我落地上海是12.6的事情了，今天是1.21，不多不少，正好一个半月。不得不感慨最近这两个寒暑假真是太长了，上次暑假提前遣返，在将乐待了三个月（5.30<sub>8.27），这次寒假提前遣返会在上海待（12.6</sub>2.12）两个月多一周。加起来都在家待半年了。</p>
<p>到家至今已有一个半月，假期还剩下20天左右，进度条只剩下1/3。刚好又是一个阶段性攻坚战的结束。在这个节点回顾一下此前做了什么，此后需要做什么还是非常有必要的。目的如描述当中所说——“避免时光虚度”。</p>
<p>写到这里，我十分想讨论一下这个目的。</p>
<p>其实我理应不是在放假都不允许自己虚度时光的人（事实上前三个寒暑假感觉都是虚度）。我对自己的评估是：我是一个非常典型的劳逸结合的人，不能一直玩也不会一直学，顶多学习到十一点就“打卡下班”，很少会肝到凌晨，但是一直玩我也玩不住。感觉自己是很典型的work life balance的人。没有刻苦与努力，就是正常地学习工作。所以寒暑假休息我是十分认同的。在该休息的时候休息，给自己放放假。但是我想休息≠虚度。我自己不希望的虚度是躺在床上刷手机、看各种碎片化信息和刷短视频，其实自己以前能明显感觉到如果刷短视频的时间长了，整个人就会非常浮躁，耐不下心，追求短暂的刺激。偶尔放松时躺在床上刷视频倒还好，但是放假整日除了吃饭睡觉就是躺着刷视频玩手机，那样的场景似乎和吸大烟无异。理想的放松与“虚度”应该是看看闲书、逛逛有趣的博客看看别人的生活、出去走走逛逛、运动一番、出去骑行一下、听听音乐、看看电影…</p>
<p>不过这样的休息方式似乎算不上虚度？只是相对专心学习而言的放松而已。其实感觉自己挺喜欢这样的生活的，不紧不慢，不管学习还是休息都在获得一些什么。获取知识、获取风景、获取音乐、获取汗水…玩手机虽然是放松，玩久了也蛮累的，刷短视频对我来说实在想不到能获取到什么有益的东西。</p>
<p>但是这样一看似乎非常的功利，做什么事都希望有回报吗？其实不是的。对我来说以看书等方式放松，其实并不是为了书中所谓的知识，做这些事情不是为了某些目的，而是单纯的做这些事情能让我感到轻松愉快。是做这些事情本身会让我身心愉悦还是因为正确而导致自身感到愉快，这也很难分辨。不过既然感到愉快和放松不就足够了吗？</p>
<p>因为需要在店里帮忙的缘故，断断续续写了两天，思路都断了。上面的讨论就草草结束吧。</p>
<p>回顾一下前半段寒假时光我做了什么。</p>
<p>12.6到12.16这段时间就是完成细碎的作业和寻找外校的科研实习机会。总体来说应该算是蛮充实的，也在12.16联系到了导师。</p>
<p>12.16到12.22这几天的时间就是按照导师的要求先恶补了PyTorch的相关知识，接着熟悉了RecBole的框架。这几天是十分专注的，为了给导师留下好的印象和尽早开始接触后面的任务，我都是尽量自己push自己。大约是12.23吧，导师让师姐给我分配了具体的任务，在RecBole复现KD_DAGFM模型。</p>
<p>（但是其实因为这一周时间完全花在科研实习的准备上，所以课内的大宗结课任务完全搁置了。习概的小论文、大论文、软件工程的结课、编译的实验报告和作业、Python的结课大作业、操作系统的结课大作业，当时压力也算是非常大了。一边准备科研实习要学习全新的知识，一边要焦虑担心后面时间来不及，结课任务完成不了。）</p>
<p>12.23到12.30。由于很多ddl都在12.30，因此12.30是一个阶段的结束。当时把软工、编译、习概都解决了，留下两个大型结课任务：1.9截止的Python、1.13截止的OS，由于都是将考试改成了大作业结课，重要性可见一斑。</p>
<p>12.30到1.6这一段时间同样非常焦虑，因为想赶快开始KD_DAGFM的实现，但是苦于要认真完成（甚至卷一卷）两门课的结课作业而无法开始科研实习。当时觉得如果1.13才能开始的话，复现模型还可能需要很长一段时间（我当时对这份工作的工作量完全没有概念，因此没有把握多久能完成，甚至不确定自己是不是能完成），担心太久没有给导师反馈而给导师留下不好的印象。但是好在这段时间找到了上海图书馆，环境非常nice，我太喜欢这里了。于是找到了一种规律的生活，早出晚归。进度也比预想推进的更快。印象里1.6提交了OS，1.7大概解决了Python，比预期提早一周结束了任务。（其实一方面是因为Python是团队项目，组员不是很想做的很复杂，所以工作量比较小。不得不感慨软院的摆，Python是3学分，期末的团队项目的开发工作量比我在计算机时2.5学分的Java的个人结课项目小多了，我感觉工作量甚至没到1/5。是的，四个人完成的工作量没有一个人的1/5。但是也不想挣扎了，毕竟我也想早点结束。OS倒是做的比较满意，因为是自己一个人的项目，所以就深入地做了，主要也是因为在图书馆学习时间很多，所以推进的很快。）</p>
<p>其实这时候直接上手科研实习的任务应该还是比较从容的。但是变故还是出现了。姐姐三年没回将乐了，申请了年假要回家，问我要不要和她一起。和小刘一个月没见了，我也想回去见她。按照前两年的安排，我通常是年后自己一个人回将乐去。但是由于今年情况特殊，寒假要做的事情太多，我年后并不打算回将乐。因此短暂陪姐姐回去几天感觉也好。其实还是纠结了好一阵子的。具体就不多说了。于是1.7陪姐姐回将乐了。回将乐不用多说，学习的时间自然是不可能有多少的。去叔叔家吃个饭，陪爷爷妹妹们玩一天；姨姨请我们出去吃好吃的；和小刘约会；去外婆家吃饭，时间很自然地就溜走了。姐姐是1.11回的上海，我推迟了一些，1.13回上海。当然1.7~1.13这一周，尤其是最后两天，还是挤出时间学习了。所幸和廖静晨、李延枫的关系维护的很简单、自然，我们一起约着去图书馆学习（他们也要准备考研了），就当作是一块儿出去玩了。本来应该出去散散步、喝喝奶茶、聊聊天的，但是实在是挤不出时间了。姐姐逛街时帮我相中一件过年的新衣，我都没空去买。我实在不想拖着科研实习任务了。</p>
<p>1.12<sub>1.13这两天把KD_DAGFM模型的论文给看了。1.13</sub>1.20这一周的时间又是早出晚归去图书馆，全力开展科研实习的任务。其实我真的真的非常没有底的，因为做这个任务没有人可以问，基本只能靠自己。我并不觉得自己实力有什么能让我有把握的底气。所以还是很焦虑，一边努力学，一边担心做不出来、做不好，不能在年前完成。因为年后规划的任务同样十分繁重，实在不想留到年后了。所幸！所幸！在1.20大抵是做出来了，验证模型运行效果达到了论文中描述的效果，CI测试也通过了，就等学长的review了（当然不能保证没有bug了，有也只能到时候再说了）。由于拖了一个月，我的内心十分煎熬，所以在1.21（除夕）的上午还是迫不及待地打扰老师汇报了进度完成情况。老师说年后沟通。总算又是一个阶段的告一段落 了。</p>
<p>这一个半月、六周左右的时间，我想我过的还是十分满意的。目前出了两门课程成绩，软工97、数据科学95，还是非常不错的。科研实习感觉也做的尚可。也就是回将乐有五六天的休息时间吧，我想是可以接受的。寒假前半段可以给自己打个√了。</p>
<p>在这里感慨一下自己真的十分幸运，这期间其实有很多我自己预设的里程碑，我都幸运地准时或者提前达到了。如果12.30论文写不完、如果OS不能如期结束、如果科研实习年前都没有好的效果，那么我想我会更加痛苦。非常非常感谢！</p>
<p>目前因为春节的缘故，店铺非常忙（爸妈赚钱太辛苦了），也没有什么过年的概念，都在店里帮忙（就当休息了），最近两天都是三点多才睡觉的。只是有些没有学习的罪恶感，希望能早点回归学习状态。</p>
<p>1.22~2.12，也就是开学前的这段日子了。规划是要复习两门课的笔试（计算机网络、编译原理），要恶补美赛（现在不知道要不要打了）、还要同时做两份科研工作（一份校内、一份校外实习）、最好能准备一下CSP考试。相比还是十分艰难的。只能尽快回到图书馆的生活状态。打算是上午、下午两个时间段，一半复习、一半做科研。晚上回家的时间准备美赛和CSP。我感觉美赛可能大概率会鸽，目前看起来没什么作用，这样任务会轻松一点。</p>
<p>当然，这几天我还要在店里帮忙，悲！</p>
]]></content>
      <categories>
        <category>漫无目的地思考</category>
      </categories>
      <tags>
        <tag>自言自语</tag>
        <tag>反思</tag>
      </tags>
  </entry>
  <entry>
    <title>分享新概念——Yak Shaving</title>
    <url>/posts/2551240651.html</url>
    <content><![CDATA[<h2 id="注："><a class="header-anchor" href="#注：">¶</a>注：</h2>
<p>原文链接：</p>
<p><a href="https://antfu.me/posts/about-yak-shaving-zh">关于 Yak Shaving (antfu.me)</a></p>
<h2 id="正文：-v3"><a class="header-anchor" href="#正文：-v3">¶</a>正文：</h2>
<p>休息时漫无目的地翻阅其他人的博客，看到了这篇文章，其中提到的Yak Shaving这个概念我觉得非常有趣。</p>
<p>原文写到：</p>
<p><a href="https://americanexpress.io/yak-shaving">Yak Shaving</a> 的字面意思是为剪牦牛毛，而引申出来的意思是，当你在进行一个工作时，发现另一个工作还没有完成，你便先去解决那个工作，在进行那个工作时，你又发现另一个工作… 如此往复，让你偏离了原本本该完成的工作，最终却也什么都没有完成。一个实际的例子：</p>
<blockquote>
<p>You want to bake an apple pie, so you head to the kitchen.<br>
In the hallway, you notice some paint chipping on the wall.<br>
So you walk to the hardware store for some paint.<br>
On the way, you pass a bakery and stop in for a cupcake.<br>
While eating the cupcake, you feel a pain in your mouth. It’s that cavity that you’ve been putting off.<br>
You pick up your phone to call the dentist to make an appointment, but you see a notification from your friend Cher, who’s having a party.<br>
You don’t want to show up empty-handed, so you stop for a bottle of wine…</p>
</blockquote>
<blockquote>
<p>你想烤一个苹果派，所以你去了厨房。<br>
在走廊里，你注意到墙上有一些油漆剥落。<br>
于是你走去五金店去买一些油漆。<br>
在路上，你经过一家面包店，停下来吃了一个小蛋糕。<br>
在吃蛋糕时，你感到嘴里很痛。这是你一直在拖延的蛀牙。<br>
当你拿起手机想给预约牙医时，你看到了你朋友 Cher 正在举行一个聚会的通知。<br>
你不想空手去参加聚会，所以你停下来买了一瓶酒…</p>
</blockquote>
<p>其实Yak Shaving本身应该是一种负面的例子，喻指做事情没有坚定的方向，总是被其他的事情所干扰，最终一事无成。就像上面的例子，“你”没有烤出苹果派、也没有补好家里的漆、“你”没有解决拖延的蛀牙，可能也耽误了朋友的聚会。这么看倒是非常不值得提倡了。</p>
<p>但是实际上原文的作者是在推崇Yak Shaving的思想。他以自己的亲身经历从另一个角度理解了这个概念。</p>
<blockquote>
<p>作者想做一款关于换汇与记账的APP，所以他找了学外语的同学<br>
学外语的同学不会用JSON，所以他找到了 <a href="https://github.com/think2011/vscode-vue-i18n"><code>think2011/vscode-vue-i18n</code></a><br>
这个项目缺少一些需要的功能，他基于此做出了i18in Ally<br>
开发中发现常用的通用函数，他借由 <a href="https://github.com/streamich/react-use"><code>react-use</code></a> 的思想，做出了<a href="https://github.com/vueuse/vueuse">VueUse</a><br>
…</p>
</blockquote>
<p>作者也是在解决一个目标问题时发现了一个新的问题，从而去解决新的问题的反复过程中。但是不同的地方在于，他发现了新的问题并且把新的问题解决了甚至在解决的基础上做了完善。</p>
<p>所以本质的差别还是在于是否有在解决问题。两个角度的Yak Shaving实际都是在解决一个问题的过程中不断发现新的问题的过程。对于原本语义中的人，新的问题打断了他解决原有问题的过程，并且他也没有解决新的问题，因此问题的产生是负面的；对于该作者而言，他不断遇到问题，并不断地解决问题、完善解决方案，成就了更好的自己。不断发现问题对于一个执着的问题解决者应该算是一件好事。</p>
<p>之前在汪定老师在分享科研经历的讲座当中提到，（大意）不应该等到做好所有的准备之后再开始做科研，因为“准备好”这个状态是不太现实的，应该做的是在确定一个方向之后，缺什么补什么，需要学什么再去学什么。我想这二者应该有异曲同工之妙。</p>
<p>简单来说，坏的Yak Shaving是从1个问题出发，解决过程中遇到了99个问题，但是最终100个问题的解决进度可能都是50%，所以什么都没有解决；好的Yak Shaving是从1个问题出发，解决过程中遇到了99个问题，但是最终100个问题中绝大多数问题的解决进度都是100%或者100+%。</p>
<p><strong>遇到</strong>问题不一定是坏事，<strong>发现</strong>问题也不一定是好事。问题的出现是好是坏，恐怕最终还是取决于我们是问题的解决者还是问题是我们的解决者。</p>
<p>解决一个目标问题时遇到了其他的问题，有时候可以忽视突然出现的问题（比如去厨房烤苹果派时，不要在乎油漆的脱落），这样至少我们解决了目标问题；当然如果补完了油漆也吃上了苹果派自然更好；但有的时候必须解决后期出现的问题才能解决目标问题（比如某个工具出现了问题或者需要新增什么功能）；还有时候可能在解决一个又一个的问题时，丢掉了最初的问题（像作者最终没有去开发那款APP），这也不一定是坏事，毕竟后期出现的问题也可能更具价值又或者最初的问题已经被颠覆了。</p>
<p>Yak Shaving的情况有很多。<strong>所以或许可以说，成功并不源自Yak Shaving，最终还是取决于解决问题的态度、能力，以及对形式和自身的判断和把握。</strong></p>
]]></content>
      <categories>
        <category>来自互联网的收获</category>
      </categories>
      <tags>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>利用RecBole框架复现DCN-V2模型</title>
    <url>/posts/2997172935.html</url>
    <content><![CDATA[<h4 id="一、-论文来源"><a class="header-anchor" href="#一、-论文来源">¶</a>一、 论文来源</h4>
<p>本次复现的DCN-V2模型由《DCN V2: Improved Deep &amp; Cross Network and Practical Lessons for Web-scale Learning to Rank Systems》提出。</p>
<h4 id="二、-数据集"><a class="header-anchor" href="#二、-数据集">¶</a>二、 数据集</h4>
<p>本模型在Criteo数据集上运行。Criteo数据集通过RecBole框架提供的方法可转换为.INTER类型的原子文件。</p>
<h4 id="三、-论文阅读-模型复现"><a class="header-anchor" href="#三、-论文阅读-模型复现">¶</a>三、 论文阅读 &amp; 模型复现</h4>
<h5 id="1、-简介"><a class="header-anchor" href="#1、-简介">¶</a>1、 简介</h5>
<p>学习排名（Learning to Rank，LTR）是现代机器学习和深度学习的重要问题之一。在LTR模型中，<font color="red"><strong>学习有效的特征交叉</strong></font>吸引关注。</p>
<p>有效的特征交叉提供了超出个别特征的额外的交互信息。</p>
<p>为了更准确地捕获有效的特征交叉，常见的补救措施是通过<font color="red">更宽或者更深的网络</font>进一步增加模型的容量。但是<font color="red">提高模型性能的同时，降低了服务速度</font>。</p>
<p>Deep&amp;Cross Network（DCN）是有效和优雅的。</p>
<p>DCN-V2首先通过交叉层学习内部的显性特征交互，然后与深度网络结合，学习互补的隐性交互。DCN-V2的核心是交叉层。</p>
<h5 id="2、相关工作"><a class="header-anchor" href="#2、相关工作">¶</a>2、相关工作</h5>
<p>（好吧，其实读到这里都没有看懂，希望后面具体描述能看懂）</p>
<h5 id="3、DCN-V2"><a class="header-anchor" href="#3、DCN-V2">¶</a>3、DCN-V2</h5>
<p>（感觉有必要先学习一下DCN模型）</p>
]]></content>
      <categories>
        <category>科研</category>
      </categories>
      <tags>
        <tag>科研实习</tag>
        <tag>RecBole</tag>
      </tags>
  </entry>
  <entry>
    <title>在8.25拿到了驾驶证</title>
    <url>/posts/457368451.html</url>
    <content><![CDATA[<p>高考完的暑假没有及时学车真是令人遗憾。上了大学之后，爸妈去了上海，每次放寒暑假总是要先在上海待上一半的时间，再去将乐待一段时间，有时候有集训还要提前回天津，这样零碎的时间在哪个地方都学不了车。学期内光是课业就忙得喘不过气了，更别说学车了，再加上最近一两个学期封校更是学不了。所以一直不知道自己什么时候可以学车，到了工作估计更忙了。</p>
<p>所幸大二下学期因为疫情，学校提早在5.30放我们回家了，大三上学期又是在8.29开学，再加上上海疫情尚未完全清零，所以前后也有将近三个月的时间在将乐，于是决定要学车，想在一个暑假拿到驾驶证。</p>
<p>虽然说有三个月的时间在将乐，但是居家隔离14天、大作业论文结课、暑期实习实训、复习开学考，这样一扣，其实能学车的时间实在是不多。</p>
<p>最后在六月二十多去驾校报了名，当时想着在实习实训之前把科目一考了。但是恰巧将乐的体检系统需要更新，等了大半周也没更新好（不得不吐槽小地方效率之低，更新体检系统又不是开发系统），最后在实习实训上课的时候跑去沙县做了体检（实际上流程极为简单，基本相当于只是看是不是红绿色盲）。好不容易算是报名成功了，结果约科目一又特别难约，记得当时大概是六月底开始约，只能约到7.13（大概两周之后）。当时驾校的老板和我说估计能让我暑假考个科目二。哎，本想着一个暑假学完，但是也没办法了，这事儿不宜拖着，大不了寒假再回来学科三科四。</p>
<p>于是就开始先上暑期实习。本来一般人科目一是需要提前比较久开始刷题的，当时教练来问我的时候我还完全没打算开始呢，主要是实习实训费时间。在科目一考前一天半，觉得不应该再拖了，开始学习（没有上实习实训的课程）。首先看b站上的相关教学视频（技巧分享&amp;知识点总结）</p>
<p>[]: 【新规后科目一考试考点汇总】<a href="https://www.bilibili.com/video/BV1ET4y1k7dc?share_source=copy_web&amp;vd_source=a903512a82ff2959ba4cac987f40e02a">https://www.bilibili.com/video/BV1ET4y1k7dc?share_source=copy_web&amp;vd_source=a903512a82ff2959ba4cac987f40e02a</a></p>
<p>接着开始刷题（好像是两千多道吧），考前一晚再做几套模拟题。由于科目一的知识点比较细碎，准备时间又不充裕，所以最后做模拟题的时候开始分数在88左右，最后几遍在92上下，还是有较大的不过的风险的。但是没办法，硬着头皮上。</p>
<p>考科目一的时候记得前60题就错了8题，意味着后面40题最多只能错2题，所以做最后40题的时候基本手都是抖的。不过所幸最后40题全对，就这样科目一过了。</p>
<p>本来没考科目一就可以开始练车了，但是因为实习实训一直没有开始。差不多在20号左右，实训的项目已经做的差不多了，就联系教练开始练车。也就21晚上去学了一下方向盘和挂挡，后来教练就去沙县了，到24实训结束才开始正式练习科目二。</p>
<p>其实科目二挺简单的，我记得倒车入库第一天我就没有问题了，其他项目也很好学，但是教练估计是为了保险起见吧。我算了算，前后科目二练了15次，实际上我觉得学会科目二只需要不到5次，剩下的主要就是不断地练习了。约了8.12的考试。这期间队里要组织21号开始返校集训，我想着这个暑假把车学完再加上复习的压力，就没去集训。这时候驾考的压力来了，一方面是时间上的压力，要想暑假拿证不仅要自己学的快还要能及时约到考试、更重要的是一科都不能挂，只要挂了就只能寒假重来了；另一方面是金钱的压力，考科目二花了六百，考科目三花了一千，只能说驾校确实有点黑吧；还有就是驾校的练车体验实在不好，实在不想没有意义地去驾校重复练车。</p>
<p>科目二顶着压力也在第二把满分通过了。详细经历见帖子</p>
<p>[]: <a href="https://yangyy.top/2022/08/12/%E7%A7%91%E7%9B%AE%E4%BA%8C%E6%BB%A1%E5%88%86%E9%80%9A%E8%BF%87%E4%BA%86%E8%80%B6%EF%BC%81/">https://yangyy.top/2022/08/12/科目二满分通过了耶！/</a></p>
<p>科三的安排就是去沙县练两天（实际也就一天半），第三天直接考试。提前一天把灯光和路线背了、再把教学视频给看了，然后就开始练车。教练也觉得我开的好，每一轮都让我第一个开，让其他人看。记得第一把不熟悉，扣分项目比较多，第二把就满分了，后来基本回回满分，偶尔挂科。记得练了两天也就挂了三四把吧，同伴都觉得我厉害（后来三个人也只有我过了）。科三有机会再开个经验帖吧，过了太久不是太想记录了。考试等待过程很漫长，几乎是最后上车的。路线1起点1，很不错，其实1~3号线我都可以，起点1就很舒服了。就正常开，考试过程不算太紧张，靠边停车扣了10分，可以接受，只是当时不知道挂了没，所以最后一段开的很焦虑，听到“考试成绩合格，请回中心打印成绩单”才松了一口气。</p>
<p>考完科三其实就相当于领证了。本来约不到27之前的科目四，刚好驾校帮我争取到了24的名额。复习之余花了不到一天的时间准备，最后科四好像是96分通过。</p>
<p>回顾整个学车的历程，也算是坎坷较多，压力也挺大的。好在自己也算勤学苦练再加上应该算比较聪明吧😁，总体很顺利。7.13科目一，8.12科目二，8.20科目三，8.24科目四，8.25拿证。实际准备时间大概是科一一天半，科尔15天，科三两天，科四半天，加起来19天吧，算是很快的了，和我一起或者比我早学车的基本这个假期都没拿证。</p>
<p>其实我特别喜欢开车，拿到驾驶证就一直想开车上路。在走之前开了三趟姨姨家的车，感觉非常爽，希望后面还有机会多开车。😊</p>
]]></content>
      <categories>
        <category>生活经验</category>
      </categories>
      <tags>
        <tag>学车</tag>
      </tags>
  </entry>
  <entry>
    <title>在RecBole当中实现DAGFM模型</title>
    <url>/posts/2907034089.html</url>
    <content><![CDATA[<h4 id="前言-v4"><a class="header-anchor" href="#前言-v4">¶</a>前言</h4>
<p>如愿地、顺利地完成了上一阶段的任务（课内的诸多结课作业），终于可以全力做RecBole的科研任务了。</p>
<p>老师和师姐没有给我定ddl，说“大三事情也比较多，看自己安排就好”，但是尽快完成也能给老师留下好的印象，同时也可以早一点推进到后续的科研工作当中。</p>
<p>暂时给自己定下春节前完成模型开发的ddl，时间刚好一周左右。春节之后就要开始做校内的科研任务和准备美赛以及复习开学考了，到时候四线交织想必会是非常痛苦的一段日子（让我想到了上个暑假末尾同时学车+复习五门课程的艰难）。如果把DAGFM模型的开发留到那个时候，恐怕会非常焦虑和痛苦。所以一定要争取在年前把这个阶段性的任务完成，一个阶段做一个阶段的事情。</p>
<p>实现难度如何还是未知。看辅助开发人员列表，里面有三个月开发一个模型的，也有一个月开发三个模型的，恐怕还是看个人能力罢。我会用多久的时间呢，没有把握。按照这样算也就是十天左右。不过今天就回上海了，后续一个星期打算泡在上海图书馆，应该学习时间会蛮多的，其他事情我也不打算做。希望能快速攻克吧。</p>
<p>在1.13、文章的开头立下了flag，希望1.21时回来再看已经达到目标了吧。</p>
<p>前两天把DAGFM模型的论文读了一遍，应该算是看懂了。现在的规划就是先把作者用PyTorch实现的代码看懂，然后尝试用RecBole实现，再根据代码风格、注释规范等等进行修改，最后联系学姐尝试提交。</p>
<p>本帖应该会是本站当前战线最长的帖子，计划是把知识相关和自己的感受都记录下来，可能会比较冗杂。</p>
<p>那么，开始吧。</p>
<h4 id="源码阅读"><a class="header-anchor" href="#源码阅读">¶</a>源码阅读</h4>
<h5 id="先看最基础的DAGFM实现"><a class="header-anchor" href="#先看最基础的DAGFM实现">¶</a>先看最基础的DAGFM实现</h5>
<p><font color="orange">1/14 16:08 现在的情况是已经弄明白DAGFM模型和KD_DAGFM模型的源码实现了，接下来尝试在RecBole当中开发这个模型吧。感觉主要还是数据接口和配置什么的会比较麻烦。</font></p>
<p>现在非常痛苦的一点就是本机算力十分不足。</p>
<h4 id="阅读开发RecBole的handbook《伯乐开发手册》"><a class="header-anchor" href="#阅读开发RecBole的handbook《伯乐开发手册》">¶</a>阅读开发RecBole的handbook《伯乐开发手册》</h4>
<h5 id="开发环境的搭建："><a class="header-anchor" href="#开发环境的搭建：">¶</a>开发环境的搭建：</h5>
<p>依托Linux系统、使用Python开发、根据requirements.txt进行依赖库的安装，建议用conda虚拟环境。</p>
<h5 id="代码提交管理："><a class="header-anchor" href="#代码提交管理：">¶</a>代码提交管理：</h5>
<p>基于GitHub平台</p>
<h5 id="代码开发规范："><a class="header-anchor" href="#代码开发规范：">¶</a>代码开发规范：</h5>
<p>PEP8</p>
<p>（实际上后期好像有直接根据PEP8修整）</p>
<h5 id="开发流程："><a class="header-anchor" href="#开发流程：">¶</a>开发流程：</h5>
<h6 id="代码准备："><a class="header-anchor" href="#代码准备：">¶</a>代码准备：</h6>
<p>fork主仓库到自己的仓库，在自己的仓库上进行开发。</p>
<h6 id="代码文件header注释："><a class="header-anchor" href="#代码文件header注释：">¶</a>代码文件header注释：</h6>
<p><font color="red">到时候再看就行</font></p>
<h6 id="撰写注释："><a class="header-anchor" href="#撰写注释：">¶</a>撰写注释：</h6>
<p>一定要用英文注释</p>
<h6 id="代码检查："><a class="header-anchor" href="#代码检查：">¶</a>代码检查：</h6>
<ol>
<li>
<p>代码风格检查：</p>
<p>conda install yapf工具自动按照PEP8改变代码风格</p>
</li>
<li>
<p>代码正确性检查：</p>
<p>本地简单测试bash run_test.sh</p>
</li>
</ol>
<h6 id="代码提交："><a class="header-anchor" href="#代码提交：">¶</a>代码提交：</h6>
<p><font color="red">到时候再看</font></p>
<h5 id="模型开发："><a class="header-anchor" href="#模型开发：">¶</a>模型开发：</h5>
<h6 id="模型信息登记："><a class="header-anchor" href="#模型信息登记：">¶</a>模型信息登记：</h6>
<p><font color="red">等快完成了再登记吧</font></p>
<h6 id="模型开发：-v2"><a class="header-anchor" href="#模型开发：-v2">¶</a>模型开发：</h6>
<p>a.模型文件创建：</p>
<p>模型开发一般创建两个文件：</p>
<p>。。。。。。。。。手动分割线</p>
<p>1/14  17:52</p>
<p>感觉handbook看的差不多了，现在打算上手复现了</p>
<p>1/15  10:39</p>
<p>目前复现卡住了一个很难解决的点，其他教师模型的复现当中没有embedding_layer，但是知识蒸馏要求共享embedding_layer。</p>
<p>1/15  10:51</p>
<p>似乎有出路，虽然教师模型都没有定义，但是所有教师模型的父类ContextRecommander里面有统一的embedding方法，这应该是出路。</p>
<p>1/15  11:48</p>
<p>不知道是机遇还是问题的点出现了。本论文的教师模型选择的是xDeepFM和DCNV2，但是实际上教师模型都不是完整的模型，而是其中的部分模型CrossNet和CIN，这两个模型都是简单的特征交互模型，因此比较简单，我觉得可以直接在我自己的模型文件当中实现，这样的话也解决了embedding_layer的问题。</p>
<p>1/15  12:39</p>
<p>embedding_layer的问题还是没有解决，因为参考源码里面的embedding是自己实现的，但是到底需要不需要自己实现这么麻烦呢？能不能直接用nn.Embedding？目前还是未知的。</p>
<p>1/15  14:48</p>
<p>目前随着引入的模型增加，整体代码量增大，又没有办法实时debug，目前有些混乱，估计最后形成框架跑起来debug会很痛苦</p>
<p>1/15  14:57</p>
<p>总体框架完成了，现在感觉最大的问题是数据集接口。归根结底还是对伯乐框架不够熟悉。</p>
<p>1/15  15:38</p>
<p>感觉脑子里一团浆糊，但是似乎也无从改善</p>
<p>感觉眼前的主要问题就是数据接口和embedding_layer</p>
<p>这两个解决应该会差不多</p>
<p>1/15  18:00</p>
<p>论文源代码的运行似乎还是有问题，在GitHub上提交了issue不知道什么时候会回复。</p>
<p>其实train.py也是要认真看的，因为在源代码当中是模型和训练分离了，但是在recbole当中复现模型必须考虑train</p>
<p>1/15  18:35</p>
<p>对interaction的结构似乎更有了解了。</p>
<p>interaction实际上就是一次取了batch_size个项目进来。</p>
<p>而这个batch_size是可以作为超参数设置的。</p>
<p>现阶段主要需要攻克的目标也很明确了，就是把DAGFM模型源码当中一次一次的特征交互改成一批一批的特征交互。</p>
<p>1/16  10:22</p>
<p>现在有了些许进展，但是似乎还差点。</p>
<p>1/16  13:42</p>
<p>似乎有了不错的进展，但是目前遇到的问题是config不是简单的字典，config[“teacher”]这样可以取到对应的键值，但是没有办法进行遍历，修改教师的配置参数"t_"</p>
<p>1/16  19:00</p>
<p>前面的问题得到了解决，现在的问题是，为什么ml-100k数据集的特征只有7个而不是8个</p>
<p>1/16  19:48</p>
<p>遇到了比较严重的问题，之前写代码都是用python库里面的代码作为参考，但是似乎python库里面的代码和GitHub有出入</p>
<p>1/16  21:53</p>
<p>现在似乎整体稍微能跑起来，但是还是tensor的维度处理的不是很好。</p>
<p>现在需要处理的就是维度的问题，传入的是有batch_size的三维的数据，原本处理的是二维数据。</p>
<p>1/16  22:55</p>
<p>模型跑起来啦，教师模型的训练估计没什么太大的问题，后续就是完成学生模型的训练和细节的完善。然后就可以进行测试和交付啦！</p>
<p>阶段性的胜利，更新到博客上。</p>
<p>1/17  10:50</p>
<p>没有想象当中的顺利。教师模型CrossNet复现出来了，但是CIN和学生模型DAGFM都还有bug。整合之后还有save_info的问题。</p>
<p>1/17  11:08</p>
<p>当前就是三大问题</p>
<ul>
<li>CIN教师模型的bug，关于维度</li>
<li>DAGFM学生模型的bug，同样关于维度</li>
<li>加载教师模型的bug</li>
</ul>
<p>1/17  11:14</p>
<p>目前来看，CIN教师模型的bug被解决了</p>
<p>这意味着教师模型的完全胜利</p>
<p>接下来就主要是知识蒸馏的问题了</p>
<p>1/17  11:40</p>
<p>有的时候勇于发问真的能节省不少的时间，问到了所有的feature都是B * F * E大小的，瞬间解决了所有的维度问题，两个教师模型和一个学生模型都已经准备就绪了</p>
<p>现在唯一的问题就是如何进行训练&amp;知识蒸馏</p>
<p>我感觉年前应该可以做出来</p>
<p>1/17  12:10</p>
<p>现在已经把加载模型的问题给解决了</p>
<p>现在就是似乎知识蒸馏的代码那里还有一点问题</p>
<p>我想这两天也许能做出来</p>
<p>1/17  12:30</p>
<p>模型完完全全可以跑了，可以进行知识蒸馏了！</p>
<p>但是就是效果似乎没有理想的那么好。</p>
<p>我感觉这两天应该可以做出来。</p>
<p>知识蒸馏的效果似乎还没有普通的DAGFM强。</p>
<p>auc=0.51，真的就和随便猜差不多</p>
<p>知识蒸馏训练的AUC反而越来越低了，真服了。</p>
<p>现在就是对照着检查一下代码吧，看看是不是哪里出问题了</p>
<p>上午先到这里吧，下午开始查代码，争取今天把实验效果搞好，明天提交测试。</p>
<p>炼丹的事情就很难说了，呜呜呜。</p>
<p>1/17  15:56</p>
<p>检查了一遍完整代码，似乎没什么问题</p>
<p>1/17  17:11</p>
<p>目前模型没什么问题，效果也上来了，就是最后的超参数调整和模型测试了，估计明天可以提交</p>
<p>-------------------------------------手动分割线</p>
<p>1/20  16:39</p>
<p>不知不觉间有接近三天没有更新了。</p>
<p>项目的进展有了非常多的变化。唉，有很多想说的想写的，但是想法一齐喷涌上来，结果就堵住了，一下子不知道如何“落笔”。</p>
<p>为什么在1/17就断更了呢，因为在那之后就满心都是这个项目了，实在没有分出的心思记录。</p>
<p>我实在想写下很多东西，但因为思绪纷乱和最近几天的焦虑、压力和疲劳导致我的脑子运转不畅，就当是碎碎念吧，没有逻辑也不去梳理思路，想到什么就写下什么。</p>
<p>说说眼下的进展吧，目前看起来是做完了，KD_DAGFM模型在RecBole框架下能正常使用，不会产生冲突和影响框架的其他部分，也通过参数的调整在数据集上达到了论文当中描述的效果，基本的测试也没有问题。现在已经提交上去给学长review了。</p>
<p>但是我并不确定会不会有其他的错误，毕竟谁能保证自己写的代码不会出错呢，希望可用顺利结束开始下一阶段的任务吧，希望一切顺利。但是师兄师姐也需要放假嘛，所以不可能马上有检查的反馈。</p>
<p>再回顾回顾这几天为项目奋斗的日子。不能说难过，但是也不能说很开心。但是确实很累。</p>
<p>大概也就是回上海一周左右的时间吧。每天其实过的都一样，早上七点起床，洗漱收拾一下（不得不说我在这一环通常都需要花上三十分钟，相比大部分男生似乎都更“磨蹭”），出门买好早饭，就去健身房健身。一般换好衣服准备开始锻炼时都已经八点了。刚好一周的时间，肩、背、跑步、胸、腿、椭圆机、休息日轮了一遍。（身体适应了这个节奏，今天早晨在七点就自然醒了，不过因为是休息日，就多睡了一个小时。）健身之后坐地铁到图书馆，先吃买的早饭（包子、鸡蛋），那时基本已经冷了，不过我倒是不挑剔。吃完饭在二楼找个位子坐下开始学习。反正就搞项目呗。搞到一点左右点外卖，两点吃饭，两点半左右吃好。开头两天还会找个沙发睡个午觉，后来因为那样也没有睡得很好，再加上想早日把项目做完，因此就不睡午觉了。回到座位继续学习。当然学累了或者炼丹的时候会玩玩手机。学到快晚上八点，就收拾书包坐地铁回店里吃饭了。吃完饭和家里人聊一会天就回家。回到家基本已经很累了，如果是没有午睡的日子，晚上脑子里更是一坨浆糊，可能会做点简单的工作或者刷手机，然后晚上十一点半十二点睡觉。如此循环。其实这样的日子并不困难，但是多少有些令人疲倦。其实我想想，我在学校的时候都没有这样认真学习与工作。读大学已是第三年，寒暑假也已经是第五个了，这一次的假期是最充实的，也由此想到我前几个寒暑假的摆烂与虚度，完全没有好好利用，这也导致了前面被人拉开差距。不过生活总是向前的，倒也不觉得遗憾。</p>
<p>怎么发现自己似乎疲惫了呢？当然每天晚上回去的时候的疲惫是不必说的。主要最近食欲都下降好多，吃什么都不像以前那么香了。昨天和姐姐去逛街买衣服（实在没衣服穿了），照着镜子看着自己杂乱的头发，变小和无神的眼睛，一脸的油，才真正意识到自己累了。忙着连理发的心思都没有，一晃都大年二十九了，想理发也没处去，主要是人多我也不想排队。过完年正月一般又不能理发。只好再议。</p>
<p>先写到这里吧，准备回家吃饭了。</p>
<p>---------------------------------------------------------手动分割线</p>
<p>休息了一晚上再来码字头脑都清醒了不少。</p>
<p>项目的进展也回顾完了，最近这几天过的日子也回顾完了。目前还不能说我完全复现了KD_DAGFM模型，所以所谓“获奖感言”以后再说吧，半场开香槟的事情是万万做不得的。</p>
<p>这篇文章就写到这里吧，另外想说的话已经不符合这个主题了，待会再开一篇博客。</p>
]]></content>
      <categories>
        <category>科研</category>
      </categories>
      <tags>
        <tag>科研实习</tag>
        <tag>RecBole</tag>
        <tag>推荐算法</tag>
      </tags>
  </entry>
  <entry>
    <title>大三上第十二周组会回顾</title>
    <url>/posts/2942378457.html</url>
    <content><![CDATA[<h4 id="前言-v5"><a class="header-anchor" href="#前言-v5">¶</a>前言</h4>
<p>上上周的组会主要是确定了数据集的问题，老师安排了来自字节跳动和挑战赛的两份数据集。</p>
<p>学长让我处理挑战赛的数据集，学长本人处理字节跳动的数据集。</p>
<p>上周的组会的内容主要就是我们两人汇报自己的处理结果。</p>
<p>老师认为挑战赛的数据比较适合研究，再加上由于我知识有限，处理的不太到位，以及学长需要本人了解数据集的结构，所以上周学长再次处理了挑战赛的数据集，就没给我安排其他工作。</p>
<p>由于我自己处理，得出了对这份数据集一个初步的认知，今天组会学长和老师再根据这份数据集进行了讨论，让我有了更多的收获。</p>
<h4 id="正文-v3"><a class="header-anchor" href="#正文-v3">¶</a>正文</h4>
<p>数据集来源是一个集群，里面有node-1~node-6六个节点（物理机）。</p>
<p>我们需要研究的是部署在其上的服务（service），多个服务共同构成一个微服务架构。</p>
<p>实际上部署服务的节点主要是node-5和node-6。</p>
<p>不同的服务分散在这两个节点上（二者有共同的服务），并且每个service有三个实例（封装成container）。</p>
<p>服务之间有相对复杂的调用关系和拓扑结构。</p>
<p>因此各个服务的时间序列异常也许会有较强的关联。</p>
<p>每个service约有40+个指标（KPI）。</p>
<p>因此实际上会有成百上千个时间序列。</p>
<p>目标是在微服务的层次上进行多指标时间序列异常检测。</p>
<h4 id="总结-v2"><a class="header-anchor" href="#总结-v2">¶</a>总结</h4>
<p>实际上在上周处理AIOps挑战赛复赛数据集的时候就已经对此有一个大致的认知了，但是这个认知是模糊的。此前对于课题组的大致方向也不是很理解。</p>
<p>但是经过学长重新整理了一遍数据框架，以及听了学长和老师的讨论之后，不管是对数据集还是对研究方向都有了更深的认知。</p>
]]></content>
      <categories>
        <category>科研</category>
      </categories>
      <tags>
        <tag>异常检测</tag>
        <tag>组会</tag>
      </tags>
  </entry>
  <entry>
    <title>学习DCN模型</title>
    <url>/posts/465045716.html</url>
    <content><![CDATA[<h3 id="前言-v6"><a class="header-anchor" href="#前言-v6">¶</a>前言</h3>
<p>DCN模型由论文《Deep &amp; Cross Network for Ad Click Predictions》提出。本次对DCN模型的学习也就是对该论文的阅读。</p>
<h3 id="补充"><a class="header-anchor" href="#补充">¶</a>补充</h3>
<p>阅读论文到一半突然对这两篇关于DCN模型的论文有些开窍了。不管是DCN模型还是DCN-V2模型，他们都服务于广告点击率的预测，大致的任务也就是输入一则广告的相关信息（包含各类特征信息），我们的模型应该输出对于其点击率的预测。个人认为，这种任务和输入图像、输出分类结果没什么区别。所以其实一开始也就是采用DNN（深度神经网络）这种模型，只不过效果不算好，因此改进，加入交叉网络而已。</p>
<h3 id="论文阅读"><a class="header-anchor" href="#论文阅读">¶</a>论文阅读</h3>
<h4 id="简介-v2"><a class="header-anchor" href="#简介-v2">¶</a>简介</h4>
<p><strong>点击率（Click Through Rate，CTR）预测</strong>是一个大规模问题。</p>
<p>在广告业中，广告商向出版商付费，<strong>流行的支付模式是每次点击的成本</strong>。因此，出版商的收入很大程度依赖于准确预测CTR的能力。</p>
<p>**<font color="red">识别经常预测的特征同时探索少见的交叉特征</font>**是做出好的预测的关键。但是网络规模的推荐系统的数据大多是离散和分类的，导致特征空间大而稀疏。限制采用线性模型。</p>
<p>引入一种新的神经网络结构——交叉网络。该网络以自动的方式明确应用特征交叉。</p>
<p>联合训练交叉网络和深度神经网络。</p>
<h4 id="深度和交叉网络DCN"><a class="header-anchor" href="#深度和交叉网络DCN">¶</a>深度和交叉网络DCN</h4>
<p>在本节描述深度和交叉网络（DCN）模型的架构：从一个嵌入和堆叠层开始，然后是平行的交叉网络和深度网络，最后是组合层，将两个网格的输出结合起来。如下图所示：</p>
<img src="/posts/465045716/i1.png" alt="image" style="zoom: 40%;">
<h5 id="嵌入和堆积层（Embedding-and-Stacking-Layer）"><a class="header-anchor" href="#嵌入和堆积层（Embedding-and-Stacking-Layer）">¶</a>嵌入和堆积层（Embedding and Stacking Layer）</h5>
<p>考虑具有稀疏和密集特征的输入数据。<font color="red">输入的数据大多是分类特征</font>，例如“country=usa”，这样的特征也会变**<font color="red">编码为独热向量</font><strong>，如[0, 1, 0]，但是这样会</strong><font color="red">导致特征空间很高</font>**。</p>
<p>为了降低维度，采用一个**<font color="red">嵌入程序，将这些二进制特征转化为密集的实值向量（嵌入向量）</font>**。</p>
<p><img src="/posts/465045716/i2.png" alt="image"></p>
<p>其中Xembed,i是嵌入向量，xi是第i类的二进制输入，Wembed,i是相应的嵌入矩阵，<strong>嵌入矩阵会随其他参数一起被优化</strong>。</p>
<p>最后，嵌入向量于归一化的密集特征堆叠（stack）成一个向量x0。</p>
<p><img src="/posts/465045716/i3.png" alt="image"></p>
<h5 id="交叉网络"><a class="header-anchor" href="#交叉网络">¶</a>交叉网络</h5>
<p>交叉网络的关键思想是**<font color="red">以一种有效的方式应用显示的特征交叉</font>**。</p>
<p>交叉网络由交叉层组成，每层有以下公式：</p>
<p><img src="/posts/465045716/i4.png" alt="image"></p>
<p><img src="/posts/465045716/i5.png" alt="image"></p>
<p>交叉网络的参数数量少，限制了模型的容量，为了捕捉高度非线性的相互作用，引入一个并行的深度网络。</p>
<h5 id="深度网络"><a class="header-anchor" href="#深度网络">¶</a>深度网络</h5>
<p>深度网络的结构相比其他的深度神经网络的结构会更简单一些，是一个**<font color="red">全连接的前馈神经网络</font>**，每层有以下公式：</p>
<p><img src="/posts/465045716/i6.png" alt="image"></p>
<h5 id="组合层"><a class="header-anchor" href="#组合层">¶</a>组合层</h5>
<p>组合层将两个网络的输出连接起来，将串联的向量送人标准的logits层。</p>
<p>以下是一个二分类概率的公式：</p>
<p><img src="/posts/465045716/i7.png" alt="image"></p>
<p>其中XL1是交叉网络的输出，hL2是深度网络的输出（<strong><font color="red">二者转置之后串联起来成为一个向量</font></strong>），Wlogits是组合层的权重向量，<font color="red">相当于两个一维向量点积得到一个数</font>，仍然会输入σ(x)=1/(1+exp(-x))。</p>
<p>损失函数如下：</p>
<p><img src="/posts/465045716/i8.png" alt="image"></p>
<p>yi是真实标签，pi是计算出的概率。</p>
<p><strong><font color="red">但是为什么输出的是概率？不是应该是点击率吗？还是说点击率也按区间转化成了标签？</font></strong></p>
<h4 id="交叉网络的分析"><a class="header-anchor" href="#交叉网络的分析">¶</a>交叉网络的分析</h4>
<p>主要就是分析DCN当中，交叉网络的有效性。</p>
<p>这里暂时也不太看得懂。</p>
<h4 id="实验结果"><a class="header-anchor" href="#实验结果">¶</a>实验结果</h4>
<p>这一节主要是评估DCN的性能。</p>
<h5 id="Criteo数据集"><a class="header-anchor" href="#Criteo数据集">¶</a>Criteo数据集</h5>
<p>Criteo数据集是为了预测广告的点击率，有13个整数特征和26个分类特征，每个类别都有很高的cardinality。因此对于这个数据集而言，0.001的logloss都是很有意义的。</p>
<p>该数据集包含7天（约4100万条记录），使用前6天的数据用于训练，第七天的数据随机拆分为同等大小的验证集和测试集。</p>
<h5 id="实施细节"><a class="header-anchor" href="#实施细节">¶</a>实施细节</h5>
<p>官方的代码是用TensorFlow实现的。</p>
<h4 id="结语"><a class="header-anchor" href="#结语">¶</a>结语</h4>
<p>论文的大致阅读就到这里了，对于复现模型而言，性能测试和基线方法的比较可以暂时不谈，毕竟支撑的知识还是太少太少。接下来开始具体的复现这个DCN模型吧。</p>
<h3 id="复现DCN模型"><a class="header-anchor" href="#复现DCN模型">¶</a>复现DCN模型</h3>
<h4 id="学习他人的复现："><a class="header-anchor" href="#学习他人的复现：">¶</a>学习他人的复现：</h4>
]]></content>
      <categories>
        <category>科研</category>
      </categories>
      <tags>
        <tag>科研实习</tag>
        <tag>RecBole</tag>
      </tags>
  </entry>
  <entry>
    <title>学车技术总结</title>
    <url>/posts/2517433487.html</url>
    <content><![CDATA[<p>这篇博客记录的是我学车过程中对主要技术要点的记录和总结。主要目的有两方面，一是防止旅游之后几天不练车忘记了；另一方面也是可以记录下来，考试之前加以复习。</p>
<h2 id="科目二"><a class="header-anchor" href="#科目二">¶</a>科目二</h2>
<h3 id="一-控制车身的基本器件"><a class="header-anchor" href="#一-控制车身的基本器件">¶</a>一.控制车身的基本器件</h3>
<h4 id="1-方向盘"><a class="header-anchor" href="#1-方向盘">¶</a>1.方向盘</h4>
<p>（1）手握方向盘，大拇指不内扣。</p>
<p>（2）转动方向盘时，以半圈为单位，双手交叉替换。</p>
<p>（3）方向盘左右的极限都是一圈半（三个半圈）。</p>
<p>注：</p>
<ul>
<li>操纵方向盘一定手放松，手臂发力</li>
<li>教练有的时候会把半圈算成一圈</li>
<li>下面的技术总结以实际圈数为准</li>
</ul>
<h4 id="2-离合器、刹车、油门"><a class="header-anchor" href="#2-离合器、刹车、油门">¶</a>2.离合器、刹车、油门</h4>
<p>脚下总共三个踏板，从左到右是离合器、刹车、油门。通常左脚管离合器，右脚管刹车和油门。</p>
<p>（下面介绍一下我对这三个器件的理解）</p>
<p>（1）离合器：</p>
<p>离合器顾名思义就是分离的器件。当脚踩离合器时，齿轮之间分离，车失去了动力，靠惯性前进。</p>
<p>如果在平地上行驶，脚踩离合器之后齿轮分离，车失去动力，依靠惯性逐渐减速至停下（会产生一种脚踩离合器车逐渐停下，松开离合器，齿轮咬紧，车有动力，缓慢前进的感觉，好像刹车一样）。如果车在下坡，那么脚踩离合器就不会减速了，因为齿轮松开，失去车的制动，就靠轮子转动下坡，会越来越快，所以下坡要踩刹车减速。</p>
<p>在科目二的考试中（目前没学坡道定点停车和起步）车的行驶与停止主要依靠离合器控制。</p>
<p>离合器还有一个很重要的作用是用于挂挡。挂挡其实就是变速，原理就是变更齿轮。变更齿轮就需要先松开齿轮，所以一定要把离合器踩到底，否则强行变换齿轮会伤害汽车。</p>
<p>（2）刹车：</p>
<p>不多介绍。</p>
<p>（3）油门：</p>
<p>所谓”加油“就是脚踩油门，给车提供动力。需要注意的就是不同的档位有不同的车速范围，加油门的效果不一定一样。</p>
<h4 id="3-挡位"><a class="header-anchor" href="#3-挡位">¶</a>3.挡位</h4>
<p>挂挡就是变换挡位，变换速度。这部分的档位的名称以教练的俗称为准。1~4挡速度逐渐提高（通常不会跳跃式挂挡），倒挡对应倒车，空挡对应停车。</p>
<p>（1）空挡：</p>
<p>**档位最中间的就是空挡，代表没有动力，**以下变换档位的操作都以空档为基准，因为换挡一般都是先回到空挡再换，如有特殊，会加以强调。</p>
<p>（2）一挡：</p>
<p>空挡时，把手向左靠，向上推，进入一挡，准备起速。</p>
<p><img src="/posts/2517433487/1%E6%A1%A3.jpg" alt="i1"></p>
<p>（3）二挡：</p>
<p>空挡时，把手向左靠，向下推，进入二挡（<strong>好像一挡到二挡可以直接靠着左边从上到下拉，目前不确定</strong>）。</p>
<p><img src="/posts/2517433487/2%E6%A1%A3.jpg" alt="i1"></p>
<p>（4）三挡：</p>
<p>空挡时，把手向正上方推，进入三挡。</p>
<p><img src="/posts/2517433487/3%E6%A1%A3.jpg" alt="i1"></p>
<p>（5）四档：</p>
<p>空挡时，把手向正下方推，进入四挡。（通常在道路上稳定行驶时是四挡）</p>
<p><img src="/posts/2517433487/4%E6%A1%A3.jpg" alt="i1"></p>
<p><strong>注：三挡到四挡千万不能直接一步拉到底，要轻轻拉回到空挡，再轻拉到四挡。四挡到三挡同理。</strong></p>
<p>（6）倒挡（与一挡成为科目二最常用挡位）：</p>
<p>手提把手的一个滑扣，向左靠，向上推。（方向同一挡，只是加了上提动作）</p>
<p><img src="/posts/2517433487/1%E6%A1%A3.jpg" alt="i1"></p>
<h4 id="4-手刹："><a class="header-anchor" href="#4-手刹：">¶</a>4.手刹：</h4>
<p>手刹就是手动刹车，通常在停车的时候拉起（刹车），在开车的时候放下（松开）。</p>
<p>拉起手刹就直接上拉即可。</p>
<p>松开手刹需要先轻微上拉手刹，大拇指按住按钮，向下按手刹即可。</p>
<h4 id="5-安全带："><a class="header-anchor" href="#5-安全带：">¶</a>5.安全带：</h4>
<p>安全带没什么好说的，一定记住绑。</p>
<p><strong>唯一的要点就是，考试的时候为了确保通过，需要多拉一些安全带，再扣上。</strong></p>
<h4 id="6-熄火与点火："><a class="header-anchor" href="#6-熄火与点火：">¶</a>6.熄火与点火：</h4>
<p>（1）熄火：</p>
<p>在学车的过程很容易出现的问题就是行驶过程中熄火*（目前不知道会不会扣分，猜测会扣分）*。熄火的主要原因就是松离合器太急了，踩离合器一脚踩到底不会出问题，但是松离合器要慢慢松，到半联动点时车速平稳，如果太迅速地松开离合器就会熄火。</p>
<p>（2）点火：</p>
<p>既然有熄火就需要点火了。当然开车之前都需要点火。首先确保挡位是空挡，手刹拉好。把钥匙向前扭动即可。</p>
<h4 id="7-信号灯组合与雨刮器："><a class="header-anchor" href="#7-信号灯组合与雨刮器：">¶</a>7.信号灯组合与雨刮器：</h4>
<p><strong>左侧的器件控制信号灯，右侧的器件控制雨刮器。</strong></p>
<p>这部分不是太重要，记忆也有点模糊。</p>
<p>科目二最主要的就是打转向灯，有两个地方需要打转向灯：侧方停车出库的时候（左转，不用自己打回）；直角转弯（左转，需要自己及时打回）。<strong>信号灯向下打是左转向灯，向上打是右转向灯。</strong></p>
<p>远光灯、近光灯这些也是左侧器件完成，科目三会讲，留着。</p>
<p>右侧控制雨刮器，记不太清了，好像是越往下频率越高吧。</p>
<h4 id="8-调整车窗、后视镜、座位、靠背："><a class="header-anchor" href="#8-调整车窗、后视镜、座位、靠背：">¶</a>8.调整车窗、后视镜、座位、靠背：</h4>
<p>调整车窗和后视镜的按钮都在主驾驶座的车门上，怎么使用不需要赘述。</p>
<p>座位前后调整的开关在主驾驶座底下，拉起就可以调整前后，松开就咬合。</p>
<p>靠背角度调整的开关在主驾驶座的左下方，拉起就可以调整，松开就是咬合。</p>
<h3 id="二-倒车入库"><a class="header-anchor" href="#二-倒车入库">¶</a>二.倒车入库</h3>
<p>倒车入库的地标如下图所示</p>
<p><img src="/posts/2517433487/%E5%80%92%E8%BD%A6%E5%85%A5%E5%BA%93.png" alt="image"></p>
<h5 id="（1）第一阶段：自右向左倒车入库"><a class="header-anchor" href="#（1）第一阶段：自右向左倒车入库">¶</a>（1）第一阶段：自右向左倒车入库</h5>
<p>1.车的起始位置为前轮超过L1线（方向盘对准L1线）最好垂直L1线，需要注意后轮不能过线。</p>
<p>2.离合器踩到底，挂倒挡，逐渐松开离合器开始缓慢倒车。</p>
<p>3.一旦肩膀对齐肩膀线，方向盘迅速向右打死，开始看右侧后视镜。（这一步可以早一点，早打死可以补救，迟打死就救不了了）</p>
<p>4.在倒车过程中观察车尾与L2所在出库角的距离，到达30cm时（考试时候会有虚线，大约1.5条虚线的位置），若此时车可以顺利进入车库则不用动；若车身进不去车库（可能因为肩膀线早打了），方向盘回正一整圈，继续倒车。</p>
<p>5.一旦车身可以进入车库，看左侧后视镜，看到左下角的库角时，回正方向盘。</p>
<p>6.此时基本进入车库，接着在倒车过程中把车开直即可。一个要点：想要车向哪个方向走，就往哪个方向打方向盘。</p>
<p>7.最后把车后轮压在停车点所在的线上即可。</p>
<h5 id="（2）第二阶段：自右向左出库"><a class="header-anchor" href="#（2）第二阶段：自右向左出库">¶</a>（2）第二阶段：自右向左出库</h5>
<p>1.脚踩离合器到底，挂一挡，松离合器，启动汽车，观察左后视镜。</p>
<p>2.一旦后轮到达出库点，迅速向左打死。</p>
<p>3.关注车门与L3的夹角，一旦二者平行，向右回正半圈。</p>
<p>4.继续前进，直到方向盘到L4，停车。</p>
<h5 id="（3）第三阶段：自左向右倒车入库"><a class="header-anchor" href="#（3）第三阶段：自左向右倒车入库">¶</a>（3）第三阶段：自左向右倒车入库</h5>
<p>1.脚踩离合器到底，挂倒挡，松离合器，倒车。</p>
<p>2.一旦车门与L3平行，向左打死方向盘。（这一步可以早一点，后面可以修，迟了就难）</p>
<p>3.关注左后视镜，同样观察车尾与库角的距离，30cm时判断要不要回正（这一次倒库可能不需要回正）。</p>
<p>4.判断可以进入之后向左打死，直到左侧进库。</p>
<p>5.在车身与车库侧边将要平行时，回正方向盘。</p>
<p>6.边倒车边修方向，最后停在停车点。</p>
<h5 id="（4）第四阶段：自左向右出库"><a class="header-anchor" href="#（4）第四阶段：自左向右出库">¶</a>（4）第四阶段：自左向右出库</h5>
<p>1.脚踩离合器到底，挂一档，松离合器，前进。</p>
<p>2.观察左侧后视镜，一旦后车轮到达出库点，迅速向右打死方向盘。</p>
<p>3.看车头，判断车身快要摆正时，回正方向盘，继续前进。</p>
<p>4.当方向盘过L1时停车，手刹，空挡。</p>
<h3 id="三-直角转弯"><a class="header-anchor" href="#三-直角转弯">¶</a>三.直角转弯</h3>
<p>1.直角转弯之前，需要通过调整方向盘，使得车行驶在路中间。</p>
<p>tips：人在路中间，车就在路中间or左脚踩在路中间</p>
<p>2.提前打左转向灯。</p>
<p>3.在左侧车门锁扣将要对上转弯点的时候（这个点自己琢磨），向左打死方向盘。</p>
<p>4.转弯到一半，记住拨回转向灯。</p>
<p>5.左侧后视镜可以看是不是压倒转弯点。</p>
<p>6.回正方向盘。</p>
<h3 id="四-曲线行驶"><a class="header-anchor" href="#四-曲线行驶">¶</a>四.曲线行驶</h3>
<p>曲线行驶过程主要有两个参照，均为雨刮器上的点，这里先口头阐述，有机会补上图片。</p>
<p>第一个参照称之为点，是雨刮器自左开始数第一个点。第二个参照成为突起，是雨刮器第二个突起。</p>
<p>曲线行驶的路线图如下所示。</p>
<p><img src="/posts/2517433487/%E6%9B%B2%E7%BA%BF%E8%A1%8C%E9%A9%B6.jpg" alt="image"></p>
<p>1.正式进入车道内之前，需要把点调整到两线中间。</p>
<p>2.直线行驶，当点碰到右侧转弯线，左转方向盘一圈。</p>
<p>3.接着让右侧转弯线始终保持在车窗左下角，需要向左推1/4圈方向盘，通过左后视镜观察与左线的距离。</p>
<p>4.一旦点到达两线中间，回正方向盘。</p>
<p>5.当突起碰上左转弯线，右转方向盘一圈。</p>
<p>6.行驶一小会，让左侧转弯线始终在车窗右下角，需要向右推1/4方向盘，通过右后视镜观察与右线的距离。</p>
<p>7.快要离开车道时，回正方向盘。</p>
<h3 id="五-侧方停车"><a class="header-anchor" href="#五-侧方停车">¶</a>五.侧方停车</h3>
<p>侧方停车的地标如下图所示</p>
<img src="/posts/2517433487/侧方停车.png" alt="image" style="zoom:50%;">
<h5 id="（1）入库"><a class="header-anchor" href="#（1）入库">¶</a>（1）入库</h5>
<p>1.在侧方车库的左侧直行道上，把车调整到路中间（左脚踩中间）。</p>
<p>2.关注右后视镜，当右后车轮驶过左上角库角一小段，踩离合器，刹车。</p>
<p>3.脚踩离合器，挂倒挡，松离合器，倒车。</p>
<p>4.关注右后视镜，一旦右后车轮到达左上角库角，方向盘向右打死。</p>
<p>5.看左后视镜（这时候车速一定不能快），一旦看到右下库角，方向盘回正，再向左打半圈。</p>
<p>6.一旦左侧车轮压到虚线，向左打死（如果前面库角看的很多，需要早打死）。</p>
<p>7.最后看到左侧车轮与虚线比平行更窄一些即可。</p>
<h5 id="（2）出库"><a class="header-anchor" href="#（2）出库">¶</a>（2）出库</h5>
<p>1.打左转向灯，脚踩离合器，挂一挡，松离合器，前进。</p>
<p>2.一旦雨刮器的点到达左侧车道线，迅速回正方向盘并向右打一圈，这里也要控制车速。</p>
<p>3.车身快正时，回正方向盘，最后把车调到路中间。</p>
<h3 id="六-坡道定点停车与起步"><a class="header-anchor" href="#六-坡道定点停车与起步">¶</a>六.坡道定点停车与起步</h3>
<p>坡道定点停车与起步地标如图所示</p>
<p><img src="/posts/2517433487/%E5%9D%A1%E9%81%93.png" alt="image"></p>
<p>上方一条车道，左右两个坡道都能去。</p>
<p>下方两条车道，只能去左侧坡道。</p>
<h5 id="（1）坡道定点停车"><a class="header-anchor" href="#（1）坡道定点停车">¶</a>（1）坡道定点停车</h5>
<p>1.上方车道正常驶入坡道即可，下方车道在左转之前先向右拉一点。</p>
<p>2.进入坡道之前一定要完全松开离合器，否则上不了坡。</p>
<p>3.进入坡道，左右调整，使得雨刮器的点沿着图中点线行驶。</p>
<p>4.当视线中看不到三条线时，开始踩离合器，一旦旗杆达到右侧车窗下侧1/4位置，踩刹车。</p>
<p>5.拉紧手刹。</p>
<h5 id="（2）坡道定点起步"><a class="header-anchor" href="#（2）坡道定点起步">¶</a>（2）坡道定点起步</h5>
<p>1.脚踩离合器到底，踩油门到底。</p>
<p>2.逐渐松离合器，使得转速到底1.5以下一点。</p>
<p>3.拉起手刹，下放到底，车启动。</p>
<p>4.车行驶稳当之后，松开离合器。上完坡松开油门。</p>
<h3 id="七-科目二本人易错点"><a class="header-anchor" href="#七-科目二本人易错点">¶</a>七.科目二本人易错点</h3>
<p>反思本人在科目二当中容易错的地方如下：</p>
<ul>
<li>倒车入库出库速度容易快，导致车头容易压前面的线——解决办法控制车速</li>
<li>直角转弯打方向盘的点判断不准，有时候会压转弯点——解决办法多琢磨</li>
<li>曲线行驶把握不好回正方向盘的点</li>
<li><strong>坡道定点停车踩离合器和刹车的时机把握很差</strong></li>
</ul>
]]></content>
      <categories>
        <category>生活经验</category>
      </categories>
      <tags>
        <tag>学车</tag>
      </tags>
  </entry>
  <entry>
    <title>回顾在RecBole复现模型的这段经历</title>
    <url>/posts/1979743824.html</url>
    <content><![CDATA[<p>在RecBole当中复现KD_DAGFM模型是科研实习的第一份正式工作。想来也算是比较的曲折。</p>
<p>在工作的初期我对于PyTorch、RecBole、推荐系统可谓是一无所知。</p>
<p>最开始老师问我，会PyTorch吗？我说不会，但是我可以学。于是老师让我学完告诉他。</p>
<p>记得那天是周五，我就花了一个周末的时间在b站恶补了PyTorch，然后告诉了老师。</p>
<p>接着老师让我了解RecBole，熟悉的差不多了可以在这上面复现一篇模型。（其实老师的意思应该是我先了解、熟悉RecBole，好了再联系他，然后开始复现模型。我理解成我自己熟悉RecBole，然后自己找模型进行复现，检验自己的学习效果。然后当时还纠结这个复现的要求是什么样的）当时对RecBole也是一无所知。那段时间因为考虑到后面要完成结课作业，也是尽量给自己设ddl（老师完全没提ddl）。于是自己就开始看伯乐的官方主页、官方文档以及一些相关的帖子，感觉差不多了找了一个已经实现的DCN模型进行模仿复现。然后应该是花了一段时间，可能一周左右吧。去找老师说复现了模型。老师还蛮惊讶的，问我提pr了吗。后来老师可能意识到我理解错了，于是就给我推了一个师姐，让她给我分配具体的工作。于是和师姐聊了一下之后，给我分配了KD_DAGFM的复现工作。</p>
<p>后来要赶着把课内几门课的大作业都做一下，所以就暂时搁置了复现工作。大概花了两周的时间完成课内的结课任务，又碰巧需要回将乐一周，所以中间算是耽误了三周时间。回到上海已是1.13，距离过年一周左右的时间。</p>
<p>就算是除夕前做完，都算花了一个月。况且除夕前我也没有把握做完。当时想的是必须争取除夕前完成任务，毕竟年后还有复习开学考等其他的工作，堆到年后势必非常焦虑、难受。</p>
<p>虽然说回到上海已经1.13了，但是在将乐我还是挤出时间把KD_DAGFM模型的论文读懂了（这里也感慨学长写的真的非常好，论文读起来深感思路奇妙，而且具体的细节也是属于讲的通俗易懂的）。也就是说这一周的时间就是全力复现了。</p>
<p>具体细节就不再赘述了，帖子<a href="http://yangyy.top/posts/2907034089.html">在RecBole当中实现DAGFM模型 | Yangyy’s Life</a>记录了我的复现过程和当时的心路历程。</p>
<p>大体上应该是：先看了论文，弄懂KD_DAGFM模型；看KD_DAGFM模型的源代码，尽量弄懂代码细节；看RecBole开发的handbook，弄清楚要求；开始在RecBole框架下复现。</p>
<p>总体还是蛮曲折的。也费了很大的力气让模型跑了起来。</p>
<p>实际上需要考虑以下方面的问题：</p>
<ol>
<li>是否会引起整个框架的冲突（大忌）？</li>
<li>能否在现有框架下顺利运行？</li>
<li>是否在多个数据集上达到了与论文描述相当的效果？</li>
<li>能否顺利进行超参数搜索？</li>
<li>能否通过CI测试？</li>
<li>代码风格是否符合规范？</li>
</ol>
<p>因为添加的文件比较的少，没有动其他地方，所以问题1不太担心。</p>
<p>当时也是可以在框架下顺利运行的。</p>
<p>但是效果并不甚理想、超参数搜索也有隐患、CI测试也跑不完。主要是这三方面问题。</p>
<p>其实想想当时是非常心酸的。因为校内的服务器没有校园网不能用，实习那边不方便给我服务器。我自己也没有可用的计算资源。就是靠自己的CPU跑啊。CPU跑深度学习模型啊。记得当时超参数搜索跑了一晚上都没有进展。</p>
<p>不过也是我自己消息闭塞，后来和朱子林聊天，他告诉了我AutoDL这个平台，真正让我工作进度推进速度快了不少。GPU一小时0.88，我是完全可用接受的。前后大概花了20元左右吧，完全是可用接受的。</p>
<p>当时在CI模型测试没完成，大数据集跑不完所以效果未知，超参数搜索存在隐患的情况下（都没和师姐说），师姐让我先提pr放上去，我只好硬着头皮提了pr。所幸当时学长没空给我review。</p>
<p>有了GPU之后我就可以很高效地炼丹了。修改了CrossNet模型部分。然后整体通过调参达到了论文描述的效果。但是超参数设置和学长大不相同。（因为实际上有一处细节错误），但是能达到论文效果我相对有了不少信信心。</p>
<p>利用RecBole的官方CI测试我也得知模型可以顺利通过CI测试。</p>
<p>于是担心就变成了：对玄学的效果相当的担心；对超参数搜索隐患的担心。也就这样先交了。等待学长的review。</p>
<p>等学长忙完给我review大概过了半个月。所以即使我基本完成了这项工作，我内心的石头也没有彻底放下，内心还是不安。也不敢在自己的博客上发表自己完成任务的感言。但是也算是一个阶段的结束吧，就开始忙其他的了。</p>
<p>昨天（2/4）我终于和老师沟通上了，也请学长帮忙review我的代码。当时真是抱着忐忑的心等待学长的检查。不过学长真的非常nice，态度非常温柔，也让我放松不少。学长说我写的非常好，也让我更安心些。当时在等待期间想通了超参数搜索的隐患问题（见博客<a href="http://yangyy.top/posts/1310382946.html">对在RecBole当中复现KD_DAGFM模型的超参数搜索环节的思考 | Yangyy’s Life</a>），也就是其实没有问题。</p>
<p>那么就只剩下玄学的效果的问题了。确实玄学的达成效果没有用。但是学长还是帮我发现了问题。就是embedding_layer没有冻结。不过其实我自己还真不知道应该怎么冻结，学长教了我加上一行代码解决了这个问题。</p>
<p>最终、最终！把玄学的效果问题也解决了。那么目前来看似乎没什么问题了。果然是这样，学长说没有其他问题了让我提pr！</p>
<p>在昨天晚上十一点左右时收到GitHub的邮件，看到了让我十分十分开心的"mergerd"字眼，我当时真是过于开心。因为小刘正在和我视频，她录下了我的反应，真是十分有意义的记录。</p>
<p>也许对于技术大佬来说，这不值一提，但是对我个人而言，真是有莫大的成就感。其实我在做之前，我是毫无把握的，至少对于在春节之前做完毫无把握。</p>
<p><img src="/posts/1979743824/i1.png" alt="说说"></p>
<p>这是在1.15心怀焦虑不安地在博客记录了自己的心情。</p>
<p>一件毫无把握的事，但是却又是我必须要完成的事，我此前很少面对这样的事情。但是我最终通过努力实现了。（我不以努力、勤奋标榜自己，在大部分情况下，我不认为自己是一个勤奋、努力、拼搏的人，我想我还不配，但是对于过去的这段日子，我觉得自己努力了、奋斗了）</p>
<p>这也告诉我，虽然很多东西是注定无法达到的。但是努力可以让我拿到更多的东西。</p>
<p>当然任务的顺利完成，我不觉得均源于我自己。我十分感谢自己的幸运。首先老师和师姐没有给我定ddl，甚至师姐还劝我别急，慢慢做；其次我感觉分配给我的模型KD_DAGFM模型是老师实验室的学长的作品，其源码实现基于PyTorch，风格我想也和RecBole接近（毕竟学长也是RecBole的主要开发者），这对我的复现有很大的帮助，如果源码是用TensorFlow实现，自然就没有PyTorch这么顺利；如果是国外作者写的，自然也更难迁移到RecBole上；学长是作者还有巨大的优势便是，当我出现了上述的问题时，学长能较为轻松的帮我纠正；同时学长本人还非常nice，在赶论文期间，我邮件问他问题他都非常耐心地解答了；甚至学长还用了“辛苦了”、“感谢我的贡献”等词汇，我真是非常非常感激。</p>
<p>伯乐工作已经告一段落啦。我很幸运，我真的非常感谢这份幸运。我也非常感谢帮助我的人。希望自己能继续努力。继续前进！</p>
]]></content>
      <categories>
        <category>科研</category>
      </categories>
      <tags>
        <tag>科研实习</tag>
        <tag>RecBole</tag>
        <tag>推荐算法</tag>
      </tags>
  </entry>
  <entry>
    <title>好久没做这样精彩的梦了</title>
    <url>/posts/2288749829.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="fb6c5d63cdac6fcf1b8347bc23b5aa1a314e6f1867f0189fcb1b4527d8e58b06"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入密码，查看文章。</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活的点点滴滴</category>
      </categories>
      <tags>
        <tag>梦</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在hexo的文章中插入图片</title>
    <url>/posts/1251656306.html</url>
    <content><![CDATA[<p>一开始想的很简单，直接获取图片，然后paste到Typora上，在本地编辑的时候确实看着没问题。他的实际思路就是，把图片存储在C盘上Typora的数据文件夹中，然后可以本地读取到图片。</p>
<p>但是<code>hexo g</code>之后，在本地服务器上看，图片都显示不出来。</p>
<p>其实也挺正常的，博客在本地服务器的范围也就是yangyy这个文件夹，超出的范围是探索不到的，更不用说部署到云端了，更看不到了。</p>
<p>还是CSDN解决之，总结一下吧。</p>
<p>1.安装插件</p>
<p><code>$ npm install hexo-asset-image --save </code></p>
<p>2.更改站点配置文件（false改成true）</p>
<p><code>post_asset_folder: true</code></p>
<p><strong>这时候理论上就准备完成了</strong></p>
<p>3.hexo new ”example“</p>
<p>这时候就会在source/_posts文件夹下面产生对应的文章和对应的文件夹，把图片（比如image1.jpg）放到文件夹里面。</p>
<p>在文章中引用的格式：</p>
<p><code>![图片描述](./example/image1.jpg)</code></p>
<p>理论上这样就可以了，因为图片现在也在博客能检索到的范围之内了，但是试了一下还是不行。</p>
<p>4.打开/node_modules/hexo-asset-image/index.js，将内容更换为下面的代码</p>
<p>(不用仔细看代码，直接改就行)</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPosition</span>(<span class="params">str, m, i</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> str.split(m, i).join(m).length;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> version = <span class="built_in">String</span>(hexo.version).split(<span class="string">'.'</span>);</span><br><span class="line">hexo.extend.filter.register(<span class="string">'after_post_render'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>{</span><br><span class="line">  <span class="keyword">var</span> config = hexo.config;</span><br><span class="line">  <span class="keyword">if</span>(config.post_asset_folder){</span><br><span class="line">    	<span class="keyword">var</span> link = data.permalink;</span><br><span class="line">	<span class="keyword">if</span>(version.length &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">Number</span>(version[<span class="number">0</span>]) == <span class="number">3</span>)</span><br><span class="line">	   <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">'/'</span>, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	   <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">'/'</span>, <span class="number">3</span>) + <span class="number">1</span>;</span><br><span class="line">	<span class="comment">// In hexo 3.1.1, the permalink of "about" page is like ".../about/index.html".</span></span><br><span class="line">	<span class="keyword">var</span> endPos = link.lastIndexOf(<span class="string">'/'</span>) + <span class="number">1</span>;</span><br><span class="line">    link = link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> toprocess = [<span class="string">'excerpt'</span>, <span class="string">'more'</span>, <span class="string">'content'</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; toprocess.length; i++){</span><br><span class="line">      <span class="keyword">var</span> key = toprocess[i];</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">var</span> $ = cheerio.load(data[key], {</span><br><span class="line">        <span class="attr">ignoreWhitespace</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">xmlMode</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">lowerCaseTags</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">decodeEntities</span>: <span class="literal">false</span></span><br><span class="line">      });</span><br><span class="line"></span><br><span class="line">      $(<span class="string">'img'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">		<span class="keyword">if</span> ($(<span class="built_in">this</span>).attr(<span class="string">'src'</span>)){</span><br><span class="line">			<span class="comment">// For windows style path, we replace '\' to '/'.</span></span><br><span class="line">			<span class="keyword">var</span> src = $(<span class="built_in">this</span>).attr(<span class="string">'src'</span>).replace(<span class="string">'\\'</span>, <span class="string">'/'</span>);</span><br><span class="line">			<span class="keyword">if</span>(!<span class="regexp">/http[s]*.*|\/\/.*/</span>.test(src) &amp;&amp;</span><br><span class="line">			   !<span class="regexp">/^\s*\//</span>.test(src)) {</span><br><span class="line">			  <span class="comment">// For "about" page, the first part of "src" can't be removed.</span></span><br><span class="line">			  <span class="comment">// In addition, to support multi-level local directory.</span></span><br><span class="line">			  <span class="keyword">var</span> linkArray = link.split(<span class="string">'/'</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>{</span><br><span class="line">				<span class="keyword">return</span> elem != <span class="string">''</span>;</span><br><span class="line">			  });</span><br><span class="line">			  <span class="keyword">var</span> srcArray = src.split(<span class="string">'/'</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>{</span><br><span class="line">				<span class="keyword">return</span> elem != <span class="string">''</span> &amp;&amp; elem != <span class="string">'.'</span>;</span><br><span class="line">			  });</span><br><span class="line">			  <span class="keyword">if</span>(srcArray.length &gt; <span class="number">1</span>)</span><br><span class="line">				srcArray.shift();</span><br><span class="line">			  src = srcArray.join(<span class="string">'/'</span>);</span><br><span class="line">			  $(<span class="built_in">this</span>).attr(<span class="string">'src'</span>, config.root + link + src);</span><br><span class="line">			  <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">"update link as:--&gt;"</span>+config.root + link + src);</span><br><span class="line">			}</span><br><span class="line">		}<span class="keyword">else</span>{</span><br><span class="line">			<span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">"no src attr, skipped..."</span>);</span><br><span class="line">			<span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info($(<span class="built_in">this</span>));</span><br><span class="line">		}</span><br><span class="line">      });</span><br><span class="line">      data[key] = $.html();</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p>这样就没问题了，最终能在博客上显示图片。<strong>看看效果叭</strong>。</p>
<p><img src="/posts/1251656306/example.png" alt="image"></p>
<p>以上。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>对在RecBole当中复现KD_DAGFM模型的超参数搜索环节的思考</title>
    <url>/posts/1310382946.html</url>
    <content><![CDATA[<h4 id="前言-v8"><a class="header-anchor" href="#前言-v8">¶</a>前言</h4>
<p>这篇文章主要是记录我对题述知识点的理解。但是我写博客习惯于讲清来龙去脉，就算是知识点，我也想顺便记录下产生知识点的背景。</p>
<p>科研实习的第一个任务就是在RecBole当中复现论文《Directed Acyclic Graph Factorization Machines for CTR Prediction via Knowledge Distillation》当中提出的KD_DAGFM模型。大抵在1.20日我完成了模型的复现，提交给学长review。其实当时有预训练过程的模型进行超参数搜索这一块是有隐患的（正文详细描述），但是也只是隐患。我参考了相似模型的实现，发现似乎他们也都没有解决这个隐患。所以我想先给学长review，如果会有问题再说。所以我实际上1.20做完了这项工作，但是我一直非常担心自己的复现有很大的问题，所以一直没敢有任务完成松一口气的动作。在2.4学长帮我review code之后，在review的过程中，我自己再次思考了题述的问题，应该是达到了正确的理解，所以解决了这一隐患。</p>
<p>这篇博客主要就是阐述这个理解。</p>
<h4 id="正文-v5"><a class="header-anchor" href="#正文-v5">¶</a>正文</h4>
<h5 id="预训练："><a class="header-anchor" href="#预训练：">¶</a>预训练：</h5>
<p>我们都知道，深度学习的许多模型都有<strong>预训练</strong>这一过程以达到更好的实验效果。在预训练之后，我们通常会在预训练的基础上训练模型，使模型表现得更好。因此有预训练的模型在训练阶段，通常需要设置参数pretrain_path这一参数，代表存储预训练得到的模型参数的文件路径。</p>
<p>KD_DAGFM模型中同样有类似预训练的过程。该模型的训练分为三个阶段：teacher_training、distillation、finetuning。首先teacher_training阶段训练得到教师模型的参数设置；distillation阶段，加载训练好的教师模型参数，通过教师模型进行知识蒸馏，训练学生模型DAGFM；finetuning阶段，加载训练好的学生模型参数，进行微调，达到DAGFM模型最好的效果。</p>
<p>因此，distillation阶段，我们就需要设置warm_up参数为teacher_training阶段存储模型参数的文件路径；在finetuning阶段，我们就要设置warm_up参数为distillation阶段存储模型参数的文件路径。</p>
<p>这看起来似乎没什么问题。</p>
<h5 id="超参数搜索："><a class="header-anchor" href="#超参数搜索：">¶</a>超参数搜索：</h5>
<p><strong>超参数搜索</strong>同样是AI领域非常常见的概念。batch_size、embedding_size、learning_rate等模型超参数会非常大程度的影响模型的性能。因此，为了充分发挥模型的潜力，我们需要寻找最佳的超参数设置。如果人为的根据模型训练效果逐个修改超参数进行比较选取，比较浪费时间和精力，也就是所谓的炼丹。</p>
<p>超参数搜索，就是我们提前设定好一系列的超参数及其选择范围，程序会自己去尝试这些超参数的匹配并报告效果。</p>
<p>这样看似乎也没什么问题。</p>
<h5 id="有预训练过程模型的超参数搜索："><a class="header-anchor" href="#有预训练过程模型的超参数搜索：">¶</a>有预训练过程模型的超参数搜索：</h5>
<p>当这两个概念放到一起，似乎就会引发问题了。我们针对KD_DAGFM模型进行讨论。</p>
<p>首先在teacher_training阶段，进行embedding_size、learning_rate的超参数搜索不会产生问题。比如按照(embedding_size, learning_rate)=(10, 0.001)、(10, 0.005)、(10, 0.0001)、(16, 0.001)…的搭配进行模型训练效果的对比，这样没什么问题。</p>
<p>再看distillation阶段。前文已述，distillation阶段需要设置warm_up为teacher_training所得模型的存储位置，比如我们设置为./saved/xxx.pth，假设该模型的embedding_size=16。</p>
<p>接下来我们就要对distillation阶段进行超参数搜索了，要对embedding_size、learning_rate、α、β等进行搜索。<strong>这时候程序就会报错了</strong>。因为超参数搜索程序每一次跑模型使用的warm_up参数都是同一个路径，也就是说在distillation阶段进行embedding_size=8、10、16等尝试时，我们导入的模型却始终都是embedding_size=16，那么显然就会冲突了。</p>
<p>当时想的解决方案是：</p>
<p>既然不同的embedding_size要对应不同的warm_up，那么超参数搜索程序就要能根据不同的embedding_size来设置warm_up。这想想都让我望而却步。首先伯乐是一个有80+个模型的项目，我不认为我应该改动它统一的超参数搜索程序。其次，就算能让我自己写，我又要怎么写呢。伯乐存储模型也是统一的程序，根据模型、日期、时间进行存储文件命名。我又如何根据这些信息搜索指定embedding_size的模型文件呢？那我还要改模型存储的部分。牵一发而动全身，当时距离我自己给自己定的ddl也不远了，我实在没有精力和勇气去做这样一件事。</p>
<p>所幸，teacher_training阶段是模型训练的第一步，也是参数文件默认的训练阶段，所以项目进行CI测试就算会测试超参数搜索，也是进行teacher_training的超参数搜索，所以并不会出现问题。</p>
<p>我当时也参考了RecBole当中其他有预训练过程的模型复现，他们似乎都没有解决这一问题。</p>
<p>当时的理解是，可能只需要把预训练/teacher_training阶段的超参数搜索好就行（实际当然不是这样了）。当时只好硬着头皮先交了，想着也许确实不需要解决这个问题。所以虽然算是做完了，当时内心还是十分忐忑的。</p>
<h5 id="最终的解决方案："><a class="header-anchor" href="#最终的解决方案：">¶</a>最终的解决方案：</h5>
<p>在昨天（也就是2/4），学长忙完之后帮我review code。我当时想着描述清楚这个问题，然后问学长，在思考怎么把问题描述清楚的时候，我突然想到了这个问题的解决方案（我个人的拙见）。</p>
<p>首先，teacher_training阶段没有问题，正常超参数搜索就好了。</p>
<p>主要就是要解决distillation和finetuning的超参数搜索。实际上会起冲突的就是embedding_size。实际上embedding_size不是一个需要重复进行超参数搜索的参数。不管是teacher_training还是pretraining，它们都会预先找到性能最好的embedding_size，然后distillation或者training就会在此基础上进行调整。所以teacher_training找好了最佳embedding_size之后，后续阶段不必再搜索。如果实在要搜索也可以，但是应该不用自动超参数搜索了。</p>
<p>而对于真正影响知识蒸馏或者训练效果的learning_rate、α、β，我们是单独进行搜索的。也就是确定了embedding_size之后，那么我们学习的最佳教师模型的路径也是确定的（也就是warm_up）不用变。根据固定的教师模型，修改超参数，提高知识蒸馏的效果。finetuning过程同样也是这样。</p>
<p>所以根据这个思路，并不需要改动项目的超参数搜索程序，也不需要改变模型的存储过程。只需要使用模型的人稍加注意就行。</p>
<h5 id="结果"><a class="header-anchor" href="#结果">¶</a>结果</h5>
<p>最后当然也没有问学长这个问题，而review code虽然出现了另一个问题（很顺利解决），也没有再出现别的问题。</p>
<p>这个知识点还是非常值得记录的，所以有了这篇博客。</p>
<p>我也深感自己的幸运和误打误撞，我自己都不觉得review会这么顺利。学长还夸我写的非常好。真的是非常开心的。</p>
<p>接下来应该还会写一篇博客回忆、记录我这段过程的经历和心路历程。</p>
]]></content>
      <categories>
        <category>科研</category>
      </categories>
      <tags>
        <tag>科研实习</tag>
        <tag>RecBole</tag>
        <tag>推荐算法</tag>
      </tags>
  </entry>
  <entry>
    <title>延期考试周终于结束了！</title>
    <url>/posts/2537551951.html</url>
    <content><![CDATA[<p>煎熬的延期考试周始于8.30终于9.2，结束之后由于种种任务与放松计划迟迟没有开始写博客，今天终于有机会“提笔”。</p>
<p>考试周的安排在这里展示一下：</p>
<p><img src="/posts/2537551951/i1.jpg" alt="image"></p>
<p>我需要考的课程是算法导论、数据库系统（笔试、上机）、计算机组成原理、高级英语、人工智能导论、软件安全，算是四天七门吧，英语来不及准备，实际上是复习五门专业课。其实不只是考试的这一周很煎熬，大概从8.10开始，也算煎熬了大半个月吧。</p>
<p>造成考试周复习压力如此大的主要原因还是在于自己在假期还是有些松懈。</p>
<p>实际上实训7.24就结束了（5.30从天津回家到7.24正式放假的这段日子实在是没有空闲，结课大作业、论文、驾考报名体检、科目一考试、实习实训）。大概从8.9开始正式复习。这中间半个月的时间去平潭岛旅行了一趟，剩下的主要成就就是学车和锻炼了。其实学科目二那段日子也挺难集中精力学习的，要是上午早早去练车，下午基本就要多补一会觉，傍晚健身一下，晚上基本也没什么时间了；如果是下午练车倒还好，上午可以专心学一会，晚上就需要健身了。其实当初打算八月初就开始复习了，但是当时想着，平时期末周之前一边上课写作业也就提前三四周开始复习，现在虽然很多都忘了，但是应该提前三周就够了吧。于是从8.9才开始正式复习。</p>
<p>其实现在回忆起来，只能说确实可以做的更好，但是也没什么可遗憾的，毕竟漫长的暑假给自己放个假也是我的需求，再加上这半个月的时间也搭建了自己的博客并且学了车，也不算虚度。</p>
<p>不过当时没有想太多，以为二十天的时间复习五门课应该是足够了，实际上还需要花两天的时间去沙县考科目二、花三天的时间去沙县考科目三、需要花一天的时间准备科目四，当时也没有预料到计组作业那么多（本以为第四、五章的课后作业顶多也就三十多题，实际上最后翻了书才发现是三十几道大题、一百多道小题，最后作业就写了四十多页，再加上复习成果、设计模拟卷、CPU的实验报告），离开家里又避免不了会有一些饭局（亲戚的饭局很难避免，朋友分别前的饭局都被我推了），这样一算好像已经不到15天的时间可以复习了，甚至是接近只有十天。</p>
<p>大概在8.15之后开始发现任务非常繁重，压力开始大了起来。因为学车的时间不可调和、考试周任务繁重，就连队里的集训都缺席了（后来和朱妈聊了，不可避免失去了一些东西，但是我不觉得后悔）。</p>
<p>本来计划的是早早开始复习，精心准备，考好开学考，结果却是复习时间非常紧凑，基本不可能准备周全。</p>
<p>暑假开始的时候，想着这一个暑假需要先把大作业、论文结课的课程做好、需要拿到驾驶证、需要在实习实训拿到不错的分数、需要考好开学考、需要完成转专业和课程替代，实在是环环相扣、“一山放过一山拦”呀。只能按部就班，后来大作业和论文结课的课程分数都很好（主要就是计算方法不是太满意，但是也还好）、实习实训也顺利结束（虽然还没有公布分数，但是答辩时候给老师留下了不错的印象，应该还好）、转专业也推迟到了开学以后。当时主要面临的压力就是驾考和开学考。关于驾考还是再开一个帖子记录吧。反正当时也算是压力蛮大的，只能在心里复述那句话“你要给自己一点时间”。一下子高三的记忆就涌现出来（这里也说说题外话吧），当时刚考完竞赛回来，很多科目都比较差，数学补了一段时间都还是停留在110+的水平，内心十分焦虑，于是去找孔老师分析卷子+谈心，只记得孔老师和我说“你没有什么问题，要给自己一点时间”。其实补课程确实是一件需要耐心的事，后来成绩提不上去的时候就想着这句话，虽然最后高考总成绩不理想，但是数学也考了139，当时模拟考也考过145，也算是部分的如愿以偿吧。这次要做的事情这么多，算上转专业的焦虑都得有半年的时间了，八月份的时候特别想一下子到十月份，那时候如果事事顺利应该会很轻松了吧，“现在”真难过。这时候也同样用那句“给自己一点时间”安慰自己。不得不感慨孔对我的影响之大，也许他并不知道，但是这句话在这三年的时间里给了我莫大的支撑。</p>
<p>虽然驾考占用了很多的时间，但是也在25号顺利拿证了，非常开心，速通驾考也让我非常有成就感。</p>
<p>25号之后就开始全身心备战考试了，算算也就五天的时间可以复习，当时的进度大概是：计组的作业都还没开始，计组还差一大章，算法导论和数据库应该都还不到一半，软件安全和人工智能还没有开始，再加上四天七门考试的紧凑安排，实在是无比焦虑，完全不觉得自己能复习完。</p>
<p>在此之前我还几乎从未遇到过如此无准备的考试（至少大学没有），之前的考试周基本都是非常细致地复习一遍知识点，然后找往年的卷子做一做，不过效果一般。这次考试前期的安排就是争取提前把计组、数据库、算法复习完，在坐车回天津的路上把计组的作业赶完，然后用考试周的空挡速成人工智能和软件安全（主要是人工智能应该比较像课后题、软件安全有平时整理的复习笔记和样卷，比较放心）。结果也是按着这个计划走了。每一门也都勉强在考前复习完了。</p>
<p>算法导论在知识点复习完之外，向世辰哥要了往年的题型，结果好多都是按着往年的题型考，考前特地看了摔瓶子，真的考了原题。反正就基本都和预料之中一样，所以做的很顺利，算是做完了，感觉不错，但是选择题恐怕错了两三题，哎，都是改错的，希望会好吧。</p>
<p>数据库笔试也是往年的题型，虽然不是原题，但是题型基本平时都遇到过，所以也是中规中矩地考，在故障恢复那个大题做的比较乱，但是感觉也还好，数据库上机应该没什么问题，不知道结果如何。</p>
<p>计组是考前最没底的一门，因为不知道会怎么考。按照张金的上课方式感觉都是比较方法论的东西，实际上具体的设计和计算并不会，做课后题也是一脸懵，也没有往年的题型和卷子可以参考，可以说是非常忐忑了。很担心选择题很多计算、大题和课后题一样，贯穿设计也怕特别难。所幸考前张金老师让我们去看了六道课后题，说是掌握了就没有问题，在nkucs.icu网站上看学长学姐透露张金有过暗示背课后题的情况，所以我特别认真地看了那六道题，虽然最后两题（存储部分）没有全部看懂，特别是关于虚拟存储器那道题，根本不会做，只能赌不会考了。结果上了考场，选择题考的很基础，感觉做的没问题，大题前面三个问题都是原题，所以写的也很顺利，存储器那章考了cache没考虚拟存储器，赌对了（事实上我也不觉得会考那么难），感觉应该没问题吧。最后贯串设计题，考察太空实验舱的计算机系统设计问题，我回答的是异常和中断，利用预测和冗余解决，感觉答得很好。考完计组觉得很不错，希望高分。</p>
<p>然后是人工智能，实际上时间最紧的一门，考前基本没什么时间复习，所幸老师也按时根据课后题和相应的知识点进行复习，我基本就只是死记硬背了课后题，结果考试全是课后题，感觉应该还不错吧，但是好像选择题也错了两道，麻了，只要纠结就会选错。</p>
<p>软件安全因为有完整的课堂笔记和复习笔记（因为当时学的非常系统，一方面是老师讲的好；另一方面是自己当时是上课然后复习然后做实验巩固，所以学的扎实）复习起来很快，考前一晚开始复习，熬大夜，那天晚上就睡了四个小时左右吧，早上做了模拟题，也就上考场了。考题很多，20选择20判断5简答2综合，但是做的比较快，复习的基本都考了，前面答得感觉都还好吧，选择判断有一些疑问，但是最后两个简答题没复习到，也没什么遗憾的，实在是来不及。考了数据流分析和Angr污染分析，只能想到什么写什么了。不过如果转专业的话，软件安全不挂就好，再加上大家应该都一样，所以也不甚在意。</p>
<p>最后是英语，英语的平时分应该是新高，49.5/50，考前盘算着卷面有80以上，总分就上90了，就不会拖后腿了。考的时候感觉还不错，阅读有两个空没什么把握，完型很顺利，作文本来我也一般，语法题不会的比较多，但是不太在意了。希望英语上90。</p>
<p>就这样，煎熬的考试周在复习和考试中度过了，身处其中时感觉极其煎熬、焦虑、漫长，但是渡过了却觉得很快，感觉自己在这次考试中成长了，身体和心理的抗压能力都得到了提升。这次考试不知道是因为老师体谅延期考试压力极大而降低了难度并且透露了信息，还是我自己应试的能力提高了，也许两者都有吧，希望结果会好。一直忍着没查成绩，希望一下子查六门成绩会让我很惊喜吧，希望不要再次被打击。</p>
<p>既然考完试了，好好休息，好好运动，好好学英语，好好提升自己吧！</p>
]]></content>
      <categories>
        <category>生活的点点滴滴</category>
      </categories>
  </entry>
  <entry>
    <title>异常检测挑战赛数据绘制</title>
    <url>/posts/1394742614.html</url>
    <content><![CDATA[<h4 id="前言：-v2"><a class="header-anchor" href="#前言：-v2">¶</a>前言：</h4>
<p>上周学长和我说如果论文读的差不多了可以把数据集上的数据用matplotlib画出来。想着操纵一下真实的数据想必能对项目有更深的理解，于是开始学习。</p>
<p>matplotlib是Python的第三方库，确实很重要。</p>
<p>学习本身我也就是相当于学会怎么用”锤子“，所以也没什么值得分享和记录的。</p>
<p>读者有需要的可以去看莫凡Python的网课，链接如下：</p>
<blockquote>
<p><a href="https://www.bilibili.com/video/BV1Jx411L7LU/?spm_id_from=333.337.search-card.all.click&amp;vd_source=9d8000465f487fa8d1bdc7f47736df48">【莫烦Python】Matplotlib Python 画图教程_哔哩哔哩_bilibili</a></p>
</blockquote>
<h4 id="正文：-v4"><a class="header-anchor" href="#正文：-v4">¶</a>正文：</h4>
<p>本次操作数据集其实需要的matplotlib知识并不多。</p>
<h5 id="1-先了解csv文件里面数据存储的形式"><a class="header-anchor" href="#1-先了解csv文件里面数据存储的形式">¶</a>1.先了解csv文件里面数据存储的形式</h5>
<p>有四列属性，第一列是时间戳，第二列是节点名称，第三列是KPI名称（一个文件当中都相同），第四列是具体数值。大致如下图所示。</p>
<p><img src="/posts/1394742614/1.png" alt=""></p>
<p>一个文件基本上有四十个节点，每个节点对应一个KPI序列，因此KPI序列的x轴是timestamp，y轴是value。</p>
<h5 id="2-画出第一个时间序列"><a class="header-anchor" href="#2-画出第一个时间序列">¶</a>2.画出第一个时间序列</h5>
<p>对于每个节点，都有timestamp和value两个list，直接采用折线图（plot）的形式，即可画出序列，但是注意调整figsize（宽高比例）。</p>
<h5 id="3-利用subplot画出多个子图"><a class="header-anchor" href="#3-利用subplot画出多个子图">¶</a>3.利用subplot画出多个子图</h5>
<p>subplot就是让一个figure（一张图片）里面有多个子图（时间序列）</p>
<p><img src="/posts/1394742614/01.png" alt=""></p>
<h5 id="4-画出多个csv文件"><a class="header-anchor" href="#4-画出多个csv文件">¶</a>4.画出多个csv文件</h5>
<p>编写程序，遍历整个文件夹下所有csv文件，每个csv文件创建一个文件夹，每个文件夹存储该csv文件中所有时间序列。主要就是python的文件输出流了。</p>
<p>大抵是完成任务了。</p>
<p>（感觉需要记录一下，但是又不想细写，也没什么值得写的，就这样吧）</p>
<p>源代码：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每个节点都有自己的名字和时间序列（timestamp&amp;value)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.time_stamp = []</span><br><span class="line">        self.value = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url = <span class="string">"D:\MTSAD\data\初赛评分数据\\2022-05-01\cloudbed\metric\container"</span></span><br><span class="line">file = os.listdir(url)</span><br><span class="line"><span class="comment"># 这一步是因为我已经手动画过这几个文件了，所以remove</span></span><br><span class="line">file.remove(<span class="string">".DS_Store"</span>)</span><br><span class="line">file.remove(<span class="string">"kpi_container_cpu_cfs_periods.csv"</span>)</span><br><span class="line">file.remove(<span class="string">"kpi_container_cpu_cfs_throttled_periods.csv"</span>)</span><br><span class="line">file.remove(<span class="string">"kpi_container_cpu_cfs_throttled_seconds.csv"</span>)</span><br><span class="line">file.remove(<span class="string">"kpi_container_cpu_load_average_10s.csv"</span>)</span><br><span class="line">file.remove(<span class="string">"kpi_container_cpu_system_seconds.csv"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> F <span class="keyword">in</span> file:</span><br><span class="line">    <span class="comment"># 处理单个csv文件</span></span><br><span class="line">    <span class="comment"># 每个csv文件对应一系列节点</span></span><br><span class="line">    node_list = []</span><br><span class="line">    temp = url + <span class="string">"\\"</span> + F</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(temp, mode=<span class="string">"r"</span>, encoding=<span class="string">"utf-8-sig"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        reader = csv.reader(f)</span><br><span class="line">        header = <span class="built_in">next</span>(reader)</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> reader:</span><br><span class="line">            flag = <span class="literal">False</span></span><br><span class="line">            time = <span class="built_in">int</span>(row[<span class="number">0</span>]) - <span class="number">1651334400</span></span><br><span class="line">            value = <span class="built_in">float</span>(row[<span class="number">3</span>])</span><br><span class="line">            <span class="keyword">for</span> node <span class="keyword">in</span> node_list:</span><br><span class="line">                <span class="keyword">if</span> node.name == row[<span class="number">1</span>]:  <span class="comment"># 已经找到所属节点</span></span><br><span class="line">                    node.time_stamp.append(time)</span><br><span class="line">                    node.value.append(value)</span><br><span class="line">                    flag = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> flag:</span><br><span class="line">                temp_node = Node(row[<span class="number">1</span>])</span><br><span class="line">                temp_node.time_stamp.append(time)</span><br><span class="line">                temp_node.value.append(value)</span><br><span class="line">                node_list.append(temp_node)</span><br><span class="line"></span><br><span class="line">    tmp = F[:-<span class="number">4</span>]</span><br><span class="line">    save_path = <span class="string">"D:\MTSAD\data\img\\2022-5-01\container\\"</span> + tmp</span><br><span class="line">    os.mkdir(save_path)  <span class="comment"># 创建所属文件夹</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 画图</span></span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        fig = plt.figure(figsize=(<span class="number">24</span>, <span class="number">6</span>))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            node = node_list[index]</span><br><span class="line">            fig.add_subplot(<span class="number">4</span>, <span class="number">1</span>, i + <span class="number">1</span>)</span><br><span class="line">            plt.plot(node.time_stamp, node.value)</span><br><span class="line">            plt.title(node.name, loc=<span class="string">'left'</span>)</span><br><span class="line">            plt.subplots_adjust(wspace=<span class="number">0</span>, hspace=<span class="number">0.6</span>)  <span class="comment"># 调整子图间距</span></span><br><span class="line">            index += <span class="number">1</span></span><br><span class="line">        <span class="comment"># 存储</span></span><br><span class="line">        plt.savefig(save_path + <span class="string">"\\"</span> + <span class="string">f"0<span class="subst">{j}</span>.png"</span>)</span><br><span class="line">    <span class="comment"># plt.show()</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>科研</category>
      </categories>
      <tags>
        <tag>异常检测</tag>
        <tag>matplotlib</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>微服务相关知识学习</title>
    <url>/posts/1289748485.html</url>
    <content><![CDATA[<p>由于校内课题组分配任务的需要，学习一下微服务架构、调用链数据等知识。</p>
<h4 id="为什么需要分布式追踪系统？"><a class="header-anchor" href="#为什么需要分布式追踪系统？">¶</a>为什么需要分布式追踪系统？</h4>
<p>为了应对各种复杂的业务，开发工程师开始采用敏捷开发、持续集成等开发方式。系统架构也从<strong>单机大型软件演化成微服务架构</strong>。微服务构建在不同的软件集上，这些软件模块可能是由不同团队开发的，可能使用不同的编程语言来实现，还可能发布在多台服务器上。因此，如果一个服务出现问题，可能导致几十个应用都出现服务异常。</p>
<p><strong>分布式追踪系统</strong>可以记录请求范围内的信息，例如一次远程方法调用的执行过程和耗时，<strong>是我们排查系统问题和系统性能的重要工具</strong>。</p>
<h4 id="什么是调用链（Trace）？"><a class="header-anchor" href="#什么是调用链（Trace）？">¶</a>什么是调用链（Trace）？</h4>
<p>在广义上，一个调用链代表一个事务或者流程在（分布式）系统中的执行过程。在OpenTracing标准中，调用链是多个Span组成的一个有向无环图（Directed Acyclic Graph，简称DAG），每一个Span代表调用链中被命名并计时的连续性执行片段。</p>
<p>下图是一个分布式调用的例子：客户端发起请求，请求首先到达负载均衡器，接着经过认证服务、计费服务，然后请求资源，最后返回结果。</p>
<img src="/posts/1289748485/i1.png" alt="分布式调用实例" style="zoom:50%;">
<img src="/posts/1289748485/i2.png" alt="时间轴链路图" style="zoom:80%;">
<h4 id="OpenTracing数据模型"><a class="header-anchor" href="#OpenTracing数据模型">¶</a>OpenTracing数据模型</h4>
]]></content>
      <categories>
        <category>科研</category>
      </categories>
      <tags>
        <tag>异常检测</tag>
        <tag>微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>我上岸了，虽然还不确定是哪个岸</title>
    <url>/posts/2773019278.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="4241114f28610e907bb6f0bbf093be6840ee7919229f7918c5a23f0112891ecb"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入密码，查看文章。</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活的点点滴滴</category>
      </categories>
      <tags>
        <tag>自言自语</tag>
      </tags>
  </entry>
  <entry>
    <title>我为什么要在校区间往返</title>
    <url>/posts/2272983347.html</url>
    <content><![CDATA[<p>今天下午计算机视觉的助教通知实验课是以线上形式进行。之前就想过，如果如果周五的课程线上那我就可以去津南，因为我周一也特地选了津南的课，这样周五、周六日、周一都可以在津南。甚至周二的课只是半学期，也就是说下半学期，只要我想，周五到周二我都可以在津南。</p>
<p>虽然在津南有一个床位，但是宿舍里的东西都只是临时应付罢了。没有在那存有换洗的衣服和鞋子，每次都是带着衣服过去的。换下要洗的衣物也是带回泰达洗。住个一两天倒是凑合。</p>
<p>但是想了想，连着在津南住四天属实不太方便，要带足够换洗的衣物，还得在津南洗衣服袜子，而且四天不换鞋子穿也多少有些难受。但是如果把一半的衣服鞋子放到津南，且不说“搬家”是一件麻烦事，这样一来似乎两边的体验都下降了，不太想这么干。</p>
<p>于是想到了一个折中的方案，周五住津南，周六傍晚坐车回泰达，周日在泰达，周一早晨再坐车到津南上课。看起来是个不错的选择。这样每次在津南只是住一晚，可以接受。</p>
<p>收拾东西时我犹豫了。这样做是不是太浪费时间了？一周得坐两个来回，也就是4*50min，这样做值得吗？其实从时间最大化的角度，我大可以像同年级的人一样，全选泰达的课程，这样甚至都不用来津南。我为什么要常来津南呢？这是一个好问题。</p>
<p>最开始和最根本的原因是源于自己立下的可以说是承诺吧。在转专业之前就有考虑到，如果去了泰达基本上可以说是脱离队伍了，本来在队里的前两年就因为疫情没有什么比赛，后面两年再一去了泰达脱离队伍，那这四年我能为龙舟队付出多少呢？还记得我大一刚开始，懵懵懂懂的时候，就和云鹏一起立下了要一起在队伍里划四年的“誓言”。这一两年队伍发展也挺难的，老队员走了很多，新队员因为龙舟营取消的缘故也没真正培养起来（虽然有一些小兄弟还不错，但是数量还是比较少），大四的可能只剩下毕业划了，大三的忙着考研、保研、出国、就业…也都暂时地离开了，大二的其实也开始比较忙了，队伍又在十五周年（十六周年）的阶段，真的挺难的。我当然不自认为自己是那种力挽狂澜、在艰难时刻挺身而出的人，我没有那个能力和心气。但是至少留在队里就还多一个人，参与训练就有一定帮助。可能我有点把自己高尚化了，或许我只是为了自己“划四年”的目标，我不太分得清楚。总之就是想要尽可能多地参加训练，所以这样安排课程可以让我参加周一、周五的力量训练，周末也可以来划船。</p>
<p>还有一些其他的，我认为也是比较重要的理由。</p>
<p>比如说和人的接触。</p>
<p>其实在泰达我能感觉到自己的生活过于沉闷。我可能一天都不会和人说上几句话。因为我在泰达没有什么熟悉的人，平时除了上课就是吃饭和自己在宿舍学习。其实我能感受到，长期这样生活之后，我容易变得焦躁、容易emo。有了这样的经历我才感觉到，和人交流的重要性。一定程度的社交不会让我陷入自己的情绪怪圈。而一个人长期独处之后心态的不是很健康，对个人发展也不利。</p>
<p>泰达的生活同样是双刃剑。</p>
<p>虽然很孤单。但是方便。走路一分钟就能到食堂，吃饭也不用排长队。我还是蛮喜欢泰达的生活的。我目前感受到的缺点就是前文所述的孤单和运动环境不甚良好。</p>
<p>还有就是运动环境了，泰达有跑步机、椭圆机，但是只做这些运动并不能满足我的需求。偶尔到津南游个泳、健身房撸个铁，也能满足我的身体需要。</p>
<p>上述就是我能想到的理由了。</p>
<p>弊端就是时间消耗罢。一周接近四小时的路途开销。不过我已经尽可能地减少这个损失了。周一是坐早晨6.30的车，路上四五十分钟可以睡过去，补补觉，到津南七点多，不是很影响。周二中午坐12.30的车，路上就当午睡了，到泰达一点二十左右，有时候不满足还会再去躺个二十分钟，感觉也可以接受。这周五是坐了下午五点的车，感觉这个时间好像确实有些没法减少影响。不过以后确定都是线上了，可以中午坐车过去。周六傍晚六点的车，损失好像也没法避免。不过在车上我都会听英语磨磨耳朵（虽然通常都会变成昏睡）。不过偶尔的通勤开销也是蛮合理的嘛。</p>
<p>这么一想，似乎我是完全赞成这样的通勤安排了。看官也可以表达一下这么做对不对的看法哈哈。</p>
<p>不过如果后续有划船训练的话，可能周末也得全在津南？恐怕还是得放些衣服鞋子在这。到时候再规划吧。</p>
<p>唠叨半天，叙事可能也没有条理，但是也说服了自己，总之不坏。</p>
]]></content>
      <categories>
        <category>漫无目的地思考</category>
      </categories>
      <tags>
        <tag>自言自语</tag>
      </tags>
  </entry>
  <entry>
    <title>我创建了一个南开软件学院信息共享网站</title>
    <url>/posts/364684684.html</url>
    <content><![CDATA[<h2 id="我创建了一个南开软件学院信息共享网站"><a class="header-anchor" href="#我创建了一个南开软件学院信息共享网站">¶</a>我创建了一个南开软件学院信息共享网站</h2>
<p>最近两天，我创建了一个网站<a href="https://nkuse.icu/#/">nkuse.icu</a>，这个网站的作用就像下图左侧边栏所展示的那样：希望能够针对南开软件学院培养计划当中的所有课程留下往届学长学姐们的心得与建议，同时也提供包含转专业、实习、保研、出国等同学十分关心的方向的经验分享。网站的创建主要也是受<a href="https://nkucs.icu">南开计网的主页</a>和<a href="https://ieee.icu">上海交通大学IEEE试点班的主页</a>的启发。</p>
<p><img src="/posts/364684684/p1.png" alt="网站概览"></p>
<h2 id="我建立这个网站的原因是什么？"><a class="header-anchor" href="#我建立这个网站的原因是什么？">¶</a>我建立这个网站的原因是什么？</h2>
<p>其实我想建立这个网站的原因很多，有这个想法也快有一年时间了。一直因为在忙保研的事情，没能分出精力。</p>
<h3 id="网站和我的渊源？"><a class="header-anchor" href="#网站和我的渊源？">¶</a>网站和我的渊源？</h3>
<p>大概是在一年前，当时因为疫情，学校在期末提前遣返了所有学生，因此期末考试在开学进行。当时临近开学考的一个月压力很大，要考的课程很多、难度也不小。在焦虑之下，大家都在打听课程的考试重点、考试题型等等有利于复习和拿高分的信息。当时在集市上知道了nkucs.icu这个网站，当时一进去，真的感觉打开了新世界的大门。网站涵盖了所有课程，虽然并不是每门课都有学长学姐留下经验，但是尽管只有部分课程有经验可循，对我的帮助也是特别大的。当时这个网站就在我心中占据了极高的位置，我也特别佩服和尊敬这个网站的创建者。</p>
<h3 id="为什么希望促进信息共享？"><a class="header-anchor" href="#为什么希望促进信息共享？">¶</a>为什么希望促进信息共享？</h3>
<p>其实在大学，很重要的一项能力是信息获取能力。不管是课程的学习，考研的择校与备考，保研的复习、材料准备、院校申请、联系老师等等，更多的信息带来对准备目标的了解和把握，从而让我们更容易达成目标。大到整个本科四年应该如何规划，小到这门课的侧重点、往年试题，我们都希望更多的信息。（当然，其实感觉不只是大学，人类社会或许就是这样吧）因此，创建网站的原因之一，是帮助同学<strong>高效学习</strong>，避免把力气用错地方。</p>
<p>印象很深的一件事是大二的一门课——数字逻辑，这门课的往年试题保密工作做的特别好，我自己是没能获取到任何往年试题，因此备考的时候就照着书中的例题准备。已经忘了试卷难不难了，只是记得收卷之后，身边的两位同学在讨论“比去年的卷子简单好多啊”（大意是这个，就是能知道他们做了去年的试卷）。其实大多数专业课的往年试卷老师保密不外传的原因就是他们的题库并不庞大，只是反复抽取里面的题，如果做了几套往年试卷，考察的效果就很弱了（听老师在课上说的）。如果这个时候，有的同学掌握了往年试卷自然算是赢在起跑线上。</p>
<p>还记得林筠皓和我抱怨，说听到几位同学讨论，他们在某门课程和助教的关系很好，实验课的检查问题他们都预先知道题库、找x哥检查给高分之类的。林筠皓说“我就是计网那批被信息差的底层人民”。我又何尝不是呢。</p>
<p>大一的时候小刘就劝我，多找学长学姐请教、获取信息之类的。一方面，我很犟，不愿意这样做；另一方面，我并没有关系特别好的直系学长学姐，普通的学长学姐，问多了我怕人家不耐烦、也不好意思多问。大一的成绩并不好，我也学着去获取信息、找往年的资料。nkucs.icu给了我巨大的帮助，上面学长学姐留下的信息让我备考更有方向和针对性，事实证明，那个学期是我成绩最好的一个学期，大二一年我的专业排名上升了接近30名。</p>
<p>从社会残酷的角度来看，信息获取能力也是突出的能力。能收集到资料、能和学长学姐处好关系等等，这也是出色之处，也算是收益的成本。但是我想，在本科的学习当中，我还是更希望后续的学弟学妹们能公平地竞争，专注于学习本身。有的人能拿到别人拿不到的卷子，然后考了高分，我承认这是他的能力，也不否认是他应得的。但是我不希望看到后来的学弟学妹们，因为自己不擅长与人交际，不好意思向学长学姐请教，而处在竞争的劣势。所以这是我希望建立这个网站的另一个初衷，帮助同学<strong>公平竞争</strong>。</p>
<p>其实还有一个原因没有在网站首页陈述，就是<strong>提高交流效率</strong>。其实学长学姐们大多数是很愿意帮助学弟学妹的，但是有的时候可能会一直被问重复的问题，做重复的解答，难免有些累。一个公开的信息交流平台可以有效避免重复的沟通和交流。</p>
<h3 id="为什么觉得南开软件需要这个网站？"><a class="header-anchor" href="#为什么觉得南开软件需要这个网站？">¶</a>为什么觉得南开软件需要这个网站？</h3>
<p>在软件学院的学习过程中，我感觉学长学姐和学弟学妹们之间缺乏很有效的沟通手段。在写这篇博客的时候突然想到了原因。或许是因为软件学院的大一大二在津南、大三大四在泰达，距离直接阻断了二者之间的联系。或许大二和大一或许还有联系，但是比如我大三到了泰达，和大二在津南的同学就隔开了。等他们大三过来，大四的同学们实习、考研、保研、出国等，感觉在学校的就不多了。或许是这种原因，导致交流变得更少，“传承”也更少。但是我主动接触的学长学姐性格都非常nice。</p>
<p>因为信息共享很重要，软件学院的又缺少信息共享，因此我希望用这个平台提高一个公开的信息交流方式。</p>
<h2 id="我遇到了什么困难？"><a class="header-anchor" href="#我遇到了什么困难？">¶</a>我遇到了什么困难？</h2>
<p>其实网站建设过程中的技术性问题并不困难。只需要是一个静态的（再加上评论）、架构简单的网站就足够了，并且有</p>
<p><a href="https://nkucs.icu">南开计网的主页</a>和<a href="https://ieee.icu">上海交通大学IEEE试点班的主页</a>作为参考，建站过程并不困难。维护网站的时间、精力、金钱成本也不高。</p>
<p>其实网站遇到的最大困难是“冷启动”问题。像nkucs.icu和ieee.icu这样相对成熟、在院内的知名度也高，就会形成良性循环：同学们受到网站内容帮助&lt;-&gt;同学们帮助丰富网站内容。</p>
<p>而我的网站建立之初，没有内容也没有知名度，暂时还没向学弟学妹公开。所以内容的填充主要靠我自己，以及我的“人脉”。我对自己上过的每一门课进行了评价，但是内容也不够丰富。我向我在院内最熟悉的几位朋友求助，问了五个人，三个人答应了（但是没有做）、另外两个人则不回应。只能想想别的办法。</p>
<h2 id="我对网站未来的担忧"><a class="header-anchor" href="#我对网站未来的担忧">¶</a>我对网站未来的担忧</h2>
<p>如果网站能像nkucs.icu和ieee.icu那样蓬勃发展自然是极好的。</p>
<p>但是我比较担心网站不只是遇到冷启动的问题。我担心的是，软件学院的学风相对散漫，不会像计网那样内卷。大部分同学不需要很“用力”就能拿到不错的分数，所以也不会很想要获取信息。这样这个网站就没什么存在的意义。</p>
<p>不过我也宽慰自己：其实就算没有人来网站丰富内容，也没有很多学弟学妹对此感兴趣，我以这个形式留下我自己一个人的所有经验，能帮到一个算一个，真没有也就是浪费几天时间罢了。</p>
]]></content>
      <categories>
        <category>漫无目的地思考</category>
      </categories>
      <tags>
        <tag>自言自语</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>我和装虚拟机有仇</title>
    <url>/posts/1791995558.html</url>
    <content><![CDATA[<p>大二上第一次从zzl口中听说虚拟机，大二下的《并行程序设计》和《软件安全》两门课也是和虚拟机打了太多交道，装过的虚拟机恐怕也有五台了。软件的同学倒是本学期第一次装虚拟机。但是我却在这上面花费了一天有余的时间。感觉什么古怪的问题都被我碰上了。时间有限，简单梳理一下思路吧。</p>
<p>一开始按照老师的要求：用VirtualBox装Ubuntu22.04。首先，VirtualBox官网下载实在过于慢，于是去清华源下载该安装包，此处可能埋下隐患。Ubuntu22.04倒是从官网下载非常方便。接着就是按部就班地配置，但是启动虚拟机就花费了非常非常久，接着开始安装Ubuntu，重启等等，就直接到了傍晚。晚上上课的时候终于打开了Ubuntu，但是反应极其慢，令人发指，完全不适合工作。</p>
<p>感觉是VirtualBox的问题，于是问老师能不能用VMWare替代。老师的说法是：首先要有资源，其次同样要增强功能（其实对应的是VMWare tools），再次是可能会有一些小不同，但是可以用。</p>
<p>实在不想折腾virtualbox了，于是改用VMWare，只能说VM过于强大，装虚拟机非常流畅，安装Ubuntu也快了不少，只能说确实是VB的问题，毕竟我是用同一个镜像源。</p>
<p>安装了不代表完事大吉。VM tools也需要配置好，否则不能实现主机虚拟机复制粘贴，并且显示也会有问题。但是工具栏的VM tools重新安装是灰色的，不能用。只能手动安装。手动安装就需要去找对应的iso文件，这一步倒没什么。找到了VM tools的压缩文件之后还需要进行解压和安装，按部就班即可。但是VM tools并没有生效。CSDN上需要输入两条命令，类似更新。接着发现源地址失效了，又需要改源地址。但是改源地址需要复制大段代码，主机虚拟机互相不能粘贴，所以要用虚拟机访问清华源。更改源之后，基本就可以了。操作之后记得重启。</p>
<p>最后实现了VM tools生效，复制粘贴可以了，屏幕也可以全屏了。但是图标和文字还是比较小，但是大体就能用了。</p>
<p>只能说绝大多数时间都浪费在了VirtualBox上，VMWare虽然碰上一系列问题，但是好还是很快，希望后续不要有什么隐患吧。</p>
<p>以上。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>虚拟机</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建博客的第二天</title>
    <url>/posts/3886555887.html</url>
    <content><![CDATA[<p>搭建博客的第一天只是创建了这么一个博客网站并且绑定了购买的域名。</p>
<p>今天改用Next主题的Gemini模式，在这个基础上完善了自己的界面，今天主要记录完善的过程。</p>
<p><strong>一.	添加搜索功能</strong></p>
<p><code>$ npm install hexo-generator-searchdb --save</code></p>
<p><strong>二.	添加关于、标签、分类模块</strong></p>
<p>​	1.创建标签、分类的页面</p>
<p>​	在根目录下输入：	<code>$ hexo new page about/tags/categories</code></p>
<p>​	在source文件夹下有了对应的页面</p>
<p>​	2.在每个页面对应的文件夹下有一个index.md文件，打开并编辑</p>
<p>​	<code>title: 关于/标签/分类</code></p>
<p>​	添加一行内容：	<code>type: "about/tags/categories"</code></p>
<p>​	这样新的页面就关联上了这些模块</p>
<p>​	3.前往主题配置文件_config.yml中，把menu中对应的注释去掉</p>
<p>​	4.在文章的开头部分加上</p>
<p>​</p>
<figure class="highlight subunit"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">tags:</span></span><br><span class="line">  - tag1</span><br><span class="line">  - tag2</span><br><span class="line">  ...</span><br><span class="line">categories:</span><br><span class="line">  - cat1</span><br><span class="line">  - cat2</span><br><span class="line">  ...</span><br></pre></td></tr></tbody></table></figure>
<p>​	即可。</p>
<p><strong>三.主题配置修改之后，本地有效但是网络端无效的解决</strong></p>
<p>​	1.找到next主题文件夹下Source文件夹下的lib文件夹，重命名为ywl</p>
<p>​	2.在主题配置文件_config.yml中找到Vendors，修改内容为：</p>
<p>​	<code>_internal: ywl</code>即可。</p>
<p>​</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>有时候真的不知道该不该遵从自己的本心</title>
    <url>/posts/2522645851.html</url>
    <content><![CDATA[<p>最近这一年多疏于经营，博客更新变成了半年。上次更新后的日子里，也“提笔”写过2023年终总结、论文出分后的焦躁，时隔一年归队的心路历程也是十分值得写的，但是终究是没有写完。</p>
<p>这次提笔是写下对于入dang的彷徨。</p>
<p>上大学前，更准确地说是上高中前，我是一个中二少年，梦想是当一个科研为国的研究者，心里最大的志向是报国。内心纯粹的我，不知道二十多岁的自己已经是没有足够的动机和足够的资格入dang了。</p>
<p>上大学以后，我当了一年班长，也参加了优秀团干部的评选，但是这一年内心的纠结、别扭一直困扰我，一年期满就不再参与任何班干部的竞选了。我不喜欢参加所谓的“团日活动”，不想浪费时间填写一份又一份的材料，不想花时间在所谓的培训班…，我总觉得干这些分心的事不如把时间花在看论文、做实验上，甚至不如放在娱乐放松上。总之如果纯凭内心意愿，我是不愿入dang的。按照女朋友的说法，我是“入dang动机不足”，我承认这一点。</p>
<p>我内心也有辩解，我只是不愿意把时间放在琐碎的事情上，不是不愿意为国家为人民做贡献。被录取到计算所的时候，我还为了宣传栏的“科研为国分忧，创新与民造福”的标语感动不已，觉得自己没选错地方。当然，这可能只是借口和自我感动罢，我不确定。只是，照这么想，那就不必入dang，自己问心无愧便是，做贡献难道还看是不是dang员吗？</p>
<p>但是我却不是那么坚定脱俗的人，我还是会担心，如果不是党员，未来找工作是不是会劣势呢？是不是在国企央企体制内就不占优势呢？想到这里，我不入dang的心就动摇了，所以我还是个庸俗逐利的人。女朋友、家人、朋友，似乎都劝我入dang，以便将来找工作、职场晋升。每次遇到这样的选择我就纠结不已，于本心我实在不愿花费这样的精力，于外界，似乎又不能这样的“摆烂”。</p>
<p>我不止没有了曾经的赤诚，还丧失了曾经的锐气。换做中学时的我，我一定会毫不犹豫地坚持自己内心的想法，证明自己不xxx也能好好的。年岁增长，变得世俗、自私、犹豫不决了。毕竟，我好像觉得自己习得了“锐气和偏执会让自己吃亏”的“经验”。</p>
<p>写到这里，其实我已经想得差不多了。我还是想遵从自己的本心，还是想捡起我不多的偏执，按照自己的想法做事、生活，也愿意为我自己的选择承担后果。过自己想过的生活也很好不是吗？顺从自己的本心，不必把时间、精力、情绪浪费在纠结这些事情上。做好自己，把时间花在研究和提升自己上，难道会找不到工作吗？</p>
<p>也许我就这么决定了，希望我不再纠结。</p>
]]></content>
      <categories>
        <category>漫无目的地思考</category>
      </categories>
      <tags>
        <tag>自言自语</tag>
      </tags>
  </entry>
  <entry>
    <title>实验室服务器管理笔记</title>
    <url>/posts/1030984742.html</url>
    <content><![CDATA[<h2 id="前言-v10"><a class="header-anchor" href="#前言-v10">¶</a>前言</h2>
<p>博客的最近一次更新已经是一个多月以前了，最近一次文章的发布还是在四个月以前，我必须承认荒废了对博客的经营。</p>
<p>最近开始慢慢从wyf师兄手中接过实验室服务器管理的担子，说实在的有些惶恐。我对Linux系统的熟悉程度恐怕仅局限于在自己的普通权限账号上跑实验不遇到问题罢了，要管理整个服务器还是压力颇大，和wyf师兄对服务器的玩转程度更是相差甚远。</p>
<p>不过既然做了就还是踏踏实实做好，所以就记录一下应该干什么、怎么干。计划慢慢补充这篇笔记，供自己回忆使用。</p>
<p>（本人才疏学浅，若有理解不当之处烦请指正）</p>
<h2 id="正文-v6"><a class="header-anchor" href="#正文-v6">¶</a>正文</h2>
<h3 id="更新内核"><a class="header-anchor" href="#更新内核">¶</a>更新内核</h3>
<p>如果接手的服务器内核版本比较落后就需要更新了：</p>
<ul>
<li>
<p>首先可以通过<code>uname -a</code>获取内核版本和发布时间的信息；</p>
</li>
<li>
<p>其次运行<code>sudo yum update</code>进行更新，这个过程可能比较长；</p>
</li>
<li>
<p>更新内核之后，可能并不会直接用新版的内核，通过<code>sudo awk -F\' '$1=="menuentry " {print $2}' /etc/grub2.cfg</code>查看现有内核的启动顺序，可能得到如下输出（从0开始编号）</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">CentOS Linux (3.10.0-1160.102.1.el7.x86_64) 7 (Core)</span><br><span class="line">CentOS Linux (3.10.0-957.el7.x86_64) 7 (Core)</span><br><span class="line">CentOS Linux (0-rescue-ec876c21f6b0491a85e304065e59a6f7) 7 (Core)</span><br></pre></td></tr></tbody></table></figure>
</li>
<li>
<p>通过<code>sudo grub2-set-default x</code>指定默认启动项</p>
</li>
<li>
<p><code>sudo reboot</code>重启</p>
</li>
<li>
<p><code>uname -a</code>查看内核是否更新</p>
</li>
</ul>
<h3 id="更新显卡驱动"><a class="header-anchor" href="#更新显卡驱动">¶</a>更新显卡驱动</h3>
<p>如果机器上的nVidia驱动版本也比较落后了同样需要更新：</p>
<ul>
<li>访问<a href="https://www.nvidia.cn/Download/index.aspx?lang=cn">nVidia驱动下载网址</a>输入机器信息获取nVidia驱动下载连接，下载得到.run文件</li>
<li><code>sh xxx.run</code>安装驱动，会提示你卸载旧版的驱动，很方便就安装好新版驱动了</li>
</ul>
<h3 id="设置密码强度"><a class="header-anchor" href="#设置密码强度">¶</a>设置密码强度</h3>
<ul>
<li>
<p>安装 pwquality 模块（如果尚未安装）</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-get install libpam-pwquality    <span class="comment"># 对于基于 Debian 的系统</span></span><br><span class="line">sudo yum install libpwquality            <span class="comment"># 对于基于 Red Hat 的系统</span></span><br></pre></td></tr></tbody></table></figure>
</li>
<li>
<p>编辑 pwquality.conf 文件：<code>sudo vim /etc/security/pwquality.conf</code>，添加或修改参数，如：</p>
<figure class="highlight ini"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">minlen</span> = <span class="number">12</span></span><br><span class="line"><span class="attr">minclass</span> = <span class="number">3</span></span><br><span class="line"><span class="attr">maxrepeat</span> = <span class="number">3</span></span><br></pre></td></tr></tbody></table></figure>
</li>
<li>
<p>配置 PAM 使用 pwquality：</p>
<p>编辑 <code>/etc/security/pam_common-password</code> 文件，确保使用 pwquality 模块。找到或添加类似的行：</p>
<figure class="highlight routeros"><table><tbody><tr><td class="code"><pre><span class="line">password requisite pam_pwquality.so <span class="attribute">retry</span>=3</span><br></pre></td></tr></tbody></table></figure>
</li>
</ul>
<h3 id="设置密码更新时间"><a class="header-anchor" href="#设置密码更新时间">¶</a>设置密码更新时间</h3>
<ul>
<li>
<p><code>sudo vim /etc/login.defs</code></p>
</li>
<li>
<p>配置参数：</p>
<figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 密码的最大有效期</span></span><br><span class="line"><span class="attribute">PASS_MAX_DAYS</span>   <span class="number">90</span></span><br><span class="line"><span class="comment"># 是否可修改密码，多少天后可修改</span></span><br><span class="line"><span class="attribute">PASS_MIN_DAYS</span>   <span class="number">0</span></span><br><span class="line"><span class="comment"># 密码最小长度，pam_pwquality设置优先</span></span><br><span class="line"><span class="attribute">PASS_MIN_LEN</span>    <span class="number">8</span></span><br><span class="line"><span class="comment"># 密码失效前多少天在用户登录时通知用户修改密码</span></span><br><span class="line"><span class="attribute">PASS_WARN_AGE</span>   <span class="number">15</span></span><br></pre></td></tr></tbody></table></figure>
</li>
</ul>
<h3 id="禁止root远程登录"><a class="header-anchor" href="#禁止root远程登录">¶</a>禁止root远程登录</h3>
<ul>
<li><code>sudo vim /etc/ssh/sshd_config</code></li>
<li>找到<code>#PermitRootLogin yes</code></li>
<li>改成<code>PermitRootLogin no</code></li>
<li>重启ssh服务使更改生效：<code>sudo systemctl restart sshd</code></li>
</ul>
<h3 id="安装fail2ban防止ssh暴力破解密码"><a class="header-anchor" href="#安装fail2ban防止ssh暴力破解密码">¶</a>安装fail2ban防止ssh暴力破解密码</h3>
<p>fail2ban的主要功能就是检测是否有ip在短时间内有大量尝试登录服务器而失败的行为，如果检测到就禁止ip近期访问，起到防止服务器被暴力破解密码的作用。（我在Ubuntu系统上装fail2ban挺顺利的，但是在CentOS上踩坑了，记录一下）</p>
<ul>
<li>
<p>首先我们需要在CentOS上安装fail2ban（fail2ban 可通过 EPEL yum 存储库获得，因此，我们必须<strong>安装 epel-release</strong> 才能访问 EPEL yum 存储库）：<code>sudo yum install -y epel-release</code></p>
</li>
<li>
<p>为 yum 存储库构建缓存：<code>sudo yum makecache fast</code></p>
<p>这时候就报错了，大概是这样</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">One of the configured repositories failed (Unknown),</span><br><span class="line"> and yum doesn<span class="string">'t have enough cached data to continue. At this point the only</span></span><br><span class="line"><span class="string"> safe thing yum can do is fail. There are a few ways to work "fix" this:</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">     1. Contact the upstream for the repository and get them to fix the problem.</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">     2. Reconfigure the baseurl/etc. for the repository, to point to a working</span></span><br><span class="line"><span class="string">        upstream. This is most often useful if you are using a newer</span></span><br><span class="line"><span class="string">        distribution release than is supported by the repository (and the</span></span><br><span class="line"><span class="string">        packages for the previous distribution release still work).</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">     3. Disable the repository, so yum won'</span>t use it by default. Yum will <span class="keyword">then</span></span><br><span class="line">        just ignore the repository until you permanently <span class="built_in">enable</span> it again or use</span><br><span class="line">        --enablerepo <span class="keyword">for</span> temporary usage:</span><br><span class="line"> </span><br><span class="line">            yum-config-manager --<span class="built_in">disable</span> &lt;repoid&gt;</span><br><span class="line"> </span><br><span class="line">     4. Configure the failing repository to be skipped, <span class="keyword">if</span> it is unavailable.</span><br><span class="line">        Note that yum will try to contact the repo. when it runs most commands,</span><br><span class="line">        so will have to try and fail each time (and thus. yum will be be much</span><br><span class="line">        slower). If it is a very temporary problem though, this is often a nice</span><br><span class="line">        compromise:</span><br><span class="line"> </span><br><span class="line">            yum-config-manager --save --<span class="built_in">setopt</span>=&lt;repoid&gt;.skip_if_unavailable=<span class="literal">true</span></span><br><span class="line"> </span><br><span class="line">Cannot retrieve metalink <span class="keyword">for</span> repository: epel/x86_64. Please verify its path and try again</span><br></pre></td></tr></tbody></table></figure>
<p>这时候去网络上搜，帖子都很老了，都是201x年的，很多会让你检查DNS配置、修改<code>/etc/yum.repos.d/CentOS-Base.repo</code>里面的网址配置，建议最好不要乱改。</p>
<p>我们是下载了epel-release之后才报错的，报错的信息也是<code>epel/x86_64</code>找不到，其实就是访问不到epel yum存储库，尝试用代理也不行。解决方法很简单：</p>
<ul>
<li><code>/etc/yum.repos.d</code>目录下面决定yum下载的路径</li>
<li><code>CentOS-Base.repo</code>决定基础的库</li>
<li><code>epel.repo</code>决定epel的库</li>
<li>可以到阿里云的镜像站：<a href="http://mirrors.aliyun.com/repo/">repo安装包下载_开源镜像站-阿里云 (aliyun.com)</a>，里面有对应的配置文件，直接照着改，就可以访问阿里云的资源进行yum的下载了</li>
<li>我把<code>CentOS-Base.repo</code>和<code>epel.repo</code>都改了</li>
<li>记得<code>sudo yum clean all</code>和<code>sudo yum makecache fast</code></li>
</ul>
</li>
<li>
<p>下载相关安装包：<code>sudo yum install -y fail2ban fail2ban-firewalld fail2ban-systemd</code></p>
</li>
<li>
<p>启用并启动 fail2ban.service 。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[root@fail2ban-01 ~] systemctl <span class="built_in">enable</span> fail2ban.service</span><br><span class="line">[root@fail2ban-01 ~] systemctl start fail2ban.service</span><br></pre></td></tr></tbody></table></figure>
</li>
<li>
<p>了解 fail2ban 配置文件：</p>
<p>fail2ban 配置存在于 <code>/etc/fail2ban/</code> 和 <code>/etc/fail2ban/jail.d/</code> 中</p>
<p>**fail2ban 首先读取 <em>.conf 文件，然后读取 <em>.local 文件</em></em><br>
*<em>因此，*.conf 文件中的所有设置都被 <em>.local 文件中的设置覆盖</em></em></p>
<p>因此，最好的做法是创建一个自定义的 jail.local 文件，而不是编辑默认的 jail.conf 文件。</p>
<p>将默认的 jail.conf 文件复制为 jail.local，并编辑</p>
<p><code>sudo cp /etc/fail2ban/jail.conf /etc/fail2ban/jail.local</code></p>
</li>
<li>
<p>编辑基础配置参数：</p>
<p>简单来讲就是如果某个ip在findtime时间内访问失败了maxretry次，就会被禁止bantime时间</p>
<figure class="highlight apache"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attribute">bantime</span> 它是禁止主机的时间（以秒为单位）。</span><br><span class="line"><span class="attribute">findtime</span> 它是fail<span class="number">2</span>ban 必须捕获maxretry 失败以禁止主机的时间跨度。</span><br><span class="line"><span class="attribute">maxretry</span> 它是主机被禁止之前的失败次数。</span><br></pre></td></tr></tbody></table></figure>
</li>
<li>
<p>配置 fail2ban 以保护 SSH 服务：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[root@fail2ban-01 ~] sed -i <span class="string">"/^\[sshd\]/a\enabled=true"</span> /etc/fail2ban/jail.local</span><br><span class="line">[root@fail2ban-01 ~] systemctl restart fail2ban.service  <span class="comment"># 重启服务</span></span><br></pre></td></tr></tbody></table></figure>
</li>
<li>
<p>检查fail2ban服务状态：<code>sudo systemctl status fail2ban</code></p>
</li>
</ul>
<h3 id="防火墙管理"><a class="header-anchor" href="#防火墙管理">¶</a>防火墙管理</h3>
<p>Ubuntu系统的防火墙是ufw，CentOS系统的防护墙是firewalld，管理服务器需要关闭22以外的非必要端口，对于需要开端口监听服务的同学再额外开</p>
<h3 id="登录欢迎信息管理"><a class="header-anchor" href="#登录欢迎信息管理">¶</a>登录欢迎信息管理</h3>
<p>编辑/etc/motd即可</p>
<h3 id="开账号"><a class="header-anchor" href="#开账号">¶</a>开账号</h3>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo useradd -m xxx  <span class="comment"># 添加用户并创建对应目录</span></span><br><span class="line">sudo passwd xxx  <span class="comment"># 设置密码</span></span><br><span class="line">sudo chmod 700 /home/xxx  <span class="comment"># 设置用户目录仅自己可见</span></span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>推荐系统论文调研（SIGKDD、SIGIR）</title>
    <url>/posts/3747160458.html</url>
    <content><![CDATA[<h2 id="SIGIR-2022"><a class="header-anchor" href="#SIGIR-2022">¶</a>SIGIR 2022</h2>
<h3 id="Interpolative-Distillation-for-Unifying-Biased-and-Debiased-Recommendation"><a class="header-anchor" href="#Interpolative-Distillation-for-Unifying-Biased-and-Debiased-Recommendation">¶</a>Interpolative Distillation for Unifying Biased and Debiased Recommendation</h3>
<p>（用于统一<strong>有偏</strong>和去偏推荐的<strong>插值蒸馏</strong>）</p>
<p>Abstract：大多数推荐系统通过以下任一方式<strong>离线评估模型性能</strong>：1）对事实交互的正常偏差测试；或 2) 使用<strong>随机对照试验</strong>的记录进行去偏试验。事实上，这两个测试都只反映了全貌的一部分：事实交互是<strong>从推荐策略中收集</strong>的，更好地拟合它们意味着有利于平台获得<font color="red">更高的点击率或转化率</font>；相反，<font color="red">去偏测试消除了系统引起的偏差</font>，因此更能反映用户的真实偏好。尽管如此，我们发现现有模型在<strong>两个测试中表现出权衡</strong>，并且缺乏在<strong>两个测试中都表现良好</strong>的方法。 在这项工作中，我们的目标是开发一种双赢的推荐方法，该方法在两个测试中都很强大。这是非常重要的，因为它需要学习一个模型，该模型可以在<font color="red">事实环境（即正常的有偏测试）</font>和<font color="red">反事实环境（即去偏测试）</font>中做出准确的预测。为了实现这一目标，我们通过考虑这两种环境来执行环境感知推荐建模。特别是，我们提出了一个<font color="red">插值蒸馏 (InterD) 框架</font>，它通过蒸馏学生模型在用户-项目对级别对有偏和去偏模型进行插值。我们对三个真实世界的数据集进行了两个测试的实验。实证结果证明了 InterD 的合理性和有效性，它在两个测试中都脱颖而出，特别是在不太受欢迎的项目上表现出显着的进步。</p>
<p><font color="orange">（插值蒸馏+有偏测试+去偏测试）</font></p>
<h3 id="Graph-Trend-Filtering-Networks-for-Recommendation"><a class="header-anchor" href="#Graph-Trend-Filtering-Networks-for-Recommendation">¶</a>Graph Trend Filtering Networks for Recommendation   ***</h3>
<p>（用于推荐的图趋势过滤网络）</p>
<p>Abstract：推荐系统旨在为用户提供个性化服务，在我们的日常生活中发挥着越来越重要的作用。<strong>推荐系统的关键是根据用户的历史在线行为（例如点击、添加到购物车、购买等）来预测用户与项目交互的可能性有多大</strong>。为了利用这些用户-项目交互，越来越多的努力考虑<font color="red">将用户-项目交互作为用户-项目二分图</font>，然后通过图神经网络 (GNN) 在图中执行信息传播。鉴于 GNN 在图形表示学习中的强大功能，这些<strong>基于 GNN 的推荐方法显着提高了推荐性能</strong>。尽管取得了成功，但大多数现有的基于 GNN 的推荐系统都<font color="red">忽略了由不可靠行为（例如，随机/诱饵点击）产生的特征交互并统一处理所有交互</font>，这可能导致次优和不稳定的性能。在本文中，我们<font color="red">研究</font>了现有的基于 GNN 的推荐方法的<font color="red">缺点</font>（例如，非自适应传播和非鲁棒性）。为了解决这些缺点，我们<font color="red">引入了一种有原则的图趋势协同过滤方法，并提出了图趋势过滤网络推荐（GTN）</font>，它可以捕获交互的自适应可靠性。提出了综合实验和消融研究，以验证和理解所提出框架的有效性。我们基于 PyTorch 的实现可用：<a href="https://github.com/wenqifan03/GTN-SIGIR2022%E3%80%82">https://github.com/wenqifan03/GTN-SIGIR2022。</a></p>
<p><font color="orange">（用户-项目二分图、不可靠行为、CTN）</font></p>
<h3 id="HIEN-Hierarchical-Intention-Embedding-Network-for-Click-Through-Rate-Prediction"><a class="header-anchor" href="#HIEN-Hierarchical-Intention-Embedding-Network-for-Click-Through-Rate-Prediction">¶</a>HIEN: Hierarchical Intention Embedding Network for Click-Through Rate Prediction  ***</h3>
<p>（用于点击率预测的分层意图嵌入网络）</p>
<p>Abstract：点击率 (CTR) 预测在在线广告和推荐系统中起着重要作用，旨在估计用户点击特定项目的概率。<font color="red">特征交互建模和用户兴趣建模方法是CTR预测中的两个热门领域</font>，近年来得到了广泛的研究。然而，这些方法仍然有两个**<font color="red">局限性</font><strong>。首先，传统方法将项目属性视为ID特征，而<font color="red">忽略了属性之间的</font></strong>结构信息<strong>和</strong>关系依赖性**。其次，当从用户-项目交互中挖掘用户兴趣时，当前模型<font color="red">忽略了不同属性的用户意图和项目意图</font>，这<font color="red">缺乏可解释性</font>。基于这一观察，在本文中，我们提出了一种新方法<font color="red">层次意图嵌入网络 (HIEN)</font>，它在构造的属性图中基于自下而上的树聚合考虑属性的依赖关系。HIEN 还<font color="red">捕获</font>用户对不同项目属性的意图以及基于我们提出的分层注意机制的项目<font color="red">意图</font>。在公共和生产数据集上进行的大量实验表明，所提出的模型明显优于最先进的方法。此外，HIEN 可以<font color="red">用作最先进的 CTR 预测方法的输入模块</font>，为这些可能已经在实际系统中大量使用的现有模型带来<font color="red">进一步的性能提升</font>。</p>
<p><font color="orange">（分层(考虑结构信息、关系依赖)、意图(属性代表的意图)）</font></p>
<h3 id="NAS-CTR-Efficient-Neural-Architecture-Search-for-Click-Through-Rate-Prediction"><a class="header-anchor" href="#NAS-CTR-Efficient-Neural-Architecture-Search-for-Click-Through-Rate-Prediction">¶</a>NAS-CTR: Efficient Neural Architecture Search for Click-Through Rate Prediction</h3>
<p>（用于点击率预测的高效神经架构搜索）</p>
<p>Abstract：点击率（CTR）预测已广泛应用于许多机器学习任务，例如在线广告和个性化推荐。不幸的是，给定特定领域的数据集，从<font color="red">巨大的候选空间</font>中搜索有效的特征交互操作和组合需要大量的<font color="red">专家经验和计算成本</font>。最近，神经架构搜索（<font color="red">NAS</font>）在自动<font color="red">发现高质量网络架构</font>方面取得了巨大成功。然而，由于特征交互操作和组合的多样性，现有的基于 NAS 的工作将架构搜索视为离散搜索空间上的<font color="red">黑盒优化问题，效率低下</font>。因此，探索一种更有效的架构搜索方法至关重要。为了实现这个目标，我们提出了NAS-CTR，<font color="red">一种用于 CTR 预测的可区分神经架构搜索方法</font>。首先，我们设计了一个新颖且富有表现力的架构搜索空间和一个连续的松弛方案，使搜索空间可微。其次，我们将用于 CTR 预测的架构搜索制定为对架构具有离散约束的联合优化问题，并利用近端迭代来解决受约束的优化问题。此外，还提出了一种简单而有效的方法来消除跳跃连接的聚集。广泛的实验结果表明，NAS-CTR 在测试准确性和搜索效率方面都优于 SOTA 人工架构和其他基于 NAS 的方法。</p>
<p><font color="orange">（主要是优化寻找有效特征交互的过程，具体方法没看懂）</font></p>
<h3 id="Enhancing-CTR-Prediction-with-Context-Aware-Feature-Representation-Learning"><a class="header-anchor" href="#Enhancing-CTR-Prediction-with-Context-Aware-Feature-Representation-Learning">¶</a>Enhancing CTR Prediction with Context-Aware Feature Representation Learning  ***</h3>
<p>（通过上下文感知的特征表示学习增强CTR预测）</p>
<p>Abstract：CTR预测在现实世界中得到了广泛的应用。许多方法对特征交互进行建模以提高其性能。然而，大多数方法只为每个特征学习固定的表示，而没有考虑每个特征在不同<font color="red">上下文下的不同重要性</font>，导致性能较差。最近，有几种方法尝试<font color="red">学习特征表示的向量级权重</font>，以解决固定表示问题。然而，它们<font color="red">只产生线性变换来改进<strong>固定的特征表示</strong></font>，这些表示仍然不够灵活，无法捕捉不同上下文下每个特征的不同重要性。在本文中，我们提出了一个名为<font color="red">特征细化网络 (FRNet)</font> 的新模块，它在不同上下文中为每个特征<font color="red">学习位级（bit-level）的上下文感知特征表示</font>。FRNet 由两个关键组件组成：1）<font color="red">信息提取单元（IEU）</font>，它捕获上下文信息和交叉特征关系以指导上下文感知特征细化；2）<font color="red">互补选择门（CSGate）</font>，它自适应地将在 IEU 中学习的<font color="red">原始和互补特征表示与比特级权重相结合</font>。值得注意的是，FRNet 与现有的 CTR 方法正交，因此可以应用于许多现有的方法以提高其性能。进行了全面的实验来验证FRNet的有效性、效率和兼容性。</p>
<p><font color="orange">（特征在不同上下文中的重要性，不满足于权重向量，而通过FRNet进行特征的重构，可以直接加在现有的模型上）</font></p>
<h3 id="ESCM2-Entire-Space-Counterfactual-Multi-Task-Model-for-Post-Click-Conversion-Rate-Estimation"><a class="header-anchor" href="#ESCM2-Entire-Space-Counterfactual-Multi-Task-Model-for-Post-Click-Conversion-Rate-Estimation">¶</a>ESCM2: Entire Space  Counterfactual Multi-Task Model for Post-Click Conversion Rate Estimation.</h3>
<p>（用于点击后转化率估计的全空间反事实多任务模型）</p>
<p><font color="orange">（完全没看懂摘要，暂时搁置）</font></p>
<h3 id="On-Device-Next-Item-Recommendation-with-Self-Supervised-Knowledge-Distillation"><a class="header-anchor" href="#On-Device-Next-Item-Recommendation-with-Self-Supervised-Knowledge-Distillation">¶</a>On-Device Next-Item Recommendation with Self-Supervised Knowledge Distillation</h3>
<p>（具有自监督知识蒸馏的设备上的下一项推荐）</p>
<p>Abstract：基于会话的推荐系统 (SBR) 越来越受欢迎，因为它们可以在<font color="red">不依赖长期用户配置文件</font>的情况下预测用户兴趣，并支持<font color="red">免登录推荐</font>。现代推荐系统以完全基于服务器的方式运行。为了满足<font color="red">数百万用户的需求</font>，需要频繁的模型维护和对并发用户请求的高速处理，这是以巨大的碳足迹为代价的。同时，用户需要将他们的行为<font color="red">数据</font>甚至包括即时环境上下文<font color="red">上传到服务器</font>，引发公众对隐私的关注。设备上的推荐系统通过<font color="red">注重成本的设置和本地推理</font>来规避这两个问题。然而，由于内存和计算资源有限，设备端推荐系统面临着两个基本挑战：(1) <font color="red">如何缩小常规模型</font>的尺寸以适应边缘设备？(2)如何<font color="red">保留原有容量</font>？</p>
<p>以往的研究大多采用张量分解技术以低压缩率压缩常规推荐模型，以避免性能急剧下降。在本文中，我们通过<font color="red">放松张量分解中维度一致性的约束</font>，探索用于下一项推荐的<font color="red">超紧凑模型</font>。<strong>为了补偿压缩造成的容量损失，我们开发了一个自我监督的知识蒸馏框架</strong>，使压缩模型（学生）能够提取原始数据中的基本信息，并通过嵌入改进长尾项目推荐。与原始模型（教师）的重组策略。在两个基准测试中进行的大量实验表明，在尺寸减小 30 倍的情况下，压缩模型几乎没有精度损失，甚至优于其未压缩的对应物。代码发布在https://github.com/xiaxin1998/OD-Rec。</p>
<p><font color="orange">（主要问题就是缩小模型尺寸的情况下尽可能保留原有容量，通过放松约束+自监督的知识蒸馏框架）</font></p>
<h3 id="Single-shot-Embedding-Dimension-Search-in-Recommender-System"><a class="header-anchor" href="#Single-shot-Embedding-Dimension-Search-in-Recommender-System">¶</a>Single-shot Embedding Dimension Search in Recommender System  ***</h3>
<p>（推荐系统中的单次嵌入维度搜索）</p>
<p>Abstract：作为大多数现代<font color="red">深度</font>推荐系统的重要组成部分，<font color="red">特征嵌入</font>将<font color="red">高维稀疏</font>用户/项目特征映射到<font color="red">低维密集</font>嵌入。然而，这些嵌入<font color="red">通常被分配一个统一的维度</font>，存在以下问题：（1）高内存使用和计算成本。(2) 由于次优维度分配导致的次优性能。为了缓解上述问题，一些工作通过将其表述为<font color="red">超参数优化</font>或<font color="red">嵌入剪枝问题</font>来<font color="red">关注自动嵌入维度搜索</font>。但是，它们要么需要为超参数设计良好的搜索空间，要么需要耗时的优化过程。在本文中，我们提出了一种称为 SSEDS 的 Single-Shot Embedding Dimension Search 方法，它可以通过<font color="red">单次嵌入修剪操作</font>有效地<font color="red">为每个特征字段分配维度</font>，同时保持模型的推荐准确性。具体来说，它<font color="red">引入了一个标准</font>来识别每个特征字段的<font color="red">每个嵌入维度的重要性</font>。因此，SSEDS 可以根据相应的维度重要性排名和预定义的参数预算，通过<font color="red">显式减少冗余嵌入维度</font>来自动获得混合维度嵌入。此外，拟议的 SSEDS 与模型无关，这意味着它可以<font color="red">集成到不同的基础推荐模型</font>中。在 CTR（点击率）预测任务的两个广泛使用的公共数据集上进行了广泛的离线实验，结果表明，即使减少了 90% 的参数，SSEDS 仍然可以实现强大的推荐性能。此外，SSEDS还部署在微信订阅平台上，提供实用的推荐服务。为期7天的在线A/B测试结果表明，SSEDS能够显着提升在线推荐模型的性能，同时降低资源消耗。</p>
<p><font color="orange">（通过单次嵌入修剪为不同特征选择合适的维度，从而很大程度减少了模型的参数，引入了一个标准表示模型嵌入维度的重要性）</font></p>
<p><font color="red"><strong>可以发现，基本上对嵌入层的修改都是可以直接加在现有模型上进行优化的，目前已经看到三篇这种类型的文章了。</strong></font></p>
<h3 id="Forest-based-Deep-Recommender"><a class="header-anchor" href="#Forest-based-Deep-Recommender">¶</a>Forest-based Deep Recommender</h3>
<p>（基于森林的深度推荐系统）</p>
<p>随着深度学习技术的发展，深度推荐模型在推荐准确率方面也取得了显着提升。然而，由于实践中<font color="red">候选项目数量众多</font>，<font color="red">偏好计算成本高</font>，这些方法也存在推荐效率低下的问题。最近提出的基于树的深度推荐模型通过<font color="red">在推荐目标的指导下直接学习树结构</font>和表示来缓解这个问题。然而，这样的模型有两个缺点。首先，分层树中的最大堆假设，其中父节点的偏好应该是其子节点偏好中的最大值，在他们的二元分类目标中很难满足。其次，学习索引只包括一棵树。</p>
<p>为此，我们提出了一种基于深度森林的推荐器（简称 DeFoRec）来进行高效推荐。在 DeFoRec 中，保留训练过程中生成的所有树以形成森林。在学习每棵树的节点表示时，我们必须尽可能满足最大堆假设，并在训练阶段模仿树上的波束搜索行为。这是通过 DeFoRec 将训练任务视为同一级别树节点上的多分类来实现的。然而，树节点的数量随着级别呈指数增长，这使得我们可以在 sampled-softmax 技术的指导下训练偏好模型。实验是在真实世界的数据集上进行的，验证了所提出的偏好模型学习方法和树学习方法的有效性。</p>
<h3 id="Explainable-Fairness-in-Recommendation"><a class="header-anchor" href="#Explainable-Fairness-in-Recommendation">¶</a>Explainable Fairness in Recommendation</h3>
<p>（推荐中的可解释公平性）</p>
<p>Abstract：现有关于公平感知推荐的研究主要集中在<font color="red">公平的量化</font>和<font color="red">公平推荐模型</font>的开发上，两者都没有研究一个更实质性的问题——识别<font color="red">推荐中模型差异的根本原因</font>。此信息对于推荐系统设计者了解内在推荐机制并提供有关如何提高决策者模型公平性的见解至关重要。幸运的是，随着 Explainable AI 的快速发展，我们可以使用模型可解释性来深入了解模型（不）公平性。在本文中，我们研究了可解释的公平性问题，这<font color="red">有助于深入了解系统为何公平或不公平</font>，并以更明智和统一的方法指导公平推荐系统的设计。特别，我们关注具有特征感知推荐和<font color="red">暴露不公平</font>的常见设置，但所提出的可解释公平框架是通用的，可以应用于其他推荐设置和公平定义。我们提出了一个称为 CEF 的反事实可解释公平性框架，它生成关于<font color="red">模型公平性的解释</font>，可以在不显着损害性能的情况下提高公平性。CEF框架制定了一个优化问题来学习输入特征的“最小”变化，从而将推荐结果<font color="red">改变到一定程度的公平性</font>。基于每个特征的反事实推荐结果，我们根据fairness-utility trade-off 对所有基于特征的解释进行排序，并选择顶部的作为公平性解释。</p>
<h3 id="User-controllable-Recommendation-Against-font-color-red-Filter-font-Bubble"><a class="header-anchor" href="#User-controllable-Recommendation-Against-font-color-red-Filter-font-Bubble">¶</a>User-controllable Recommendation Against <font color="red">Filter</font> Bubble</h3>
<p>（针对过滤气泡的用户可控推荐）</p>
<p>Abstract：推荐系统通常面临过滤气泡的问题：基于用户特征和历史交互<font color="red">过度推荐同类项目</font>。过滤气泡会沿着反馈循环增长，无意中<font color="red">缩小用户兴趣范围</font>。现有工作通常通过<font color="red">结合准确性以外的目标（例如多样性和公平性</font>）来减轻过滤气泡。然而，它们通常会<font color="red">牺牲准确性</font>，损害模型保真度和用户体验。更糟糕的是，<font color="red">用户</font>不得不<font color="red">被动地接受</font>推荐策略并以具有高延迟的<font color="red">低效方式影响系统</font>，例如，不断提供反馈（例如，喜欢和不喜欢）直到系统识别出用户意图。</p>
<p>这项工作提出了一种称为<font color="red">用户可控推荐系统 </font>(UCRS) 的新推荐器原型，它使<font color="red">用户能够主动控制过滤气泡的缓解</font>。在功能上，1) UCRS 可以在用户深深陷入过滤气泡时<font color="red">提醒</font>用户。2) UCRS 支持<font color="red">四种控制命令</font>供用户在不同粒度上<font color="red">缓解气泡</font>。3) UCRS 可以响应控制并即时调整建议。<font color="red">调整的关键在于阻止过时的用户表征对推荐的影响</font>，其中包含与控制命令不一致的历史信息。因此，我们开发了一个<font color="red">因果关系增强的用户可控推理 (UCI) 框架</font>，它可以在推理阶段根据用户控制快速修改推荐，并利用反事实推理来减轻过时用户表示的影响。在三个数据集上的实验验证了 UCI 框架可以根据用户控制有效地推荐更多想要的项目，在<font color="red"><strong>准确性和多样性</strong></font>方面都表现出了良好的性能。</p>
<p><font color="orange">（过滤气泡问题、多样性牺牲公平性、用户被动低效反馈，提出<strong>用户可控</strong>的推荐系统、修改历史表征的影响）</font></p>
<h3 id="Unify-Local-and-Global-Information-for-Top-N-Recommendation"><a class="header-anchor" href="#Unify-Local-and-Global-Information-for-Top-N-Recommendation">¶</a>Unify Local and Global Information for Top-N Recommendation</h3>
<p>（统一本地和全局信息用于Top-N推荐）</p>
<p>Abstract：<font color="red">知识图谱 (KG)</font> 集成了复杂的信息并包含丰富的语义，被广泛认为是增强推荐系统的辅助信息。然而，大多数现有的基于知识图谱的方法都<font color="red">集中在对图中的结构信息进行编码</font>，而<font color="red">没有利用用户-项目交互数据中的协作信号</font>，这对于理解用户偏好很重要。因此，这些模型学习到的表示不足以表示推荐环境中用户和项目的语义信息。<font color="red">两种数据的结合</font>为解决这个问题提供了一个很好的机会，但它面临以下挑战：i）用户-项目交互数据中的内在关联很难从用户或项目的一侧捕获；ii) 捕获<font color="red">整个 KG 上的知识关联会引入噪声</font>并对推荐结果产生不同程度的影响；iii) 两种数据之间的<font color="red">语义鸿沟</font>难以消除。</p>
<p>为了解决这一研究差距，我们提出了一种名为 KADM 的新型二重奏表示学习框架，<font color="red">以融合局部信息（用户-项目交互数据）和全局信息（外部知识图）以进行前 N 推荐</font>，它由<font color="red">两个独立的子模型</font>组成楷模。一种通过使用知识感知共同注意机制发现局部信息中的内部相关性来学习局部表示，另一种通过使用关系感知注意网络对全局信息中的知识关联进行编码来学习全局表示。这两个子模型作为语义融合网络的一部分被<font color="red">联合训练</font>以计算用户偏好，这区分了两个子模型在特殊上下文下的贡献。我们对两个真实世界的数据集进行实验，评估表明，KADM 明显优于最先进的方法。进一步的消融研究证实，二重架构在推荐任务上的<font color="red">表现明显优于任一子模型</font>。</p>
<p><font color="orange">（目前专注于知识图谱的全局信息学习，但是缺乏对用户项目特征交互的关注，目前来看这两者有一定冲突、会互相影响，提出一个双重架构的模型，两个独立的子模型联合训练）</font></p>
<h3 id="Less-is-More-Reweighting-Important-Spectral-Graph-Features-for-Recommendation"><a class="header-anchor" href="#Less-is-More-Reweighting-Important-Spectral-Graph-Features-for-Recommendation">¶</a>Less is More: Reweighting Important Spectral Graph Features for Recommendation</h3>
<p>(为推荐重新赋权重要的光谱图特征)</p>
<p>Abstract：尽管图卷积网络 (GCN) 在推荐系统和协同过滤 (CF) 方面取得了巨大的成功，但它们，尤其是<font color="red">核心组件</font>（\textiti.e.，<font color="red">邻域聚合</font>）如何促进推荐的机制并没用被理想地研究。为了揭示 GCN 在推荐方面的有效性，我们首先从谱的角度对其进行分析，并发现了两个重要发现：（1）只有一小部分强调邻域平滑度和差异的谱图特征有助于推荐的准确性，而<font color="red">大多数图信息可以被视为甚至降低性能的噪声，</font>并且（2）邻域聚合的重复强调平滑的特征并以无效的方式滤除噪声信息。基于以上两个发现，我们提出了一种新的 GCN 学习方案，通过用简单而有效的<font color="red">图去噪编码器 (GDE) 代替邻域聚合来进行推荐</font>，它充当带通滤波器来捕获重要的图特征。我们表明，我们提出的方法减轻了过度平滑，并且与可以考虑任意跳邻域的无限层 GCN 相当。最后，我们在不引入额外复杂性的情况下动态调整负样本的梯度以加快模型训练。对五个真实世界数据集的广泛实验表明，我们提出的方法不仅优于最先进的技术，而且比 LightGCN 实现了 12 倍的加速。</p>
<h3 id="A-Review-aware-Graph-Contrastive-Learning-Framework-for-Recommendation"><a class="header-anchor" href="#A-Review-aware-Graph-Contrastive-Learning-Framework-for-Recommendation">¶</a>A Review-aware Graph Contrastive Learning Framework for Recommendation</h3>
<p>（一个用于推荐的评论感知图对比学习框架）</p>
<p>Abstract：大多数现代推荐系统通过两个部分预测用户的偏好：<font color="red">用户和项目嵌入学习</font>，然后是用户-项目<font color="red">交互建模</font>。通过利用伴随<font color="red">用户评分的辅助评论信息</font>，许多现有的基于评论的推荐模型<font color="red">通过</font>历史评论或在可用的用户-项目目标<font color="red">评论</font>的帮助下<font color="red">更好地建模</font>用户-项目交互来丰富用户/项目嵌入学习能力。尽管取得了重大进展，但我们认为当前基于评论的推荐解决方案存在两个缺点。首先，由于基于评论的推荐<font color="red">可以自然地形成一个用户-项目二分图</font>，具有来自相应用户-项目评论的边缘特征，如何更好地利用这种独特的图结构进行推荐？第二，虽然当前大多数模型的用户行为有限，但我们能否利用<font color="red">评论感知图中独特的自我监督信号</font>来更好地指导两个推荐组件？为此，在本文中，我们提出了一种新颖的<font color="red">评论感知图对比学习 (RGCL) 框架</font>，用于基于评论的推荐。具体来说，我们首先构建一个具有<font color="red">来自评论的特征增强边的评论感知用户-项目图</font>，其中每个边缘特征由<font color="red">用户-项目评分和相应的评论语义组成</font>。这个带有<font color="red">特征增强边的图</font>可以帮助仔细学习每个邻居节点的权重，用于用户和项目表示学习。之后，我们设计了两个额外的对比学习任务（即 Node Discrimination and Edge Discrimination）为推荐过程中的两个组件提供自监督信号。最后，对五个基准数据集的广泛实验证明了我们提出的 RGCL 与最先进的基线相比的优越性。</p>
<p><font color="orange">（用户-项目二分图+评论感知的特征增强边+对比学习）</font></p>
<h3 id="Are-Graph-Augmentations-Necessary-Simple-Graph-Contrastive-Learning-for-Recommendation"><a class="header-anchor" href="#Are-Graph-Augmentations-Necessary-Simple-Graph-Contrastive-Learning-for-Recommendation">¶</a>Are Graph Augmentations Necessary?: Simple Graph Contrastive Learning for Recommendation</h3>
<p>（图扩充是否必要？：用于推荐的简单图对比学习）</p>
<p>Abstract：对比学习 (CL) 最近在推荐领域激发了一系列富有成果的研究，因为它<font color="red">从原始数据中提取自我监督信号的能力</font>与推荐系统解决<font color="red">数据稀疏性问题的需求</font>完全一致。基于 CL 的推荐模型的典型流程是<font color="red">首先使用结构扰动扩充用户-项目二部图</font>，然后最大化不同图扩充之间的节点表示一致性。尽管这种范式被证明是有效的，但性能提升的基础仍然是个谜。在本文中，我们首先通过实验揭示，在基于 CL 的推荐模型中，<font color="red">CL 通过学习更统一的用户/项目表示来运作</font>，这可以隐含地减轻流行偏差。同时，我们揭示了<font color="red">图形扩充</font>，曾经被认为是必要的，<font color="red">只是起到了微不足道的作用</font>。基于这一发现，我们提出了一种<font color="red">简单的 CL 方法</font>，该方法丢弃图形扩充，而是<font color="red">向嵌入空间添加均匀噪声以创建对比视图</font>。对三个基准数据集的综合实验研究表明，虽然它看起来非常简单，但所提出的方法可以平滑地调整学习表示的均匀性，并且在推荐准确性和训练效率方面比基于图增强的方法具有明显的优势。代码发布在 <a href="https://github.com/Coder-Yu/QRec%E3%80%82">https://github.com/Coder-Yu/QRec。</a></p>
<p><font color="orange">（对比学习通常被认为和图扩充相关，但是实际并不相关，因此丢弃图形扩充）</font></p>
<h3 id="AutoLossGen-Automatic-Loss-Function-Generation-for-Recommender-Systems"><a class="header-anchor" href="#AutoLossGen-Automatic-Loss-Function-Generation-for-Recommender-Systems">¶</a>AutoLossGen: Automatic Loss Function Generation for Recommender Systems</h3>
<p>（推荐系统的自动损失函数生成）</p>
<p>Abstract：在推荐系统中，损失函数的选择至关重要，因为良好的损失可能会显着提高模型性能。然而，由于问题的复杂性，<font color="red">手动设计一个好的损失是一个很大的挑战</font>。以前的大部分工作都集中在手工制作的损失函数上，这需要大量的专业知识和人力。在本文中，受最近<font color="red">自动化机器学习发展</font>的启发，我们提出了一种<font color="red">自动损失函数生成框架 AutoLossGen</font>，它能够直接从基本数学运算符构建生成损失函数，而<font color="red">无需先验损失结构知识</font>。更具体地说，我们开发了一个由<font color="red">强化学习驱动</font>的控制器模型来生成损失函数，并<font color="red">制定迭代和交替优化计划</font>来更新控制器模型和推荐模型的参数。推荐系统中自动损失生成的一个挑战是推荐<font color="red">数据集的极度稀疏性</font>，这导致了损失生成和搜索的稀疏奖励问题。为了解决这个问题，我们进一步开发了一种<font color="red">奖励过滤机制</font>，以有效地产生损失。实验结果表明，我们的框架设法为不同的推荐模型和数据集创建定制的损失函数，并且生成的损失比常用的基线损失提供更好的推荐性能。此外，<font color="red">大部分产生的损失是可转移</font>的，即基于一个模型和数据集产生的损失也适用于另一个模型或数据集。</p>
<h1>对比学习专题</h1>
<p>（感觉数据/特征增强似乎是其中一个很常见的技术）</p>
<h2 id="SIGIR2022"><a class="header-anchor" href="#SIGIR2022">¶</a>SIGIR2022</h2>
<h3 id="Hypergraph-Contrastive-Collaborative-Filtering"><a class="header-anchor" href="#Hypergraph-Contrastive-Collaborative-Filtering">¶</a>Hypergraph Contrastive Collaborative Filtering</h3>
<p>（超图对比协同过滤）</p>
<p>Abstract：<font color="red">协同过滤 (CF) </font>已成为将用户和项目参数化到潜在表示空间的基本范例，以及来自交互数据的相关模式。在各种 CF 技术中，基于 GNN 的推荐系统（例如 PinSage 和 LightGCN）的开发提供了最先进的性能。然而，现有解决方案尚未很好地探索两个关键挑战：i）更深层次的基于图的 CF 架构的<font color="red">过度平滑效应</font>可能导致无法区分的用户表示和推荐结果的退化。ii) 监督信号（即用户-项目交互）在现实中通常稀缺且分布不均，这限制了 CF 范式的表示能力。为了应对这些挑战，<font color="red">我们提出了一种新的自监督推荐框架超图对比协同过滤（HCCF）</font>，以<font color="red"><strong>通过超图增强的跨视图对比学习架构共同捕获本地和全球协作关系</strong></font>。特别是，设计的超图结构学习增强了基于 GNN 的 CF 范式的辨别能力，<font color="red">全面捕获用户之间复杂的高阶依赖关系</font>。此外，我们的 HCCF 模型有效地将超图结构编码与自我监督学习相结合，以基于超图自判别来增强推荐系统的表示质量。在三个基准数据集上进行的大量实验证明了我们的模型优于各种最先进的推荐方法，以及针对稀疏用户交互数据的鲁棒性。实现代码可在 <a href="https://github.com/akaxlh/HCCF">https://github.com/akaxlh/HCCF</a> 获得。</p>
<h3 id="A-Review-aware-Graph-Contrastive-Learning-Framework-for-Recommendation-v2"><a class="header-anchor" href="#A-Review-aware-Graph-Contrastive-Learning-Framework-for-Recommendation-v2">¶</a>A Review-aware Graph Contrastive Learning Framework for Recommendation</h3>
<p>（一个用于推荐的评论感知图对比学习框架）</p>
<p>Abstract：大多数现代推荐系统通过两个部分预测用户的偏好：<font color="red">用户和项目嵌入学习</font>，然后是<font color="red">用户-项目交互建模</font>。通过利用伴随用户评分的<font color="red">辅助评论信息</font>，许多现有的基于评论的推荐模型通过历史评论来<font color="red">丰富用户/项目嵌入学习能力</font>或在可用的用户-项目目标评论的帮助下<font color="red">更好地建模用户-项目交互</font>。尽管取得了重大进展，但我们认为当前基于评论的推荐解决方案存在两个缺点。首先，由于基于评论的推荐<font color="red">可以自然地形成一个用户-项目二分图</font>，具有来自相应<font color="red">用户-项目评论的边缘特征（edge features）</font>，如何更好地利用这种独特的图结构进行推荐？第二，虽然当前大多数模型的用户行为有限，但我们能否利用<font color="red">评论感知图中独特的自我监督信号来更好地指导两个推荐组件</font>？为此，在本文中，我们提出了一种新颖的<font color="red">评论感知图对比学习 (RGCL) 框架</font>，用于基于评论的推荐。具体来说，我们<font color="red">首先构建一个</font>具有来自评论的特征增强边的<font color="red">评论感知用户-项目图</font>，其中每个边缘特征由用户-项目评分和相应的评论语义组成。这个带有特征增强边的图可以帮助仔细学习每个邻居节点的权重，用于用户和项目表示学习。之后，我们设计了两个额外的对比学习任务（即 Node Discrimination and Edge Discrimination）为推荐过程中的两个组件提供自监督信号。最后，对五个基准数据集的广泛实验证明了我们提出的 RGCL 与最先进的基线相比的优越性。</p>
<h3 id="Are-Graph-Augmentations-Necessary-Simple-Graph-Contrastive-Learning-for-Recommendation-v2"><a class="header-anchor" href="#Are-Graph-Augmentations-Necessary-Simple-Graph-Contrastive-Learning-for-Recommendation-v2">¶</a>Are Graph Augmentations Necessary?: Simple Graph Contrastive Learning for Recommendation</h3>
<p>（图扩充是否必要？：用于推荐的简单图对比学习）</p>
<p>Abstract：对比学习 (CL) 最近在推荐领域激发了一系列富有成果的研究，因为<font color="red">它从原始数据中提取自我监督信号的能力与推荐系统解决数据稀疏性问题的需求完全一致。</font>基于 CL 的推荐模型的典型流程是<font color="red">首先使用结构扰动扩充用户-项目二部图</font>，然后<font color="red">最大化不同图扩充之间的节点表示一致性</font>。尽管这种范式被证明是有效的，但性能提升的基础仍然是个谜。在本文中，我们首先通过实验揭示，在基于 CL 的推荐模型中，<font color="red">CL 通过学习更统一的用户/项目表示来运作，这可以隐含地减轻流行偏差</font>。同时，我们揭示了<font color="red">图形扩充</font>，曾经被认为是必要的，<font color="red">只是起到了微不足道的作用</font>。基于这一发现，我们提出了一种简单的 CL 方法，该方法<font color="red">丢弃图形扩充</font>，而是向嵌入空间添加均匀噪声以创建对比视图。对三个基准数据集的综合实验研究表明，虽然它看起来非常简单，但所提出的方法可以平滑地调整学习表示的均匀性，并且在推荐准确性和训练效率方面比基于图增强的方法具有明显的优势。代码发布在 <a href="https://github.com/Coder-Yu/QRec%E3%80%82">https://github.com/Coder-Yu/QRec。</a></p>
<h3 id="Multi-level-Cross-view-Contrastive-Learning-for-Knowledge-aware-Recommender-System"><a class="header-anchor" href="#Multi-level-Cross-view-Contrastive-Learning-for-Knowledge-aware-Recommender-System">¶</a>Multi-level Cross-view Contrastive Learning for Knowledge-aware Recommender System</h3>
<p>（知识感知推荐系统的多层交叉试图对比学习）</p>
<p>Abstract：<font color="red">知识图谱（KG）</font>在推荐系统中扮演着越来越重要的角色。最近，基于图神经网络（GNNs）的模型逐渐成为知识感知推荐（KGR）的主题。然而，基于 GNN 的 KGR 模型<font color="red">存在一个天然的缺陷，即稀疏监督信号问题</font>，这可能使其实际性能有所下降。受近期<font color="red">对比学习在从数据本身挖掘监督信号方面取得的成功</font>的启发，在本文中，我们专注于<font color="red">探索 KG 感知推荐中的对比学习</font>，并提出了一种新的<font color="red">多层次跨视图对比学习机制</font>，称为 MCCLK。与传统的对比学习方法不同，<font color="red">传统的对比学习方法</font>通过统一的数据增强方案（如损坏或丢弃）生成两个图视图，我们综合考虑了 KG 感知推荐的三种不同图视图，<font color="red">包括全局级结构视图、局部级协作和语义视图</font>。具体来说，我们将用户-项目图视为协作视图，将项目-实体图视为语义视图，将用户-项目-实体图视为结构视图。因此，<font color="red">MCCLK 在本地和全局级别的三个视图中执行对比学习，以自我监督的方式挖掘综合图形特征和结构信息。</font>此外，在语义视图中，提出了一种k-最近邻（k NN）项-项语义图构建模块，以捕获先前工作通常忽略的重要项-项语义关系。在三个基准数据集上进行的大量实验表明，我们提出的方法优于现有技术。这些实现可在以下位置获得：<a href="https://github.com/CCIIPLab/MCCLK%E3%80%82">https://github.com/CCIIPLab/MCCLK。</a></p>
<h3 id="Knowledge-Graph-Contrastive-Learning-for-Recommendation"><a class="header-anchor" href="#Knowledge-Graph-Contrastive-Learning-for-Recommendation">¶</a>Knowledge Graph Contrastive Learning for Recommendation</h3>
<p>（用于推荐的知识图对比学习）</p>
<p>Abstract：知识图 (KG) 已被用作有用的辅助信息来提高推荐质量。在这些推荐系统中，知识图谱信息通常<font color="red">包含丰富的事实</font>和<font color="red">项目之间固有的语义相关性</font>。然而，此类方法的成功依赖于高质量的知识图谱，并且可能无法学习具有两个挑战的质量表示：i）<font color="red">实体的长尾分布导致 KG 增强项目表示的<strong>监督信号稀疏</strong></font>；ii) 真实世界的知识图通常是嘈杂的，并且包含项目和实体之间<font color="red">与主题无关的连接</font>。这种 KG 稀疏性和噪声使得项目-实体依赖关系偏离反映其真实特征，这显著放大了噪声效应并阻碍了用户偏好的准确表示。</p>
<p>为了填补这一研究空白，我们设计了一个<font color="red">通用的知识图谱对比学习框架 (KGCL)</font>，它可以减轻知识图谱增强推荐系统的信息噪声。具体来说，我们提出了一种<font color="red">知识图增强模式来抑制信息聚合中的 KG 噪声</font>，并为项目推导出更稳健的知识感知表示。此外，我们利用来自 KG 增强过程的额外监督信号来指导交叉视图对比学习范式，在梯度下降中为无偏见的用户-项目交互提供更大的作用，并进一步抑制噪声。在三个公共数据集上进行的广泛实验证明了我们的 KGCL 优于最先进技术的一贯优势。KGCL 还在具有稀疏用户-项目交互的推荐场景中实现了强大的性能，长尾和嘈杂的 KG 实体。我们的实现代码可在 <a href="https://github.com/yuh-yang/KGCL-SIGIR22">https://github.com/yuh-yang/KGCL-SIGIR22</a> 获得。</p>
<h2 id="KDD2022"><a class="header-anchor" href="#KDD2022">¶</a>KDD2022</h2>
<h3 id="CrossCBR-Cross-view-Contrastive-Learning-for-Bundle-Recommendation"><a class="header-anchor" href="#CrossCBR-Cross-view-Contrastive-Learning-for-Bundle-Recommendation">¶</a>CrossCBR: Cross-view Contrastive Learning for Bundle Recommendation</h3>
<p>（用于捆绑推荐的跨视图对比学习）</p>
<p>Abstract：捆绑推荐旨在向用户推荐一组相关的物品，能够<font color="red">一站式地方便地满足用户的各种需求</font>。最近的方法通常利用<font color="red">用户-捆绑</font>和<font color="red">用户-项目交互信息</font>来获得用户和捆绑的信息表示，分别对应于捆绑视图和项目视图。然而，他们要么使用没有差异化的统一视图，要么松散地结合两个独立视图的预测，而<font color="red">忽略了两个视图表示之间至关重要的协作关联。</font></p>
<p>在这项工作中，我们建议<font color="red">通过跨视图对比学习来模拟两种不同视图之间的合作关联</font>。通过鼓励两个单独学习的视图对齐，每个视图都可以从另一个视图中提取互补信息，<font color="red">从而实现相互增强</font>。此外，通过扩大不同用户/捆绑的分散度，增强了表示的自辨别能力。在三个公共数据集上进行的大量实验表明，我们的方法大大优于 SOTA 基线。同时，我们的方法需要最少的三组嵌入（用户、捆绑和项目）参数，并且由于更简洁的图结构和图学习模块，计算成本大大降低。此外，各种消融和模型研究揭开了工作机制的神秘面纱并证明了我们的假设。代码和数据集可在 <a href="https://github.com/mysbupt/CrossCBR">https://github.com/mysbupt/CrossCBR</a> 获得。</p>
<h3 id="COSTA-Covariance-Preserving-Feature-Augmentation-for-Graph-Contrastive-Learning"><a class="header-anchor" href="#COSTA-Covariance-Preserving-Feature-Augmentation-for-Graph-Contrastive-Learning">¶</a>COSTA: Covariance-Preserving Feature Augmentation for Graph Contrastive Learning</h3>
<p>（图对比学习的协方差保持特征增强）</p>
<p>Abstract：<font color="red">图对比学习 (GCL) </font>改进了图表示学习，导致各种下游任务的 SOTA。<font color="red">图扩充步骤是 GCL 的一个重要但很少被研究的步骤</font>。在本文中，我们表明通过<font color="red">图扩充获得的节点嵌入是高度有偏的</font>，在一定程度上限制了对比模型从学习下游任务的判别特征。因此，我们不是研究输入空间中的图扩充，而是建议对隐藏的特征增强。受所谓的矩阵草图的启发，我们提出了 COSTA，这是一种用于 GCL 的新型协方差保留<font color="red">特征空间增强框架</font>，它通过维护原始特征的“良好草图”来<font color="red">生成增强特征</font>。为了突出使用 COSTA 进行特征增强的优越性，我们研究了一种节省内存和计算的单视图设置（除了多视图设置）。我们表明，使用 COSTA 进行的特征扩充与基于图扩充的模型相比取得了可比/更好的结果。</p>
<h3 id="Contrastive-Cross-domain-Recommendation-in-Matching"><a class="header-anchor" href="#Contrastive-Cross-domain-Recommendation-in-Matching">¶</a>Contrastive Cross-domain Recommendation in Matching</h3>
<p>（匹配中的对比跨域推荐）</p>
<p>Abstract：<font color="red">跨域推荐（CDR）旨在借助源域在目标域中提供更好的推荐结果</font>，在现实系统中被广泛使用和探索。然而，<font color="red">匹配（即候选生成）模块中的 CDR 在表示学习和知识迁移中都与<strong>数据稀疏性</strong>和<strong>流行偏差</strong>问题作斗争</font>。在这项工作中，我们提出了一种用于 CDR 匹配的新型对比跨域推荐 (CCDR) 框架。具体来说，我们构建了一个巨大的多元化偏好网络来捕获反映用户不同兴趣的多种信息，并设计了<font color="red">一个域内对比学习（intra-CL）</font>和<font color="red">三个域间对比学习（inter-CL）</font>任务以更好地表示学习和知识转移。intra-CL 通过图形增强在目标域内实现更有效和平衡的训练，而 inter-CL 从用户、分类和邻居方面构建不同类型的跨域交互。在实验中，CCDR 在现实世界系统中的离线和在线评估上取得了显着改进。目前，我们已经在微信头条上部署了CCDR，影响了很多用户。源代码在 <a href="https://github.com/lqfarmer/CCDR%E3%80%82">https://github.com/lqfarmer/CCDR。</a></p>
<h2 id="WSDM2022"><a class="header-anchor" href="#WSDM2022">¶</a>WSDM2022</h2>
<h3 id="Contrastive-Learning-for-Representation-Degeneration-Problem-in-Sequential-Recommendation"><a class="header-anchor" href="#Contrastive-Learning-for-Representation-Degeneration-Problem-in-Sequential-Recommendation">¶</a>Contrastive Learning for Representation Degeneration Problem in Sequential Recommendation</h3>
<p>（顺序推荐中表征退化问题的对比学习）</p>
<p>Abstract：<font color="red">Transformer 和 BERT</font> 等顺序深度学习模型的最新进展极大地促进了顺序推荐。然而，根据我们的研究，这些模型生成的<font color="red">项目嵌入的分布倾向于退化为各向异性形状</font>，<font color="red">这可能导致嵌入之间的语义相似度很高</font>。在本文中，首先提供了这种表示<font color="red">退化问题的实证和理论研究</font>，在此基础上提出了一种新的<font color="red">推荐模型 DuoRec </font>来改善项目嵌入分布。具体来说，鉴于对比学习的均匀性，为 DuoRec 设计了<font color="red">对比正则化以重塑序列表示的分布</font>。鉴于推荐任务是<font color="red">通过点积测量同一空间中序列表示和项目嵌入之间的相似性</font>来执行的约定，正则化可以隐式应用于项目嵌入分布。<font color="red">现有的对比学习方法主要依赖于通过项目裁剪、屏蔽或重新排序对用户-项目交互序列进行数据级增强</font>，并且很难提供语义一致的增强样本。在 DuoRec 中，<font color="red">提出了一种基于 Dropout 的模型级增强，以实现更好的语义保</font><font color="red">留</font>。此外，还开发了一种新的抽样策略，其中具有相同目标项的序列被选为硬阳性样本。对五个数据集进行的大量实验表明，与基线方法相比，所提出的 DuoRec 模型具有优越的性能。学习表示的可视化结果证实 DuoRec 可以在很大程度上缓解表示退化问题。</p>
<h3 id="Contrastive-Meta-Learning-with-Behavior-Multiplicity-for-Recommendation"><a class="header-anchor" href="#Contrastive-Meta-Learning-with-Behavior-Multiplicity-for-Recommendation">¶</a>Contrastive Meta Learning with Behavior Multiplicity for Recommendation</h3>
<p>Abstract：一个消息灵通的推荐框架不仅可以<font color="red">帮助用户识别他们感兴趣的项目</font>，而且有利于各种在线平台（例如电子商务、社交媒体）的收入。传统的推荐模型<font color="red">通常假设用户和物品之间只存在单一类型的交互</font>，而<font color="red">无法</font>从多类型的用户行为数据（例如页面浏览、添加到收藏夹和购买）中<font color="red">对多重用户-物品关系进行建模</font>。虽然最近的一些研究建议捕获不同类型行为之间的依赖关系，但很少探索两个重要的挑战：i) <font color="red">处理目标行为（例如，购买）下的稀疏监督信号</font>。ii) 通过定制的依赖建模来捕捉个性化的多行为模式。为了应对上述挑战，我们设计了一个新的模型 CML，<font color="red">对比元学习 (CML)</font>，为不同用户维护专用的跨类型行为依赖性。特别是，我们<font color="red">提出了一个多行为对比学习框架</font>，<font color="red">通过构建的对比损失来提炼跨不同类型行为的可迁移知识</font>。此外，为了捕捉多样化的多行为模式，我们设计了一个对比元网络来为不同用户编码定制的行为异质性。对三个真实世界数据集的广泛实验表明，我们的方法始终优于各种最先进的推荐方法。我们的实证研究进一步表明，对比元学习范式为捕捉推荐中的行为多样性提供了巨大的潜力。我们在以下位置发布了我们的模型实现：<a href="https://github.com/weiwei1206/CML.git%E3%80%82">https://github.com/weiwei1206/CML.git。</a></p>
<h3 id="Bringing-Your-Own-View-Graph-Contrastive-Learning-without-Prefabricated-Data-Augmentations"><a class="header-anchor" href="#Bringing-Your-Own-View-Graph-Contrastive-Learning-without-Prefabricated-Data-Augmentations">¶</a>Bringing Your Own View: Graph Contrastive Learning without Prefabricated Data Augmentations</h3>
<p>（提出自己的观点：无需预制数据增强的图形对比学习）</p>
<p>Abstract：自我监督最近在其图形学习的新领域蓬勃发展。它促进了对下游任务有益的图形表示；但它的成功可能<font color="red">取决于手工艺领域的知识或通常代价高昂的反复试验</font>。即使是<font color="red">它最先进的代表，图对比学习 (GraphCL)</font>，也不能完全摆脱这些需求，因为 GraphCL 使用预制的先验，这反映在图数据增强的临时手动选择上。我们的工作旨在通过回答以下问题来<font color="red">推进 GraphCL</font>：如何表示图增强视图的空间？可以依靠什么原则来学习该空间的先验知识？可以构建什么框架来学习先验与对比学习？因此，我们扩展了增强集中的预制离散先验，到图形生成器参数空间中的可学习连续先验，假设图形先验本身，类似于图像流形的概念，可以通过数据生成来学习。此外，为了形成对比视图而不因先验可学习性而崩溃为琐碎的解决方案，我们利用了信息最小化 (InfoMin) 和信息瓶颈 (InfoBN) 的原则来规范学习的先验。最终，对比学习、InfoMin和InfoBN有机地融入到一个双层优化框架中。我们的原则性和自动化方法已被证明在小图基准上与最先进的图自监督方法（包括 GraphCL）相比具有竞争力；并在大规模图表上表现出更好的普适性，无需借助人类专业知识或下游验证。我们的代码公开发布在 <a href="https://github.com/Shen-Lab/GraphCL_Automated%E3%80%82">https://github.com/Shen-Lab/GraphCL_Automated。</a></p>
<h3 id="C²-CRS-Coarse-to-Fine-Contrastive-Learning-for-Conversational-Recommender-System"><a class="header-anchor" href="#C²-CRS-Coarse-to-Fine-Contrastive-Learning-for-Conversational-Recommender-System">¶</a>C²-CRS: Coarse-to-Fine Contrastive Learning for Conversational Recommender System</h3>
<p>Abstract：会话推荐系统（CRS）旨在通过自然语言对话向用户推荐合适的项目。为了开发有效的 CRS，一个主要的技术问题是<font color="red">如何从非常有限的对话上下文中准确推断用户偏好</font>。为了解决这个问题，一个有前途的解决方案是<font color="red">合并外部数据以丰富上下文信息</font>。然而，之前的研究主要集中在为某些特定类型的外部数据设计融合模型，这对于建模和利用多类型外部数据并不通用。<font color="red">为了有效地利用多类型外部数据</font>，我们提出了一种新颖的<font color="red">从粗到精的对比学习框架</font>，以改进 CRS 的数据语义融合。在我们的方法中，我们首先从不同的数据信号中提取和表示多粒度语义单元，然后以由粗到细的方式对齐关联的多类型语义单元。为了实现这个框架，我们设计了用于建模用户偏好的粗粒度和细粒度过程，其中前者侧重于更一般、粗粒度的语义融合，后者侧重于更具体、细粒度的语义融合。这种方法可以扩展到合并更多种类的外部数据。对两个公共 CRS 数据集的大量实验证明了我们的方法在推荐和对话任务中的有效性。细粒度语义融合。这种方法可以扩展到合并更多种类的外部数据。</p>
<p><font color="orange">对比学习、图学习、自监督学习热度比较高</font></p>
]]></content>
      <categories>
        <category>科研</category>
      </categories>
      <tags>
        <tag>科研实习</tag>
        <tag>推荐系统</tag>
        <tag>论文阅读</tag>
      </tags>
  </entry>
  <entry>
    <title>用代理反而不能克隆GitHub的资源？</title>
    <url>/posts/4034371785.html</url>
    <content><![CDATA[<p>今天想给博客换个主题，于是开始操作。</p>
<p>第一步获取主题资源就卡了。因为各类主题的资源基本都在Github上，而GitHub又是国外的网站，因此我就挂上了VPN。命令行输入</p>
<figure class="highlight crmsh"><table><tbody><tr><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">-b</span> <span class="keyword">master</span> <span class="title">https</span>://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></tbody></table></figure>
<p>结果出bug了，几次都报错：</p>
<figure class="highlight pgsql"><table><tbody><tr><td class="code"><pre><span class="line">fatal: unable <span class="keyword">to</span> <span class="keyword">access</span> <span class="string">'https://github.com/jerryc127/hexo-theme-butterfly.git/'</span>: OpenSSL SSL_read: <span class="keyword">Connection</span> was <span class="keyword">reset</span>, errno <span class="number">10054</span></span><br></pre></td></tr></tbody></table></figure>
<p>难崩，遇事不决，CSDN之。</p>
<p>看到了一些解决方案。</p>
<p>有这样说的：</p>
<p><img src="/posts/4034371785/i1.png" alt="image1"></p>
<p>也有这样说的：</p>
<p><img src="/posts/4034371785/i2.png" alt="image2"></p>
<p>这些方法我都试了试，没什么用。</p>
<p>到更新git的步骤，我发现更新git也获取不到网址了，觉得也许又是代理的问题。于是关了VPN，就一切正常了。</p>
<p>暂时想不通为什么开着VPN获取不到Github的资源，关了就可以。也许是端口问题？</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>代理（科学上网）</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>欢迎来到我的博客</title>
    <url>/posts/2991647163.html</url>
    <content><![CDATA[<h1>欢迎来到我的博客！</h1>
<p>​		你好呀，我的朋友，欢迎来到我的博客！</p>
<p>​		想自己写博客已经很久了，一方面觉得把自己平时学习的心得、笔记梳理记录下来，对自己的学习大有裨益（对于一个准程序猿来说，拥有自己的学习、技术博客似乎十分必要）；另一方面是受樊一鸣同学（个人博客地址<strong>fanyiming.life</strong>)的影响，在一个属于自己的天地当中记录下自己平时的感受，对自己的所作所为复盘，多年后看来也是一笔宝贵的财富。</p>
<p>​		虽然想写博客的想法比较强烈，但是似乎也没有战胜自己的懒惰。学期内总感觉学业繁重，忙活完课内学习似乎不再有精力探索个人博客的搭建；放假之后又打不起学习的劲头。本学期看了一鸣哥的博客之后感触颇深，现在又是暑期学校（要保持学习的状态却又不像学期当中那么忙），值此机会就开始了个人博客的搭建之旅。</p>
<p>​		创建个人博客的原因如上所述有学习、生活两方面，因此关于博客的开放性也有两种态度。于生活的角度，想记录自己的心里的各种想法和生活点滴，以我的性格自然是不希望有过多的人看到，更希望这是我自己的一片小天地；于学习的角度，作为程序猿，我认为应该有开源的观念，学习的技术应该分享给大家，同时以后参加面试，个人技术博客自然是要给”老板“看的，这又必须保持博客的开放性。多少纠结了一段时间。</p>
<p>​		最后想到了两全的解决方案，这个博客作为个人的隐私空间，学习和生活中的内容都在此记录，再把学习帖copy到其他博客网站上即可，两全其美。</p>
<p>​		所以，我的朋友，你能来到我的小天地，实在说明我很信任你，愿意向你敞开胸怀。</p>
<p>​		等我正式建立起了我的学习博客，再把地址放在这里吧。</p>
<p>​		希望博客的搭建能促使我的生活更加规律、向上吧。</p>
<p>​		<strong>欢迎常来！</strong></p>
]]></content>
      <categories>
        <category>漫无目的地思考</category>
      </categories>
  </entry>
  <entry>
    <title>添加代码块一键复制功能</title>
    <url>/posts/909382367.html</url>
    <content><![CDATA[<p>刚添加了代码块复制功能，进一步实现了博客的开源。</p>
<p><img src="/posts/909382367/%E6%95%88%E6%9E%9C%E5%B1%95%E7%A4%BA.png" alt="image"></p>
<p>右上角图片即一键复制代码。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>科目二满分通过了耶！</title>
    <url>/posts/2559015061.html</url>
    <content><![CDATA[<p>刚才数了一下科目二的练习时间，大概是15天。说不长也真不长，但是其实到最后几次练车就已经很熟练了，更多的就是为了确保稳过，所以理论上还是可以压缩的。侧方停车，坡道定点停车与起步，曲线行驶，直角转弯，倒车入库，对我来说侧方停车和倒车入库最简单，直角转弯会有些担心，曲线行驶还好，半坡最担心，主要是怕停车位置过于离谱。</p>
<p>其实科目二考试前还是蛮紧张的。紧张的原因算起来是四方面吧，最重要的是时间紧迫：我希望这个暑假拿到驾驶证，这样学车不用断开，寒假去上海也不用急着回来，如果想要暑假拿证，就一次考试都不能挂（同行的人挂了，他月底开学，只能争取假期考完科目二了，ps：挂科要<strong>十天之后才能预约</strong>）；其次是费用，每次去考试都得花几百块钱，我舍不得这个钱；再次就是实在不想再去训练场练科目二了，实际上没什么意义，而且耽误学习；最后就是为了自己的小面子，既然是考试嘛，就不能比别人差。所以考前稍微有点紧张，记得有时候做梦都在练科目二。</p>
<p>考前模拟交了260，总共就练了两把+半坡。前两把基本是满分过，教练就说让我别练了，练多了反而不好，所以主要是另外三个人练。自己也蛮有信心的，但是也会担心自己不练最后就我挂了。去沙县之前挺紧张的，去了沙县反而不紧张了。下午睡睡觉，学习一下。晚上约小魏出去散步。第二天早上自己慢悠悠地走去李记吃个早饭，再慢悠悠地走回去，感觉沙县我也熟悉了。</p>
<p>接着就是去候场考试了，等待的过程挺煎熬的。考试车是8号，起身的时候莫名产生了一种我肯定会过的自信（8&amp;24的魅力）。等到车来时，车停在了疯狂浇水的地方，前一个人很有礼貌说”不好意思，把车停在这里“。上车也没用到身份证，直接识别人脸了。调整了座椅，后视镜。用雨刮器刷掉水。这时候就是忘记了检查仪表盘和空调，空调呼呼作响，但是不热，让我产生了是驾校的风扇的错觉。</p>
<p>第一把开始考试，这一把不紧张。发现雨刮器的点没有，本来教练交代了这样的情况对喷水口，但是我太自以为是了，觉得新雨刮器上的那个点差不多，那个更容易观察。侧方停车没问题。结果坡道的时候，由于那个点偏左，我用那个点对中线，自然车身偏右，上坡的时候就压线了，不及格。完全没想到会这样挂。当时整个人就懵了，这时候半坡起步车动力就不足了，我以为是我自己的问题，实际上是空调没关。上去开了个曲线行驶和直角转弯保安就让我下去重考了。下去的时候看到黄星晨开完坡道上去，看起来很顺利（但是没想到两次都挂在曲线行驶上）。这时候心态有点小崩。不过还好及时意识到是点对错了，马上改成对喷水口。（还好我这么想了，如果以为是自己的问题，下一把必定挂）。</p>
<p>第二把看到侯晓敏也重考了，我就跟在她后面，感觉安心一点🤣。这一把整个人都有点慌张、懵逼。很害怕再挂了。侧方停车的时候，太早向左打死，距离左边线太近了，当时特别怕压线。一慌张，出侧方的时候差点忘记打转向灯了，还好及时醒悟。侧方停车顺利通过。接着开始半坡，对准点之后，旗杆也对得很准，没扣分。懵逼之下手刹之后回了空挡，模拟的时候这么干了，机器没扣分，但是教练说会不及格，我就一直交代自己别犯这个错误，但是当时人懵了，所以忘了。瞬间大脑一片空白，以为要挂了，但是没声音，看来是不扣分，我赶紧挂一挡，生怕机器说不合格。然后起步，一直怕超时，还好顺利起步了，但是因为开着空调，车动力不足，勉勉强强冲上坡，运气不好可能又挂了。上了坡，我就长舒一口气。接着曲线行驶顺利过。直角转弯差点压角了，险之又险。之后来到倒车入库，我很有信心。去了4号库，一右倒库起初一切顺利，但是停车位置有点偏后，也怕压线。左倒库一切正常。如释重负，开心地开走了。看见侯晓敏刚好倒完库出来，看来也过了，我高兴地朝她按了一下喇叭，不过她没发现。接着就是签字确认和离场了，我们都因为险过很开心。</p>
<p>平时练车和模拟都没碰上一点波折，没想到一次科目二碰到这么多惊险的点，不过最后满分通过还是很开心的。不辜负教练对我的信心，也没给自己丢脸。</p>
<p>感觉还是取决于平时吧，能满分通过一方面是连的多，另一方面是我平时练车就自己给自己模拟，每一趟都当考试来开。所以考试懵逼状态可以凭着肌肉记忆满分。我觉得自己很幸运，车的动力好，开着空调都冲上坡了，太感激了，不然后果太严重了。不过也许运气好就碰上正常雨刮器的车了呢，不过动力还是不足。</p>
<p>没想到自己第二把在紧张状态下能把离合器刹车踩得那么准，停车位置一分没扣，嘻嘻😀。</p>
<p>希望科目三继续一把过~</p>
]]></content>
      <categories>
        <category>生活的点点滴滴</category>
      </categories>
      <tags>
        <tag>学车</tag>
      </tags>
  </entry>
  <entry>
    <title>熟悉RecBole框架</title>
    <url>/posts/627310391.html</url>
    <content><![CDATA[<p>最近在争取一份科研实习工作，第一步的任务是学习Pytorch框架（因为我之前没有用过）。肝了一天半的时间之后得到了第二个任务，熟悉RecBole框架。</p>
<p>这相对来说更难一些，因为这是老师课题组自己开发的框架，推荐算法也是我没有接触过的领域。但是继续冲吧。只是不知道什么时候可以做课内的ddl，课内的绩点也不能松懈呀。</p>
<p>RecBole框架相应的论文是《RecBole: Towards a Unified, Comprehensive and Efficient Framework for Recommendation Algorithms》。先读这篇论文吧。</p>
<h4 id="摘要-v3"><a class="header-anchor" href="#摘要-v3">¶</a>摘要</h4>
<p>近年来涌现了大量的推荐算法。<font color="red">志在提出一个统一、全面、高效的推荐系统库，RecBole</font>。在28个数据集上实现了73个推荐算法。该框架是基于Pytorch实现的。</p>
<h4 id="1、简介"><a class="header-anchor" href="#1、简介">¶</a>1、简介</h4>
<p>推荐算法飞速发展，很难以统一的方式或框架实现比较的基线方法。但是实际上推荐算法的许多通用组件是比较相似的，所以提出了这个统一的框架。</p>
<p>RecBole库主要特点和能力如下：</p>
<ul>
<li>统一的推荐框架：采用PyTorch开发。三大核心部分：数据模块、模型模块、评估模块。封装通用的组件、函数或程序。</li>
<li>通用和可扩展的数据结构：在两个层面实现了支持的数据结构。用户层面：原子文件，表征四种主流推荐任务的输入；算法层面：引入通用的数据结构Interaction。</li>
<li>全面的基准模型和数据集：实现了73种推荐算法，纳入了28个常用的数据集来评估推荐系统。</li>
<li>高效的GPU加速执行：暂时不用学，我也没有可用的GPU算力。</li>
<li>广泛和标准的评估协议：…。</li>
</ul>
<h4 id="2、RecBole库"><a class="header-anchor" href="#2、RecBole库">¶</a>2、RecBole库</h4>
<h5 id="2-1-数据模块"><a class="header-anchor" href="#2-1-数据模块">¶</a>2.1  数据模块</h5>
<h6 id="2-1-1-整体数据流"><a class="header-anchor" href="#2-1-1-整体数据流">¶</a>2.1.1 整体数据流</h6>
<p>原始输入-&gt;原子文件-&gt;Dataset-&gt;Dataloader-&gt;算法。</p>
<p><font color="red">数据流涉及两种特殊的数据形式：用户和算法</font>。</p>
<p>对于数据准备，定义六种原子文件类型，统一用户层面的输入。<font color="red">原子文件能描述不同推荐任务所需的大多数形式的输入数据</font>。</p>
<p>在算法层面，引入灵活的数据结构交互，为不同的推荐算法提供了<font color="red">统一的内部数据表示</font>。</p>
<h6 id="2-1-2-原子文件"><a class="header-anchor" href="#2-1-2-原子文件">¶</a>2.1.2 原子文件</h6>
<p>原子文件是<strong>描述各种推荐任务的输入</strong>的基本组件。试图<strong>总结和统一主流推荐任务的最基本的输入形式</strong>。</p>
<p>总结出四种基本数据类型：token、token sequence、float、float_sequence。前两者表示离散特征（ID、类别），后两者表示连续特征（价格）。</p>
<ul>
<li>.INTER是所有推荐任务中<font color="red">必须使用的文件</font>，每一行由用户ID、项目ID、用户项目评分、时间戳、评论文本组成。</li>
<li>.USER是<font color="red">用户档案文件</font>。包含用户的分类和特征。</li>
<li>.ITEM是项目特征文件，描述项目特征。</li>
</ul>
<p><strong><font color="red">语境感知的推荐一般就需要用到inter、user、item了</font></strong>。</p>
<ul>
<li>
<p>.KG是知识图谱文件，用于基于知识的推荐。每一行对应一个&lt;头实体、尾实体、关联ID&gt;的三元组。</p>
</li>
<li>
<p>.LINK用于基于知识的推荐。记录了推荐系统项目和知识图谱实体之间的对应关系。</p>
</li>
<li>
<p>.NET是社会网络文件，用于社会推荐。</p>
</li>
</ul>
<p><strong>原子文件可以覆盖大多数主流推荐任务的输入，如果不足以支持，可以以灵活的方式引入新的原子文件。</strong></p>
<h6 id="2-1-3-推荐任务的输入文件"><a class="header-anchor" href="#2-1-3-推荐任务的输入文件">¶</a>2.1.3 推荐任务的输入文件</h6>
<p>基于上述的原子文件，<font color="red">可以利用其<strong>组合</strong>来推进五种主流的推荐任务</font>：一般推荐、情境感知推荐、基于知识的推荐、顺序推荐和社交推荐。（目前实现前四种）</p>
<h6 id="2-1-4-内部数据结构Interaction"><a class="header-anchor" href="#2-1-4-内部数据结构Interaction">¶</a>2.1.4 内部数据结构Interaction</h6>
<p>Interaction被<font color="red">输入到推荐算法</font>中。</p>
<p>为了使其统一灵活，实现为基于<strong>python.dict</strong>的新的抽象数据类型（一个键值索引的数据结构）。键值对应输入的特征；值对应张量tensor。</p>
<h5 id="2-2-模型模块"><a class="header-anchor" href="#2-2-模型模块">¶</a>2.2 模型模块</h5>
<p>模型模块组织推荐算法的实现。</p>
<h6 id="2-2-1-统一的实现接口"><a class="header-anchor" href="#2-2-1-统一的实现接口">¶</a>2.2.1 统一的实现接口</h6>
<p>实现一个新的模型，只需重新规定接口与输入和评估模块连接。利用接口函数calculate_loss()进行训练，predict用于测试。同时建立了许多损失函数作为组件。</p>
<h6 id="2-2-2-已实现的模型"><a class="header-anchor" href="#2-2-2-已实现的模型">¶</a>2.2.2 已实现的模型</h6>
<p>实现了73个推荐模型。</p>
<h6 id="2-2-3-丰富的辅助功能"><a class="header-anchor" href="#2-2-3-丰富的辅助功能">¶</a>2.2.3 丰富的辅助功能</h6>
<p>比如说自动参数调整：给一个参数集，搜索最佳性能的最佳值。还有模型保存和模型加载。支持从存储的中断点恢复模型学习。等等等等</p>
<h5 id="2-3-评价模块"><a class="header-anchor" href="#2-3-评价模块">¶</a>2.3 评价模块</h5>
<p>功能是实现推荐系统常用的评价协议。不同的模式可以在同一个评价模块下进行比较。</p>
<h6 id="2-3-1-评价指标"><a class="header-anchor" href="#2-3-1-评价指标">¶</a>2.3.1 评价指标</h6>
<p>同时支持<font color="red">基于价值和基于排名的评价指标</font>。</p>
<p>基于价值的评价就是利用均方根误差、平均误差，衡量真实值和预测值之间的预测误差；基于排名的评价，用于top-K项目推荐，衡量算法生成的推荐名单的排名性能。</p>
<h6 id="2-3-2-评价设置"><a class="header-anchor" href="#2-3-2-评价设置">¶</a>2.3.2 评价设置</h6>
<p><strong><font color="red">主要分歧在于“基于排名top-K项目推荐”的评价</font></strong>。重点不是提供最合适的评价，而是提供大多数广泛采用的评价。</p>
<p>同时，本库提供了一种可能性，就是可以比较各种模型在不同评价协议下的性能。</p>
<p>为了方便各种评估设置，将相关函数封装成四个主要部分：Group、Split、Order、NegSample。</p>
<h6 id="2-3-3-Top评价的加速策略"><a class="header-anchor" href="#2-3-3-Top评价的加速策略">¶</a>2.3.3 Top评价的加速策略</h6>
<p>计算Top-K评价指标通常很耗时。原因在于，需要评估每个用户-项目对的得分。不同用户在测试集有不同数量的真实项目，所以补全，没有的就说负无穷。</p>
<p>…</p>
<h6 id="2-4-4-效率和可扩展性"><a class="header-anchor" href="#2-4-4-效率和可扩展性">¶</a>2.4.4 效率和可扩展性</h6>
<h4 id="3-该库的使用实例"><a class="header-anchor" href="#3-该库的使用实例">¶</a>3. 该库的使用实例</h4>
<h5 id="3-1-运行现有的模型"><a class="header-anchor" href="#3-1-运行现有的模型">¶</a>3.1 运行现有的模型</h5>
<p>库中包含的模型可以用固定参数或自动调参来运行。</p>
<h6 id="3-1-1-固定参数的模型运行"><a class="header-anchor" href="#3-1-1-固定参数的模型运行">¶</a>3.1.1 固定参数的模型运行</h6>
<p>（i）对数据集进行格式化：首先用户选择数据集，根据脚本进行格式化，可以为不同的数据集生成所需的原子文件。代码：atomic_file=PreProcess(dataset)</p>
<p>（ii）生成配置。可以通过不同的方式生成配置。可以写一个配置文件，在主函数当中读取这个文件；可以在命令行包含参数；可以在代码中写入参数字典。（<font color="red">这里的参数不是模型的参数，是程序的参数</font>）</p>
<p>（iii）筛选和拆分数据集。提供丰富的辅助功能来过滤和分割数据集。</p>
<p>（iv）加载模型。</p>
<p>（v）训练和评估。</p>
<h6 id="3-1-2-参数调整（-font-color-red-说是超参数调整更为合理-font-）"><a class="header-anchor" href="#3-1-2-参数调整（-font-color-red-说是超参数调整更为合理-font-）">¶</a>3.1.2 参数调整（<font color="red">说是超参数调整更为合理</font>）</h6>
<p>可以根据所提供的超参数范围来优化一个给定的模型。</p>
<p>（i）设置参数范围：在hyper.test文件中提供候选参数。在该文件中，每一行的格式都是参数=[value1, value2, …, valuen]</p>
<p>（ii）设置调优方法：在库hyperopt的基础上实现的。给定一组参数值，有四种调优方法“网格搜索”、“随机搜索”…代码：hy =HyperTuning(objective, tuning_method,range_file)</p>
<p>（iii）用户通过hy.run()启动调优进程。输出保存最优参数和相应的模型性能。</p>
<h5 id="3-2-实现新的模型"><a class="header-anchor" href="#3-2-实现新的模型">¶</a>3.2 实现新的模型</h5>
<p>基于RecBole，通过实例化以下三个函数实现一个新模型：</p>
<p>（i）实现<strong>init()函数</strong>：在这个函数中，用户执行参数初始化、全局变量定义等。新的模型是提供的抽象模型类的子类，目前为止，已经实现了一般四类推荐算法的抽象类。</p>
<p>（ii）实现<strong>calculate_loss()函数</strong>：计算新模型要优化的损失，库将自动调用不同的优化方法学习模型。</p>
<p>（iii）<strong>predict()函数</strong>：从输入数据到输出结果。</p>
<h4 id="4-与现有的库的比较"><a class="header-anchor" href="#4-与现有的库的比较">¶</a>4. 与现有的库的比较</h4>
<p>其实此前也有一些推荐系统库。编程语言逐渐从C/C++/JAVA到Python/Tensorflow/PyTorch。</p>
<p><strong><font color="red">RecBole的目标是简化新算法的开发过程。</font></strong></p>
]]></content>
      <categories>
        <category>科研</category>
      </categories>
      <tags>
        <tag>科研实习</tag>
        <tag>RecBole</tag>
      </tags>
  </entry>
  <entry>
    <title>第一个成熟的卷积神经网络——字符识别</title>
    <url>/posts/4079911902.html</url>
    <content><![CDATA[<p>​		总算是开始了自己的第一篇技术博客。</p>
<p>​		也总算是大概弄懂了一些深度学习、神经网络、卷积神经网络的知识，能靠自己实现识别字符的卷积神经网络了。</p>
<p>​		今天时间所剩不多，可能写不完，写到哪算哪吧。</p>
<p>​		在大二下的《人工智能导论》这门课开始接触深度学习，学得一知半解都算不上，啥都没弄明白，甚至还要做神经网络的实验，本是作为启蒙课的目的也没有达到，反而起到了揠苗助长的效果，让人觉得深度学习、神经网络特别难。就我目前的理解而言，我绝不敢说深度学习、神经网络简单，毕竟现在科技前沿都还没将之完全征服。但是我可以说，理解深度学习、神经网络的基本概念绝对不难。实际上我到目前为止也只是看了吴恩达老师不到半小时的讲解就入门了神经网络，实训课李伟老师一上午左右的讲解也让我掌握了数字图像基本概念和卷积神经网络的思路。不得不抨击一下这门课的设立，我被老师和实验弄迷糊的时间完全可以入门深度学习了，况且还让我很长一段时间对深度学习、神经网络有些畏惧，如今看来，似乎”不过如此“（bushi）。</p>
<p>​		好吧，啰嗦了半天，好像都没时间写技术性的东西了。</p>
<p>​		这次的任务是把老师已经用tensorflow1.x写好的识别字符的卷积神经网络改成用tensorflow2.x实现**（封装的特性）**。关于深度学习和神经网络的知识梳理有空再写吧。</p>
<p>​		先到这里。</p>
<p>​		————————————————————2022/7/15  23：28</p>
<p>​		————————————————————2022/7/17  9：41接着写</p>
<p>​		拖欠了两天都没写完哈哈。不过下一阶段的任务还没开始，也不急。字符识别卷积神经网络搭好了，接下来就是web的搭建了，Python的flask是完全没学过的内容。</p>
<p>​		直接按照搭建网络的顺序逐个说明吧。</p>
<p><strong>一.数据读取</strong></p>
<p>现在很多CV领域的数据读取都是直接读取现成的数据集，但是这里需要从本地文件当中读取，并进行处理，这一部分tf1和tf2没区别，不用改。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_data</span>(<span class="params">dir_path</span>):</span></span><br><span class="line">    data = []</span><br><span class="line">    labels = []</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> os.listdir(dir_path):</span><br><span class="line">        item_path = os.path.join(dir_path, item)</span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(item_path):</span><br><span class="line">            <span class="keyword">for</span> subitem <span class="keyword">in</span> os.listdir(item_path):</span><br><span class="line">                subitem_path = os.path.join(item_path, subitem)</span><br><span class="line">                gray_image = cv.imread(subitem_path, cv.IMREAD_GRAYSCALE)</span><br><span class="line">                resized_image = cv.resize(gray_image, (IMAGE_WIDTH, IMAGE_HEIGHT))</span><br><span class="line">                data.append(resized_image.ravel())</span><br><span class="line">                labels.append(LABEL_DICT[item])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> np.array(data), np.array(labels)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">data文件夹里面有0~1，A~Z的所有字符，每个字符有一个文件夹存储对应图片，这部分代码的功能就是把每个图片读出来，转换成20*20的大小，label就是文件夹名称</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></tbody></table></figure>
<p>正式进行数据读取的步骤开始有了变化。原本会对训练集和测试集都进行正则化，然后再把标签独热编码，这两步都是自定义的函数。tf2提供相关的API。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 获取训练集的特征矩阵、标签向量</span></span><br><span class="line">train_data, train_labels = load_data(TRAIN_DIR)</span><br><span class="line"><span class="comment"># 对训练集的标签向量执行独热编码,tf2提供API</span></span><br><span class="line">train_labels = tf.one_hot(train_labels, <span class="number">34</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取训练集的总样本数</span></span><br><span class="line">train_samples_count = <span class="built_in">len</span>(train_data)</span><br><span class="line">train_indicies = np.arange(train_samples_count)</span><br><span class="line"><span class="comment"># 获得打乱的索引序列</span></span><br><span class="line">np.random.shuffle(train_indicies)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取测试集的特征矩阵、标签向量</span></span><br><span class="line">test_data, test_labels = load_data(TEST_DIR)</span><br><span class="line"><span class="comment"># 对测试集的标签向量执行独热编码</span></span><br><span class="line">test_labels = tf.one_hot(test_labels, <span class="number">34</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入tf2搭建的网络之后还要reshape，变成[N, width, height, 1(灰度图)]的形式</span></span><br><span class="line">train_data = tf.reshape(train_data, (train_data.shape[<span class="number">0</span>], IMAGE_WIDTH, IMAGE_HEIGHT, <span class="number">1</span>))</span><br><span class="line">test_data = tf.reshape(test_data, (test_data.shape[<span class="number">0</span>], IMAGE_WIDTH, IMAGE_HEIGHT, <span class="number">1</span>))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">可能会问，原先的正则化哪去了，答案是：直接在神经网络入口加一层正则化层就行</span></span><br><span class="line"><span class="string">这样不用分别处理训练集和测试集，它们进入网络就会正则化了</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></tbody></table></figure>
<p><strong>二.搭建网络（封装的特性）</strong></p>
<p>tf2搭建网络最明显的特点就是<strong>封装的特性</strong>，直接在一个对象当中设置好每一层的参数就可以，不需要手动实现底层代码，有了非常明显的改进。</p>
<p>直接上代码。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">network = tf.keras.models.Sequential([</span><br><span class="line">    <span class="comment"># 正式操作之前先进行正则化，专门的正则化层</span></span><br><span class="line">    tf.keras.layers.BatchNormalization(),</span><br><span class="line">    <span class="comment"># 第一层卷积层，32个卷积核，大小5*5，自动初始化，relu激活，输入形状固定</span></span><br><span class="line">    tf.keras.layers.Conv2D(filters=<span class="number">32</span>, kernel_size=<span class="number">5</span>, activation=<span class="string">'relu'</span>, input_shape=(IMAGE_WIDTH, IMAGE_HEIGHT, <span class="number">1</span>), padding=<span class="string">'same'</span>),</span><br><span class="line">    <span class="comment"># 第一层池化层</span></span><br><span class="line">    tf.keras.layers.MaxPool2D(pool_size=<span class="number">2</span>, strides=<span class="number">2</span>),  <span class="comment"># 20=&gt;10，步长应该取2</span></span><br><span class="line">    <span class="comment"># 第二层卷积层</span></span><br><span class="line">    tf.keras.layers.Conv2D(filters=<span class="number">64</span>, kernel_size=<span class="number">5</span>, activation=<span class="string">'relu'</span>, input_shape=(<span class="number">10</span>, <span class="number">10</span>, <span class="number">32</span>), padding=<span class="string">'same'</span>),</span><br><span class="line">    <span class="comment"># 第二层池化层</span></span><br><span class="line">    tf.keras.layers.MaxPool2D(pool_size=<span class="number">2</span>, strides=<span class="number">2</span>),  <span class="comment"># 10=&gt;5</span></span><br><span class="line">    <span class="comment"># 把二维矩阵展平成向量</span></span><br><span class="line">    tf.keras.layers.Flatten(),</span><br><span class="line">    <span class="comment"># 全连接层</span></span><br><span class="line">    tf.keras.layers.Dense(<span class="number">1024</span>, activation=<span class="string">'relu'</span>),</span><br><span class="line">    <span class="comment"># 全连接之后会导致参数爆炸，需要dropout一些数据</span></span><br><span class="line">    tf.keras.layers.Dropout(<span class="number">0.3</span>),</span><br><span class="line">    <span class="comment"># 仿射函数</span></span><br><span class="line">    tf.keras.layers.Dense(CLASSIFICATION_COUNT, activation=<span class="string">'softmax'</span>)</span><br><span class="line">])</span><br></pre></td></tr></tbody></table></figure>
<p>这只是前向传播的代码，交叉熵损失函数和反向传播算法如下。</p>
<figure class="highlight nix"><table><tbody><tr><td class="code"><pre><span class="line">network.compile(<span class="attr">optimizer=tf.keras.optimizers.Adam(learning_rate=1e-3),</span>	<span class="comment"># 反向传播算法&amp;学习率设置</span></span><br><span class="line">    <span class="attr">loss=tf.keras.losses.BinaryCrossentropy(),</span>	<span class="comment"># 交叉熵损失函数</span></span><br><span class="line">    <span class="attr">metrics=['accuracy'])</span></span><br></pre></td></tr></tbody></table></figure>
<p><strong>三.训练模型、评估准确率、保存模型</strong></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 训练模型</span></span><br><span class="line">network.fit(train_data, train_labels, batch_size=<span class="number">50</span>, epochs=<span class="number">30</span>, validation_split=<span class="number">0.02</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">直接指定batch_size和epochs即可，很方便</span></span><br><span class="line"><span class="string">validation_split这个参数就是每次训练时，把训练集中一定比例的数据不参与训练，用来测算正确率等参数，测出来也不改变参数</span></span><br><span class="line"><span class="string">最开始validation_split=0.1的时候，训练当中算出来的正确率很高，98/99%甚至100%。但是测试集效果不好，正确率89%左右。我估计是因为直接削减了10%的数据，泛化能力不强。</span></span><br><span class="line"><span class="string">但是如果设置validation_split=0.0，训练和测试效果很好，98~99%，但是实际检测效果反而不如前者，说明可能过拟合了</span></span><br><span class="line"><span class="string">所以设置validation_split=0.02，这样中庸的策略既保证了正确率，泛化能力又不错</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 评估准确率</span></span><br><span class="line">test_loss, test_acc = network.evaluate(test_data, test_labels)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'\n测试准确率：'</span>, test_acc)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存模型</span></span><br><span class="line">network.save_weights(MODEL_PATH)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">保存模型可以直接保存模型。也可以保存模型的权重（参数），预测的时候，构造一个同架构的网络，直接加载参数即可。</span></span><br><span class="line"><span class="string">前者比较友好，很简单，但是队友用了后者就用后者吧，我觉得后者会更快，因为直接加载参数显然比直接加载模型要更简单</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></tbody></table></figure>
<p><strong>四.实战预测</strong></p>
<p>1.自定义一个加载图片的函数。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_image</span>(<span class="params">image_path, width, height</span>):</span></span><br><span class="line">    gray_image = cv.imread(image_path, cv.IMREAD_GRAYSCALE)</span><br><span class="line">    resized_image = cv.resize(gray_image, (width, height))</span><br><span class="line">    data = []</span><br><span class="line">    data.append(resized_image.ravel())</span><br><span class="line">    <span class="keyword">return</span> np.array(data)</span><br></pre></td></tr></tbody></table></figure>
<p>2.搭建一个网络，并加载权重|参数，这主要是由之前保存只是保存了参数决定的，如果保存的是模型，就直接加载好了。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 加载训练好的模型</span></span><br><span class="line">model = tf.keras.models.Sequential([</span><br><span class="line">    <span class="comment"># 网络的具体架构不重复，和前文完全一致</span></span><br><span class="line">])</span><br><span class="line"><span class="comment"># 加载参数</span></span><br><span class="line">model.load_weights(<span class="string">"model/my_cnn_enu"</span>)</span><br><span class="line"><span class="comment"># 这样，model就是之前训练好的模型了</span></span><br></pre></td></tr></tbody></table></figure>
<p>3.读取图片，reshape成可以进入网络的样子</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">digit_image_path = <span class="string">"images/english.jpg"</span></span><br><span class="line">digit_image = load_image(digit_image_path, IMAGE_WIDTH, IMAGE_HEIGHT)</span><br><span class="line">english_image = tf.reshape(digit_image, [-<span class="number">1</span>, IMAGE_WIDTH, IMAGE_HEIGHT, <span class="number">1</span>])</span><br></pre></td></tr></tbody></table></figure>
<p>4.预测</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">results = model.predict(english_image)</span><br><span class="line"><span class="comment"># 选概率最大的</span></span><br><span class="line">num = np.argmax(results[<span class="number">0</span>])</span><br><span class="line"><span class="comment"># 通过索引转成对应的字符</span></span><br><span class="line">new_dict = {v : k <span class="keyword">for</span> k, v <span class="keyword">in</span> LABEL_DICT.items()}<span class="comment">#反转字典</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"预测结果是："</span>, new_dict[num])</span><br><span class="line"><span class="comment"># 预测结束</span></span><br></pre></td></tr></tbody></table></figure>
<p><em><strong>以上就是全部的内容了，是不是挺简单的呢，反正我觉得挺简单的，哈哈。</strong></em></p>
<p>让大家看看效果叭。</p>
<p><img src="/posts/4079911902/image1.png" alt="image1"></p>
<p><img src="/posts/4079911902/image2.png" alt="image2"></p>
<p><img src="/posts/4079911902/image3.png" alt="image3"></p>
<p><img src="/posts/4079911902/image4.png" alt="image4"></p>
<p><img src="/posts/4079911902/image5.png" alt="image5"></p>
<p><img src="/posts/4079911902/image6.png" alt="image6"></p>
<p>最后一张预测错惹，没办法，这个A真的很像4。</p>
<p>第一篇技术博客正式完结，实际用时也不久，挺好的。</p>
<p>谢谢观看~</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>卷积神经网络</tag>
        <tag>Python</tag>
        <tag>深度学习</tag>
        <tag>车牌识别项目</tag>
      </tags>
  </entry>
  <entry>
    <title>调整Ubuntu显示界面</title>
    <url>/posts/487654844.html</url>
    <content><![CDATA[<p>先声明本人的VMWare是16pro，Ubuntu版本22.04。</p>
<p>大家安装Ubutu虚拟机经常会遇到的第一个问题就是显示界面太小。通常查找到的解决方案就是安装增强功能（VirtualBox）和VMWare tools（VMWare）。</p>
<p>但是我这么做之后，只是显示界面全屏了，图标和文字还是不够大。</p>
<p>第二次尝试是调节分辨率，在settings的display中，调节分辨率到合适的大小，会改善很多，但是还是不够。</p>
<p>第三个尝试就是调节缩放比例，但是settings的display中只支持100%、200%、300%，试了200%，发现图标文字变大很多，但是太大了。最好是1.5这样，但是settings里面不支持调节（Ubuntu22.04是这样，之前的版本好像还可以）。</p>
<p>这一步的解决方案是：在 /usr/share/glib-2.0/schemas目录下</p>
<p>修改文件 org.gnome.desktop.interface.gschema.<a href="https://so.csdn.net/so/search?q=xml&amp;spm=1001.2101.3001.7020">xml</a><br>
找到text-scaling-factor定义, default的数值改为1.65（缩放比例，根据自己电脑调节）</p>
<p>修改文件 com.<a href="https://so.csdn.net/so/search?q=ubuntu&amp;spm=1001.2101.3001.7020">ubuntu</a>.user-interface.gschema.xml<br>
找到text-scaling-factor定义, default的数值改为1.65（缩放比例，根据自己电脑调节）</p>
<p>然后执行命令"glib-compile-schemas /usr/share/glib-2.0/schemas/"，重启后缩放比例生效。</p>
<p>这一步参考了CSDN博主「旨酒当歌」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>
原文链接：<a href="https://blog.csdn.net/qq_16056397/article/details/114253446">https://blog.csdn.net/qq_16056397/article/details/114253446</a></p>
<p>这里面有一些细节：首先是usr直接在资源管理器当中搜索不到，在命令行cd /usr即可；其次修改这两个文件需要sudo权限，不然改不了。</p>
<p>经过三种方法的尝试，最终效果如下图所示，挺满意的了，也不用像老年机一样吧（强迫症自语）</p>
<p><img src="/posts/487654844/%E8%B0%83%E6%95%B4%E6%98%BE%E7%A4%BA%E7%95%8C%E9%9D%A2.png" alt="image"></p>
<p>和主机基本一致。done！</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>车牌识别项目Web端的搭建</title>
    <url>/posts/238374888.html</url>
    <content><![CDATA[<h4 id="说说具体技术之前的一些曲折吧，如果想看技术直接向后翻即可。"><a class="header-anchor" href="#说说具体技术之前的一些曲折吧，如果想看技术直接向后翻即可。">¶</a>说说具体技术之前的一些曲折吧，如果想看技术直接向后翻即可。</h4>
<p>车牌识别项目的大致功能我们已经完成：手动读取一张图片最终输出图中的车牌号。接着就是搭建一个网页，我们小组目标的功能是：用户可以向该网页上传图片，一经上传，我们的程序就开始工作，最终输出识别出的车牌号。计划用python flask实现。说得很理想，但是其实我们小组的成员python flask的知识储备基本为0。</p>
<p>Web的搭建由我和周延霖负责，周延霖认为上述功能要求过高，应该做成静态网页输出识别结果即可。其实一开始想的也比较难，做出一个可以上传图片的网页，把图片存储到本地文件夹确实没什么问题，但是怎么让我们的pyhton程序能够主动调用这张图片进行识别呢，这个逻辑说起来很简单但是其实我们不知道怎么实现。林筠皓建议设置一个控件用于启动python程序，这似乎可行。</p>
<p>关于Web搭建的准备，系统地学习Python Flask不仅没有必要（在人工智能的项目里面学习Web知识？）而且也很难实现（基本课时都在八小时以上），看老师给的PPT也很不好学。只好直接看别人的代码了。</p>
<h4 id="正式开始Web的搭建之路，还请读者注意，本篇文章不是系统地教学，只是记录自己短期内在完全没有相关知识储备的情况下，怎么利用Python-Flask迅速搭建起一个满足需求的网页。"><a class="header-anchor" href="#正式开始Web的搭建之路，还请读者注意，本篇文章不是系统地教学，只是记录自己短期内在完全没有相关知识储备的情况下，怎么利用Python-Flask迅速搭建起一个满足需求的网页。">¶</a>正式开始Web的搭建之路，还请读者注意，本篇文章不是系统地教学，只是记录自己短期内在完全没有相关知识储备的情况下，怎么利用Python Flask迅速搭建起一个满足需求的网页。</h4>
<p>刚开始只是打算一点一点地实现目标功能罢，先从上传图片做起，这个的参考资源的获取也是比较容易的。此处参考bilibili网站【谷雨课堂】Python干货实战【030】 网站开发之-上传图片或文件，链接：<a href="https://www.bilibili.com/video/BV1Rh41117yy?share_source=copy_web&amp;vd_source=a903512a82ff2959ba4cac987f40e02a%E3%80%82">https://www.bilibili.com/video/BV1Rh41117yy?share_source=copy_web&amp;vd_source=a903512a82ff2959ba4cac987f40e02a。</a></p>
<p>1.先介绍一下基本的工作环境配置：</p>
<p><img src="/posts/238374888/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%A4%B9.png" alt="配置文件夹"></p>
<ul>
<li>
<p>app.py文件就是网页的运行程序。</p>
</li>
<li>
<p>templates文件夹需要有一个upload（其他名字也行）.html文件，主要是网页的前端代码，app.py文件会调用该html文件。</p>
</li>
<li>
<p>static文件夹底下有个upload文件夹用于存放用户上传的文件。</p>
</li>
<li>
<p>这个upload文件夹我全程似乎没有用到。</p>
</li>
</ul>
<p>2.先看upload.html文件，这个主要就是相当于设计你的网页要长什么样。</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>File Upload<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/api/upload"</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">'上传'</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>title就是网页的名称了，只需要一个上传文件的表单即可，非常简单，不必赘述。效果如图所示。</p>
<p><img src="/posts/238374888/%E7%BD%91%E9%A1%B5%E6%98%BE%E7%A4%BA%E6%95%88%E6%9E%9C.png" alt="网页效果"></p>
<p>3.app.py文件，运行网页的根本。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, url_for, redirect, render_template, request</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> character	<span class="comment"># 字符切割的API所在文件</span></span><br><span class="line"><span class="keyword">import</span> my_cnn_predict	<span class="comment"># 字符识别的API所在文件</span></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基础路径</span></span><br><span class="line">BASE_DIR = os.path.dirname(os.path.abspath(__file__))</span><br><span class="line"></span><br><span class="line"><span class="comment"># static路径</span></span><br><span class="line">STATIC_DIR = os.path.join(BASE_DIR, <span class="string">'static'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传路径（static文件夹下的upload文件夹）</span></span><br><span class="line">UPLOAD_DIR = os.path.join(STATIC_DIR, <span class="string">'upload'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传文件处理，自动找上传的参数名</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upfile</span>(<span class="params">field=<span class="string">''</span>, <span class="built_in">dir</span>=<span class="string">''</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(request.files) &lt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> field == <span class="string">''</span>:</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> request.files:</span><br><span class="line">            field = k</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    f = request.files[field]</span><br><span class="line">    <span class="keyword">if</span> f == <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"没有上传的字段"</span> + field)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">    fname = f.filename</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> fname == <span class="string">''</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line"></span><br><span class="line">    ext = fname.rsplit(<span class="string">'.'</span>, <span class="number">1</span>)[<span class="number">1</span>]</span><br><span class="line">    unix_time = <span class="built_in">int</span>(time.time())</span><br><span class="line">    new_filename = <span class="built_in">str</span>(unix_time) + <span class="string">'.'</span> + ext</span><br><span class="line">    now = <span class="built_in">int</span>(time.time())</span><br><span class="line"></span><br><span class="line">    timeStruct = time.localtime(now)</span><br><span class="line">    str_ymd = time.strftime(<span class="string">"%Y-%m-%d"</span>, timeStruct)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">dir</span> == <span class="string">''</span>:</span><br><span class="line">        <span class="built_in">dir</span> = str_ymd</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(UPLOAD_DIR+<span class="string">'/'</span>+<span class="built_in">dir</span>):</span><br><span class="line">        os.makedirs(UPLOAD_DIR+<span class="string">'/'</span>+<span class="built_in">dir</span>)</span><br><span class="line">    <span class="built_in">print</span>(UPLOAD_DIR+<span class="string">'/'</span>+<span class="built_in">dir</span>+<span class="string">'/'</span>+new_filename)</span><br><span class="line">    f.save(UPLOAD_DIR+<span class="string">'/'</span>+<span class="built_in">dir</span>+<span class="string">'/'</span>+new_filename)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dir</span>+<span class="string">'/'</span>+new_filename, new_filename</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">"/"</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'upload.html'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">"/api/upload"</span>, methods=[<span class="string">'POST'</span>]</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传文件的函数，修改的关键所在，其他地方不动</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">网页原本的思路是：</span></span><br><span class="line"><span class="string">上传一个文件|图片，一个if-else语句，如果没有上传文件则提示没有上传文件，否则创建一个文件夹（根据时间）存储该文件</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">那么修改的可能就出现了，完全不需要实现之前想的那么复杂的逻辑</span></span><br><span class="line"><span class="string">只需要在有上传文件的情况下调用存储好的图片和车牌识别的API即可</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">首先修改张龑的API，原本是以文件夹为单位处理（逐个处理该文件夹下所有图片），现在只需要以图片为单位处理即可，怎么修改下一小节再描述</span></span><br><span class="line"><span class="string">切分的结果存储在results文件夹下，以该图片命名的文件夹</span></span><br><span class="line"><span class="string">接着向字符识别网络传输切分后的图片存储路径，识别结果作为字符串直接打印即可</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">uploader</span>():</span></span><br><span class="line">    upload_file, new_filename = upfile()</span><br><span class="line">    <span class="keyword">if</span> upload_file == <span class="string">''</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"您没有上传文件 &lt;a href='/'&gt;返回&lt;/a&gt;"</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        character.split(<span class="string">"static/upload/2022-07-18"</span>, new_filename, <span class="string">"results"</span>)</span><br><span class="line">        result = my_cnn_predict.predict(<span class="string">"results/"</span> + new_filename.rstrip(<span class="string">".jpg"</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"&lt;a href='/static/upload/"</span> + upload_file + <span class="string">"'&gt;"</span> + result + <span class="string">"&lt;/a&gt; &lt;a href='/'&gt;返回&lt;/a&gt;"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p>图片存储情况如下图所示。</p>
<p><img src="/posts/238374888/%E5%9B%BE%E7%89%87%E5%AD%98%E5%82%A8%E6%83%85%E5%86%B5.png" alt="图片存储"></p>
<p>4.最后就是修改切分字符的API了</p>
<p>原本是一个文件夹下遍历所有图片，现在只需要对传入的图片做处理即可，取消循环，比较简单。</p>
<h4 id="最后让大家看看效果吧"><a class="header-anchor" href="#最后让大家看看效果吧">¶</a>最后让大家看看效果吧</h4>
<p><img src="/posts/238374888/%E7%BD%91%E9%A1%B5%E6%98%BE%E7%A4%BA%E6%95%88%E6%9E%9C.png" alt="网页效果"></p>
<p><img src="/posts/238374888/i1.png" alt="image"></p>
<p><img src="/posts/238374888/i2.png" alt="image"></p>
<p><img src="/posts/238374888/i3.png" alt="image"></p>
<p>可以重复多次上传图片进行识别，这里不过多进行演示，完美。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>车牌识别项目</tag>
        <tag>Flask</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>转专业终于尘埃落定</title>
    <url>/posts/1401146600.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="3c768a3923975ed10579d7e51326f2458ff7f1377d2b3167c5878d798ae7fbd3"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入密码，查看文章。</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活的点点滴滴</category>
      </categories>
      <tags>
        <tag>自语</tag>
      </tags>
  </entry>
  <entry>
    <title>统计阅读次数的瞎折腾&amp;终于成功了</title>
    <url>/posts/3777111507.html</url>
    <content><![CDATA[<p>因为此前学习了给文章加密的技术，所以打算此后将博客完全开放，故想给博客增加文章阅读次数统计的功能，折腾了半天，绕了许多弯路，其实本身并不复杂。</p>
<p>一开始直接搜索浏览次数统计，网上推荐最多的是 <strong>busuanzi|不蒜子</strong>（这个名字挺有趣的，我一开始以为是卜算子），直接照搬吧（过程不赘述了，无非是安装插件、更改配置文件罢），确实也统计出来文章阅读次数，但是只能点开文章才能看到，这并不如我意，我希望在文章外部显示。此时我以为是出了bug（现在来看并不是，实际上不蒜子的功能就是这样的，不包括在文章外部显示）。</p>
<p>于是去求助一鸣哥，因为他的博客文章阅读次数是外部可见。一鸣哥和我说不蒜子可以的，但是他用的是waline评论系统，系统自带了统计功能，于是开始折腾waline评论系统。又是注册LeanCloud国际版又是改配置文件，最后还是出问题了，hexo g不成功。</p>
<p>————————————————————————</p>
<p>手动分割线，这里文字无法完全表达我的情感，很有必要给博客文章添加表情，我去搞定这个再说。</p>
<p>————————————————————————我回来了。</p>
<p>话接当时hexo g不成功，心态大崩😭😭😭，没效果也比出bug强啊。还好参照的博主说了，next主题版本低可能导致generate不成功，于是寻求next主题升级的办法。</p>
<p>看了一些帖子，似乎都很麻烦，我太懒了😴，所以放弃了，心想能统计就行了，外面显示不了就算了，但是评论系统还是valine和waline并存呢，不知道是不是因为博客关联了两个LeanCloud（国内版和国际版）应用，评论系统直接崩了。于是干脆把waline和valine的应用全删了，插件留着问题也不大，waline的配置信息也全删了，重新创建valine在LeanCloud的应用，重新设置valine的配置信息。</p>
<p>这时候注意到了</p>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">appid:</span> <span class="string">Srx46WYtgI2COUqAi761ccR8-gzGzoHsz</span> <span class="comment"># Your leancloud application appid</span></span><br><span class="line">  <span class="attr">appkey:</span> <span class="string">bNpdyeUlKIvb6bUb42mYvy0h</span> <span class="comment"># Your leancloud application appkey</span></span><br><span class="line">  <span class="attr">notify:</span> <span class="literal">false</span> <span class="comment"># Mail notifier</span></span><br><span class="line">  <span class="attr">verify:</span> <span class="literal">false</span> <span class="comment"># Verification code</span></span><br><span class="line">  <span class="attr">placeholder:</span> <span class="string">Just</span> <span class="string">go</span> <span class="string">go</span> <span class="comment"># Comment box placeholder</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">mm</span> <span class="comment"># Gravatar style</span></span><br><span class="line">  <span class="attr">guest_info:</span> <span class="string">nick,mail,link</span> <span class="comment"># Custom comment header</span></span><br><span class="line">  <span class="attr">pageSize:</span> <span class="number">10</span> <span class="comment"># Pagination size</span></span><br><span class="line">  <span class="attr">language:</span> <span class="comment"># Language, available values: en, zh-CN</span></span><br><span class="line">  <span class="attr">visitor:</span> <span class="literal">true</span> <span class="comment"># Article reading statistic</span></span><br><span class="line">  <span class="attr">comment_count:</span> <span class="literal">true</span> <span class="comment"># If false, comment count will only be displayed in post page, not in home page</span></span><br><span class="line">  <span class="attr">recordIP:</span> <span class="literal">false</span> <span class="comment"># Whether to record the commenter IP</span></span><br><span class="line">  <span class="attr">serverURLs:</span> <span class="comment"># When the custom domain name is enabled, fill it in here (it will be detected automatically by default, no need to fill in)</span></span><br><span class="line">  <span class="comment">#post_meta_order: 0</span></span><br></pre></td></tr></tbody></table></figure>
<p>visitors这一项，原本是false，这不就是浏览次数统计嘛，于是改为true，看看效果。</p>
<p>😀可以在文章外部显示阅读次数了，但是点进去居然有两个阅读次数，而且还不一样。😞</p>
<p>到底是什么问题呢？（此时已经忘记最早是用不蒜子了）</p>
<p>重新梳理添加阅读次数的思路才发现用了busuanzi_count，马上在配置文件把enable改成false。</p>
<p>hexo g，成功！完美！😆😆😆</p>
<p>其实本身是很简单的事情，因为valine评论系统自带统计阅读次数和评论次数功能，直接在配置文件改一行就行了，结果搞了这么半天还差点把自己的网站评论系统搞崩了，以后要好好看配置信息！</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>隐藏文章过程中的一些反思</title>
    <url>/posts/2496955723.html</url>
    <content><![CDATA[<p>在此前的文章当中有说过，出于种种原因，不想在博客的首页显示自己的文章，也查明Next主题的确支持这么干。</p>
<p>在CSDN上查到一篇文章《Hexo Next 7.6.0 指定文章不在主页显示》，思路很简单：第一步，修改themes\next\layout\index.swig文件；第二步，对于不想在首页显示的文章，在其font-matter部分添加声明：not show: true。但是我始终不知道自己的Next主题版本是什么，但是很显然不是7.6.0，因为我的index.swig文件和该文章中的不一样，那么修改自然不应该完全一样。但是我抱着侥幸心理，直接把内容复制上去了。但是在傻中又不那么傻的，先把原文件存了一个副本。照着这么改，hexo -g、hexo -d之后很成功，确实实现了目标功能。</p>
<p>但是过了两天hexo -d出了问题，我当时置之不理。后来网站就崩了，今天打开网站就只能显示乱码了。</p>
<p>所幸这几天我对博客配置的更改不多，所以想到应该是隐藏文章的配置出了问题。更幸运的是，自己当时留了副本。其实没留副本应该问题也不大，github上应该可以找到，但是不一定能找到对应的版本，况且最近国内网站访问github似乎又出问题了。</p>
<p>先把配置还原回去，再重新开始看那篇技术博客。虽然我们的index.swig文件不同，但是只需要对比添加了什么即可。仔细看代码</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">{% block content %}</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"posts-expand"</span>&gt;</span></span><br><span class="line">    {%- for post in page.posts.toArray() %}</span><br><span class="line">			{{ partial('_macro/post.swig', {post: post, is_index: true}) }}</span><br><span class="line">    {%- endfor %}</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  {% include '_partials/pagination.swig' %}</span><br><span class="line"></span><br><span class="line">{% endblock %}</span><br></pre></td></tr></tbody></table></figure>
<p>可以发现，其实就是在第四行和第六行之间加上了隐藏文章的设置</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">{%- for post in page.posts.toArray() %}</span><br><span class="line">	{%- if post.notshow != true %}</span><br><span class="line">		{{ partial('_macro/post.swig', {post: post, is_index: true}) }}</span><br><span class="line">	{%- endif %}</span><br><span class="line">{%- endfor %}</span><br></pre></td></tr></tbody></table></figure>
<p>其实逻辑就是，如果文章的not show（不在主页显示）== false，也就是在主页显示，就在主页显示；否则什么都不干（也就是不显示）。不同版本的显示代码不一样，因此我们只要加入判断即可。</p>
<p>hexo -g、hexo -d成功设置。</p>
<p>从这里可以看出修改配置的时候不能盲目抄袭，作为程序猿不能怕看代码，虽然我没学过这个语言，但是其实能看出这段代码的逻辑，这是不难的。如果这次近期我对配置的修改比较多，或者出bug比较晚，又或者我没有留副本，那么对我修理网站都会带来很大的麻烦，这么想我还是很幸运的。否则真的很难解决这类bug，主要是没法精准定位，在网上估计也找不到解决方案。</p>
<p>希望继续进步。😀</p>
]]></content>
      <categories>
        <category>漫无目的地思考</category>
      </categories>
      <tags>
        <tag>反思</tag>
      </tags>
  </entry>
  <entry>
    <title>通过论文学习DAGFM模型</title>
    <url>/posts/1347074556.html</url>
    <content><![CDATA[<h3 id="前言-v11"><a class="header-anchor" href="#前言-v11">¶</a>前言</h3>
<p>本次科研实习的任务是利用RecBole框架复现论文《Directed Acyclic Graph Factorization Machines for CTR Prediction via Knowledge Distillation》中的DAGFM模型，因此第一要务是把论文学习明白，把模型熟悉清楚。再开始琢磨如何利用RecBole进行复现。</p>
<h3 id="正文-v7"><a class="header-anchor" href="#正文-v7">¶</a>正文</h3>
<p>译作《用于点击率预测的利用知识蒸馏的有向无环图分解机》</p>
<h4 id="摘要-v4"><a class="header-anchor" href="#摘要-v4">¶</a>摘要</h4>
<p>网络规模的推荐系统中<strong>高维稀疏数据增长</strong>，在CTR预测任务中<strong>学习高阶特征交互</strong>的计算成本大大增加。</p>
<p>一些基于<font color="red">知识蒸馏</font>的方法将知识从复杂的教师模型转换成浅层的学生模型，<font color="red">加速模型推理</font>。但是知识蒸馏会导致模型<font color="red">精度下降</font>。如何<font color="red">平衡浅层学生模型的效率和效果</font>是一个挑战。</p>
<p>为了解决这个问题，我们提出一个有向无环图分解机（DAGFM），通过知识蒸馏从现有的复杂交互模型当中学习高阶特征交互，用于CTR预测。提出的轻量级学生模型DAGFM可以从教师网络当中学习任意明确的特征交互，实现<font color="red">近似无损的性能</font>，通过动态编程算法得到证明。改进的模型DAGFM+可以有效地从任何复杂的教师模型中提炼出显性和隐性特征的相互作用。效果甚佳。</p>
<h4 id="简介-v3"><a class="header-anchor" href="#简介-v3">¶</a>简介</h4>
<p>点击率（CTR）预测的目的是预测用户点击某个项目的概率。CTR预测中实现良好性能的<strong>关键</strong>是<font color="red">学习有效的高阶特征交互</font>。最大的挑战之一是<font color="red">原始特征的高阶交互</font>建模的高计算成本：原始特征数量增加之后，特征组合的数量会指数增长。<font color="red">原始特征本身通常都是高度稀疏</font>的（标识符特征被编码为one-hot向量之后很稀疏、从上游任务（视觉信息）建立的多文件向量也是），再在此上计算高阶特征交互非常耗时。</p>
<p>需要一种轻量级的CTR预测的推荐算法简化在线推理过程，从而避免实际行业中计算成本爆炸。</p>
<p>目前有一些努力，利用<font color="red">知识蒸馏（KD）技术</font>将知识从复杂的教师模型转移到学习参数减少的浅层的学生模型，加快<font color="red">模型推理速度</font>。但是降低学习参数的KD模型的代价是<font color="red">模型精度下降</font>。</p>
<p>提出一个轻量级的基于知识蒸馏的DAGFM预测CTR。设计一个具有<font color="red">较少学习参数</font>的影子学生模型，但是<font color="red">保持</font>现有的复杂交互模型<font color="red">提取高阶特征交互的能力</font>。</p>
<p>具体地说，有向无环图当中每一个<font color="red">节点代表一个特征域</font>，不同节点通过不成环的有向边连接。<font color="red">节点间的连接，代表特征的交互</font>，用DAG中的边的<font color="red">可学习权重</font>（毕竟不同的特征交互作用是不一样的）来模拟。通过特定的交互学习函数（内部、外部、内核），DAG上的特征交互作用可以转化为明确的任意顺序的交互。</p>
<p>为了从<font color="red">隐性特征交互</font>模型（AutoInt、FibiNet）中提炼知识，进一步改进DAGFM，多层感知机（MLP）被集成进去，因此DAGFM+可以学习任何显性和隐性的特征交互。</p>
<h4 id="Preliminary（初步的？知识预备？）"><a class="header-anchor" href="#Preliminary（初步的？知识预备？）">¶</a>Preliminary（初步的？知识预备？）</h4>
<p>首先介绍CTR预测任务，然后介绍其中的显性高阶特征交互和交互学习函数。</p>
<h5 id="CTR预测"><a class="header-anchor" href="#CTR预测">¶</a>CTR预测</h5>
<p>点击率预测就是预测用户点击某个项目的概率（给你用户信息和项目信息）。具体说，就是给定m个特征字段，用x={x1,x2,…,xm}表示<font color="red">用户和项目特征</font>。标签y∈{0，1}代表是否点击。根据x进行预测。CTR预测任务中，取得良好性能的<font color="red">关键是学习有效的高阶特征交互</font>。</p>
<h5 id="高阶特征交互"><a class="header-anchor" href="#高阶特征交互">¶</a>高阶特征交互</h5>
<p>给定输入特征x={x1,x2,…,xm}，x的嵌入特征表示为{e1,e2,…,em}（向量降维）。</p>
<p>显示特征交互可以表示为</p>
<img src="/posts/1347074556/i1.png" alt="显示特征交互公式" style="zoom:50%;">
<p>∅代表特征交互函数。</p>
<img src="/posts/1347074556/i2.png" alt="二阶特征交互公式" style="zoom:50%;">
<p>（这两个公式还是比较好理解的）</p>
<h5 id="交互学习函数"><a class="header-anchor" href="#交互学习函数">¶</a>交互学习函数</h5>
<p><font color="red">特征交互学习函数</font>定义了计算<font color="red">特征间交互作用的方式</font>。不同的交互模型使用不同的交互学习函数。</p>
<ol>
<li>
<p>基本的内部交互学习函数。</p>
<p>现有研究中最常用的交互学习函数表述为：</p>
<img src="/posts/1347074556/i3.png" alt="基本的内部交互学习函数" style="zoom:75%;">
<p>代表element-wise product（Hadamard product），含义是两个矩阵对应位置元素进行乘积。其实就是<font color="red">向量点积</font>。</p>
</li>
<li>
<p>加权的内部交互学习函数。</p>
<p>上述方法<font color="red">不能捕捉到不同场景的特征信息</font>（因为所有特征交互都一视同仁了），导致梯度耦合问题。为了解决这个问题，提出了许多<font color="red">场景感知的变体</font>，使用权重参数来模拟不同场景的特征交互作用。</p>
<img src="/posts/1347074556/i4.png" alt="加权的内部交互学习函数" style="zoom:60%;">
<p>wi,j是i和j的权向量。</p>
</li>
<li>
<p>内核的交互学习函数。</p>
<p>通过扩展权重向量的维度，最近的研究提出了更为强大的交互学习函数：</p>
<img src="/posts/1347074556/i5.png" alt="内核的交互学习函数" style="zoom:60%;">
<p>Wi,j是学习权重矩阵。</p>
</li>
</ol>
<p>纳入了交互权重之后，有了<font color="red">很大的改进</font>。但是模型的<font color="red">复杂度也大大增加</font>，列举所有不同场景权重的高阶特征交互是NP问题。大多数现有的高阶特征交互模型通过增加参数来提高模型能力，但是<font color="red">代价是极高的计算成本</font>，显然不太符合实际。</p>
<p>-------------手动分割线，去外婆家吃午饭</p>
<p>-------------我又回来啦，下午继续干活</p>
<h4 id="方法论-v2"><a class="header-anchor" href="#方法论-v2">¶</a>方法论</h4>
<p>为了<font color="red">低计算成本下提高模型性能</font>，提出了一种基于知识蒸馏的有向无环图分解机，其中一个轻量级的学生模型有向无环图分解机设计来从现有的复杂的教师模型当中学习高阶的特征交互。</p>
<h5 id="有向无环图分解机"><a class="header-anchor" href="#有向无环图分解机">¶</a>有向无环图分解机</h5>
<p>设计的轻量级学生模型就是有向无环图分解机DAGFM。结构如下图。先介绍其构造和信息交互过程，然后介绍提出的高效外部交互学习函数。</p>
<img src="/posts/1347074556/i6.png" alt="DAGFM的架构" style="zoom:35%;">
<ol>
<li>
<p>DAG的构建。</p>
<p>如架构图所示，给定输入特征x={x1,x2,…,xm}。嵌入层将输入的特征从A到B映射出去（高维稀疏空间到低维稠密空间、ei=xiWi）。</p>
<p>有向无环图定义为G=(N, E)。其中<font color="red">每个节点</font>ni∈N对应一个<font color="red">特征域</font>，|N|=m。每个节点ni的初始状态设置为ei，即h1i=ei。节点ni到nj（j&gt;i）的<font color="red">边是有指向</font>的，控制着不同特征域的<font color="red">交互权重</font>。</p>
</li>
<li>
<p>在DAG上学习特征的交互。</p>
<p>特征之间的交互可以以<font color="red">递归的方式</font>建模为DAG上的**<font color="red">信息传播过程</font>**。在每一个传播层，每个节点都会汇总来自<font color="red">邻居的状态</font>与<font color="red">自身的初始状态</font>h1i来更新状态向量。形式上，传播层t的节点ni表示为：</p>
<img src="/posts/1347074556/i7.png" alt="传播公式" style="zoom:65%;">
<p>初始层t=0。其中N (𝑖) = { 𝑗 |𝑛𝑗 → 𝑛𝑖 ∈ E}，也就是<font color="red">j∈i和指向i的所有节点</font>，𝜙 是交互学习函数。</p>
<p>为了获得用于CTR预测的高阶特征交互信息，首先在每个交互步骤对每个节点的隐藏状态向量应用了sum pooling</p>
<img src="/posts/1347074556/i8.png" alt="max pooling" style="zoom:70%;">
<p>其中ht(i,k)表示hti的第k个元素。<font color="red"><strong>其实就是向量元素全相加</strong></font>（因为d是embedding size）。</p>
<p>计算完毕之后，把第t层的所有节点的这个值连起来，形成<img src="/posts/1347074556/i9.png" alt="连接" style="zoom:50%;">不同阶的特征交互就表示为p=[p1;p2;…;pl]，传播层的数量为l-1。</p>
<p>最后用于CTR预测的函数表述为<img src="/posts/1347074556/i10.png" alt="CTR预测函数" style="zoom:50%;">σ是sigmoid激活函数，w是转换向量，b是偏置。</p>
</li>
<li>
<p>外交互学习函数</p>
<p>DAGFM的特征交互学习函数𝜙很灵活。可以利用最常用的<font color="red">内交互学习函数</font>，也可以用模型能力更强的<font color="red">内核交互学习函数</font>。</p>
<p>为了<font color="red">降低内核交互</font>学习函数的<font color="red">计算复杂度</font>，提出了一个简化的<font color="red">外部交互学习函数</font>。</p>
<p>内核交互学习函数中的学习权重矩阵是：</p>
<img src="/posts/1347074556/i11.png" alt="学习权重矩阵" style="zoom:50%;">
<p>p、q都是分解向量。</p>
<p>（<font color="orange">我个人的理解是比如权重矩阵是m×n的，权重矩阵内部的元素肯定是学习得到了，那么初始化的时候可以用分解向量1×m和1×n矩阵乘得到m×n。实际上矩阵是d×d的</font>）</p>
<p>那么外部交互函数就可以定义为</p>
<img src="/posts/1347074556/i12.png" alt="外部交互函数的定义" style="zoom:60%;">
<p><font color="red">前者是1×d × d×1，后者是1×d · 1×d，把复杂度从O（n2）降到了O（n）</font>。</p>
<p>-------------手动分割线，继续学习</p>
</li>
</ol>
<h5 id="DAGFM当中任意阶的交互学习"><a class="header-anchor" href="#DAGFM当中任意阶的交互学习">¶</a>DAGFM当中任意阶的交互学习</h5>
<p>本节证明了在DAGFM中学习到的特征交互与动态编程算法中不同的唯一加权路径相一致，<font color="red">显示了DAGFM学习任意阶特征交互的能力</font>。</p>
<p>我们将一个**<font color="red">特征交互的后缀定义为具有最大下标的特征</font>**。比如特征交互：e2e3、e3e4e5，其后缀分别为e3和e5。</p>
<p>让<font color="red">Sti表示所有以ei为后缀的t阶特征交互</font>。以以e3为后缀的2阶特征交互为例，S23={e1e3,e2e3,e3e3}，以ei为后缀的1阶特征交互e1i={ei}。</p>
<p>在动态编程算法中，<font color="red">hti就是sti内元素的累加</font>。<strong>事实上，所有以<font color="red">ei</font>为后缀的<font color="red">t+1</font>阶特征交互可以被表示为ei和（以<font color="red">ej（j&lt;=i)</font>为后缀的<font color="red">t阶</font>特征交互的交互）</strong>。</p>
<p>因此状态转移方程可以改写如下：</p>
<img src="/posts/1347074556/i13.png" alt="状态转移方程" style="zoom:50%;">
<p>（<font color="orange">这个公式应该还是比较好理解的</font>）</p>
<p>在DAGFM当中，特征的交互是基于有向无环图进行传播的，节点ni的另据N(i)是直连ni的节点nj集合，j&lt;i。因此可以稍加改写上面的公式：</p>
<img src="/posts/1347074556/i14.png" alt="状态转移方程" style="zoom:50%;">
<p>这里的交互学习函数是基本的内交互学习函数。</p>
<p>从上述两个公式可以看出，DAGFM的<font color="red">每个特征交互都和DP图当中的唯一路径匹配</font>。每个k阶特征交互对应从第一层开始的长度为k-1的唯一路径。对状态向量进行求和，所有路径都可以遍历，这也说明**<font color="red">所有特征交互都可以在DAGFM当中被建模</font>**。</p>
<p>对于具有内部和内核交互学习函数的图传播过程，通过将权重分配为全1向量和矩阵可以等同。<strong>权重也可以在训练过程中学习</strong>，这使得DAGFM能对<font color="red">不同语义信息的特征交互建模</font>。</p>
<p>比如特征：男人、工作日、加拿大、晴天，那么男人×工作日×加拿大的特征交互就对应n11-&gt;n22-&gt;n33，边代表权重，控制语义强度。</p>
<p>DAGFM传播图示例：</p>
<img src="/posts/1347074556/i15.png" alt="传播图示例" style="zoom:50%;">
<h5 id="知识蒸馏的过程"><a class="header-anchor" href="#知识蒸馏的过程">¶</a>知识蒸馏的过程</h5>
<img src="/posts/1347074556/i16.png" alt="KD-DAGFM整体架构图" style="zoom:50%;">
<p>KD-DAGFM的整体架构图如上所示。</p>
<p>在知识蒸馏的过程中，学生网络DAGFM从教师网络学习特征交互的知识。为了保证学生和教师网络的<font color="red">特征空间相同</font>，将<font color="red">教师网络的嵌入层与学生网络共享</font>。</p>
<p>知识蒸馏的损失函数：</p>
<img src="/posts/1347074556/i17.png" alt="知识蒸馏的损失函数" style="zoom:50%;">
<p>N是训练实例的总数，T和S是学习函数，𝝍 和𝝋分别是教师和学生网络的参数。（<font color="red">其实也就是衡量教师网络和学生网络的效果差距，利用方差的形式</font>）</p>
<p>我们采用交叉熵损失函数进行CTR预测：</p>
<img src="/posts/1347074556/i18.png" alt="交叉熵损失函数" style="zoom:50%;">
<p>最终优化目标是：</p>
<img src="/posts/1347074556/i19.png" alt="最终优化目标" style="zoom:60%;">
<p><strong><font color="red">𝛼, 𝛽 是平衡两个损失函数的权重的超参数</font></strong>。</p>
<p>经过知识蒸馏，学生模型可以很好地从教师网络当中<font color="red">学习到有用的特征交互</font>。<strong><font color="orange">其实也就是同时从现有的教师模型和结果当中学习</font></strong>。</p>
<p><strong><font color="red">但是但是</font></strong></p>
<p>学生的特征嵌入继承自教师，教师在蒸馏过程中没有训练，可能导致欠拟合问题，导致学生模型不理想。为了缓解这个问题，他们微调了学生模型（没有说具体方法）。</p>
<p><font color="red"><strong>以上基本上就把具体的模型和方法全都学完了。</strong></font></p>
<h4 id="实验-v2"><a class="header-anchor" href="#实验-v2">¶</a>实验</h4>
<p>接下来就是实验证明KD-DAGFM的效果了。实验当中用了四个真实世界当中的数据集：Criteo、Avazu、MovieLens-1M和微信。</p>
<p>Criteo是最流行的CTR预测基准数据集，包含7天内的用户日志。Avazu包含7天的用户日志，用于Avazu CTR预测比赛。MoviesLens-1M是推荐系统研究中最受欢迎的数据集。</p>
<h5 id="学生模型DAGFM的有效性分析"><a class="header-anchor" href="#学生模型DAGFM的有效性分析">¶</a>学生模型DAGFM的有效性分析</h5>
<p>这一小节，旨在<font color="red">证明学生模型DAGFM能达到复杂教师模型的近似无损性能</font>。</p>
<p>一方面和教师模型比，是不是性能无损；另一方面和其他学生模型比较是否性能提升。</p>
<ol>
<li>
<p>教师网络。</p>
<p>使用xDeepFM和DCNV2。</p>
</li>
<li>
<p>学生网络。</p>
<p>使用常用的轻型模型FwFM、FmFM、tiny MLP作为学生模型进行比较。对于DAGFM，采用了教师和交互学习函数的最佳组合，CIN和DAGFM-inner和DAGFM-minor。</p>
</li>
</ol>
<p>结果显示，和教师模型相比学生模型DAGFM的复杂度大大降低，和其他学生模型相比，DAGFM的复杂度更低，并且损失也更小。</p>
<h5 id="KD-DAGFM的实验结果"><a class="header-anchor" href="#KD-DAGFM的实验结果">¶</a>KD-DAGFM的实验结果</h5>
<p>接下来就是利用实验证明KD-DAGFM模型在CTR预测任务当中的有效性了。</p>
<h6 id="比较方法"><a class="header-anchor" href="#比较方法">¶</a>比较方法</h6>
<ul>
<li>FmFM</li>
<li>FwFM</li>
<li>xDeepFM</li>
<li>DCNV2</li>
<li>FiBiNet</li>
<li>AutoInt</li>
<li>FiGNN</li>
<li>GraphFM</li>
<li>ECKD</li>
</ul>
<h6 id="实施细节-v2"><a class="header-anchor" href="#实施细节-v2">¶</a>实施细节</h6>
<p>参数设置直接看图就好。</p>
<img src="/posts/1347074556/i20.png" alt="参数设置" style="zoom:60%;">
<h6 id="实验结果-v2"><a class="header-anchor" href="#实验结果-v2">¶</a>实验结果</h6>
<ol>
<li>深度方法比浅度方法有效，说明了高阶特征交互的重要性</li>
<li>显式方法比隐式方法更有效</li>
<li>基于图的模型很有竞争力</li>
<li>知识蒸馏也非常有效</li>
<li>KD-DAGFM比DAGFM更有效</li>
</ol>
<p>KD-DAGFM能够有效地学习高阶特征交互的相互作用，较少的参数也更贴近现实应用。</p>
<h5 id="KD-DAGFM的实验分析"><a class="header-anchor" href="#KD-DAGFM的实验分析">¶</a>KD-DAGFM的实验分析</h5>
<p>本节分析影响模型性能的因素。</p>
<h6 id="传播层数的影响"><a class="header-anchor" href="#传播层数的影响">¶</a>传播层数的影响</h6>
<p>传播层数的影响其实就是特征交互的阶数的影响，传播层数越多，那么特征交互的阶数就越高。</p>
<p><font color="red">随着层数的增加，模型的性能变得更好，表面学习高阶特征交互信息对于CTR预测的重要性</font>。</p>
<h6 id="不同交互学习函数的影响"><a class="header-anchor" href="#不同交互学习函数的影响">¶</a>不同交互学习函数的影响</h6>
<p>利用前文提出的<font color="red">外部交互学习函数的DAGFM可以很好地适用于不同的教师模型</font>。</p>
<h6 id="通用的蒸馏模型KD-DAGFM"><a class="header-anchor" href="#通用的蒸馏模型KD-DAGFM">¶</a>通用的蒸馏模型KD-DAGFM+</h6>
<p>考虑到教师模型的复杂性（同时学习显性特征和隐性特征的交互），为了有效地从显性和隐性特征交互中提取知识，提出了KD-DAGFM+，在学生模型DAGFM之后附加一个MLP组件（DAGFM所有节点地状态串联起来输入MLP）。KD-DAGFM+实现了近乎无损的蒸馏性能。</p>
<h4 id="相关工作"><a class="header-anchor" href="#相关工作">¶</a>相关工作</h4>
<h5 id="特征交互学习"><a class="header-anchor" href="#特征交互学习">¶</a>特征交互学习</h5>
<p>学习特征的交互是CTR预测任务当中的基本问题…</p>
<h5 id="图神经网络"><a class="header-anchor" href="#图神经网络">¶</a>图神经网络</h5>
<h5 id="知识蒸馏"><a class="header-anchor" href="#知识蒸馏">¶</a>知识蒸馏</h5>
<p>知识蒸馏（Knowledge Distillation，KD）是一种从复杂模型当中提取知识并将其压缩到一个简单模型中的方法</p>
<h4 id="总结-v3"><a class="header-anchor" href="#总结-v3">¶</a>总结</h4>
<p>本论文提出一个轻量级的知识蒸馏模型KD-DAGFM，该模型是一个用于CTR预测的有向无环图神经网络。学习复杂教师网络当中的特征交互、大大降低计算资源成本。效果甚佳…</p>
<p>这样论文就阅读完了。大致的思路梳理就是：由于特征通常是稀疏的高维度向量，再加上需要学习高阶的特征交互，因此计算量通常比较爆炸。知识蒸馏可以降低模型的复杂度，但是模型精度会下降。因此提出了他们的KD-DAGFM模型。先从CTR任务说起，再说特征交互、交互函数，然后介绍DAGFM的具体工作原理。最后探讨一下性能。DAGFM就是用节点代表特征向量，用边代表特征交互。然后通过多层传播模拟高阶特征交互。</p>
<p>接下来开始尝试复现模型叭~</p>
]]></content>
      <categories>
        <category>科研</category>
      </categories>
      <tags>
        <tag>科研实习</tag>
        <tag>RecBole</tag>
        <tag>推荐算法</tag>
      </tags>
  </entry>
  <entry>
    <title>近期读书笔记（22/1/5）</title>
    <url>/posts/3620005199.html</url>
    <content><![CDATA[<p>好久没写读书笔记了，最近在看《海边的卡夫卡》，看到很多值得记录的句子，书是学校借来的，没法做批注什么的，看到喜欢的句子也只能把那一页折起来，喜欢的句子多了就急需整理。此刻，写了一天OS的期末报告有点累了，就整理整理当作放松吧。</p>
<p>以下摘抄均来自《海边的卡夫卡》（村上春树）。</p>
<ul>
<li>
<p>我自由了。我闭起眼睛，就自己自由了这点思索一阵子。但是，我还不能完全理解自由这东西是怎么回事。现在明白的只是自己成了孤身一人。孤身一人住在陌生的地方，如丢了指南针丢了地图的孤独的探险家。莫非这就是自由的含义？连这点我都稀里糊涂。于是我不再思索。</p>
</li>
<li>
<p>百年之后，置身此处的人们（也包括我）应该从地上荡然无存，化为尘埃化为灰烬。如此一想，我产生了一种不可思议的心情。这里所有的人或物都显得虚无缥缈，仿佛即将被风吹散消失。我伸开自己双手定定地细看。我到底为了什么如此东奔西窜呢？何苦这么苦苦挣扎求生呢？</p>
<p>但我摇摇头，不再往外看，不再想百年后的事。要想现在的事，图书馆有该看的书，体育馆有要对付的器材。考虑那么远的事又有什么用呢！</p>
<p>（我倒不觉得生活是苦苦挣扎地求生，我现在倒十分享受“挣扎”的生活。不知道以后的生活会怎么样，最近几年我倒不曾感到生活的苦恼&gt;快乐，人世间还是十分值得来走上一遭的）</p>
</li>
<li>
<p>时间对于他不是主要问题。手表他都没戴。中田自有适合于中田的时间流程。早晨来了即变量，太阳落了即天黑。天黑了就去左近澡堂，从澡堂回来就想睡觉。星期天澡堂有时不开，那是扭头回家即可。吃饭时间到了自然饥肠辘辘，领补贴那天来了（总有人告诉他那天快到了），即知一个月已过。领来补贴的第二天去附近理发店理发。夏天到了，区里的人让他吃鳗鱼；正月来了，区里的人为他送年糕。</p>
<p>（这样的生活对于中田这种非正常思维的人来说简直比我们大多数人的生活还要快乐，没什么烦恼可言。但是对大多数人来说，过这种生活都不会很快乐吧）</p>
</li>
<li>
<p>…那里有一切，但没有部分。没有部分，也就没必要将什么和什么换来换去。无须卸掉或安上什么。不必冥思苦索，委身于一切即可。对中田来说，那是比什么都值得庆幸的。</p>
<p>（村上春树的作品总是会突然来上这么一大段高深的描写，以我粗浅的文学水平，有时候实在觉得摸不着头脑，不过我看书向来不求甚解，读不懂的文字也不会反复读，毕竟我个人认为我还在培养阅读兴趣和积攒阅读量的时候，看不懂倒也十分正常。不过有时候，看罢整部作品，会回味过来这些奇怪的描写有何韵味，比如《挪威的森林》当中开篇直子关于“深井”的描述，不过这种情况倒是少数）</p>
</li>
<li>
<p>尽管世界上每一个体的存在是艰辛而孤独的，但就记忆的原型而言我们则密不可分地连在一起——对先生这种一以贯之的世界观我非常理解。因为，在人生旅途中，我本身也有许多同样的感受。请允许我在偏远的地方为你祝福。</p>
</li>
<li>
<p>几乎所有的事情都被淡忘。无论是那场大战，还是无可挽回的人之生死，一切都正在成为遥远的往事。日常生活支配了我们的心，诸多大事如冰冷古老的星球退往意识外围。我们有太多必须日常思考的琐事，有太多必须从头学习的东西：新的样式、新的知识、新的技术、新的话语…可是与此同时，也有的东西无论经历多长时间无论其间发生什么也是绝对忘却不了的。有磨损不掉的记忆，有要石一般存留心中的场景。</p>
</li>
<li>
<p>那是生死攸关的体验。后来好歹离开，重新回到井外生活当中。至于主人公从那场体验中得到了什么教训，生活态度是否因此改变，对人生是否有了深入思考，以及是否对社会形态怀有疑问…凡此种种作品都没有写，他作为一个人成长起来那种类似筋骨的东西也几乎没有。读完后有一种莫名其妙的心情——这部小说到底想说什么呢？不过怎么说呢，这“不知其说什么”的部分奇异地留在了心里。倒是很难表达清楚。</p>
<p>（这种“奇怪”的作品当然可以从各个角度理解出读它的意义，不过对我来说，倘若我去读那样的作品，最简单粗俗的意义就是见识更多了，见识了不同的人的思考方式与其生活经历，这自然也不坏）</p>
</li>
<li>
<p>三四郎在故事中成长。碰壁，碰壁后认真思考，争取跨越过去。不错吧？而《矿工》的主人公则截然不同，对于眼前出现的东西他只是看个没完没了，原封不动地接受而已。一时的感想之类诚然有，却都不是特别认真的东西，或者不如说他总是在愁眉不展地回顾自己闹出的恋爱风波。至少表面上他下井时和出井后的状态没多大差别。也就是说，他几乎没有自己作出过判断或选择。怎么说呢，他活得十分被动。不过我是这样想的：人这东西实际上恐怕是很难以自己的力量加以选择的。</p>
<p>（我们通常看的故事的主人公似乎都十分的正派，似乎遇到困难就会努力克服之并且成长，但是实际上很多人也许并不是这样的积极，也许这才符合大部分人的生活写照）</p>
</li>
</ul>
<p>本想以整理阅读笔记作为放松，花了快一小时的时间怎么感觉更累了不少呢。今天先整理到这里，再听歌放松一会，争取今天把OS干掉。</p>
<p>----------------------------------------------手动分割线</p>
<p>我又回来了，今天花了一个上午总算把OS的期末考核给了结了，阶段性的小胜利。趁着等外卖的功夫，继续整理读书笔记吧。</p>
<ul>
<li>
<p>不过有一点可以断言：某种具有不完美性的作品因其不完美而强有力地吸引人们的心——至少强有力地吸引某种人的心。比如你为漱石《矿工》所吸引。因为那里边有《心》和《三四郎》那样的完美作品没有的吸引力。你发现了那部作品。换言之，那部作品发现了你。舒伯特的《D大调奏鸣曲》也是如此，那里边具有惟独那部作品才有的拨动人心的方式。</p>
<p>（听起来很有道理，但是目前的我，甚至还不具备评判作品是否具有不完美性的能力，现阶段的看书似乎只是单方面的输入，顶多对输入的内容加以思考和过滤，但是并不具备评判的能力）</p>
</li>
<li>
<p>而我倾听《D大调奏鸣曲》，从中听出人之活动的局限，得知某种不完美性只能通过无数不完美的聚集方能具体表现出来，这点给我以鼓励。</p>
</li>
<li>
<p>刚听的时候我也感到单调，你那样的年龄那是当然的。但你很快就会领悟。在这个世界上，不单调的东西让人很快厌倦，不让人厌倦的大多是单调的东西。向来如此。我的人生可以有把玩单调的时间，但没有忍受厌倦的余地。而大部分人分不出二者的差别。</p>
<p>（<strong>不单调的东西让人很快厌倦，不让人厌倦的大多是单调的东西</strong>，此前倒是从来没从这个角度考虑过问题。在直接的潜意识里，单调和厌倦似乎是挂钩的，单调的东西容易惹人厌倦。但是似乎我们真正一直坚持的都是单调的事情，日复一日的上学/上班，坚持跑步/健身，不过这究竟是因为单调事物本身更易坚持还是因为外界的压力导致，也很难说清楚。不单调的东西会让人很快厌倦吗？很难说，比如打游戏，如果把一个人学习/上班的时间全都换成打游戏，他会快乐吗？可以长久坚持吗？我不知道其他人是何反应，但是我肯定是无法坚持的）</p>
</li>
<li>
<p>“你已习惯孤独了。”大岛说。我点头。“不过，孤独的种类也林林总总，其中很可能有你预想不到的孤独。”“比如什么样的？”大岛用指尖顶了一下眼镜桥：“无可奉告。因为<strong>孤独因你本身而千变万化。</strong>”</p>
</li>
<li>
<p>可是中田君，世上讲不通这种道理的地方也是有的，谁也不为你考虑什么合适不合适的情况也是存在的，这东西你必须理解。</p>
</li>
<li>
<p>但没有办法。没有痛苦是不行的。注定如此。又是注定。喏喏，这里面注定的事委实太多了，奈何奈何！</p>
<p>（注定的事情确实太多。但是为什么没有痛苦是不行的呢？人人都有痛苦是必然的了。但是这必然性又是什么，苦其心志劳其筋骨吗？</p>
</li>
<li>
<p>“闭眼睛不行！”琼尼-沃克斩钉截铁地说，“这也是注定事项，不能闭眼睛。<strong>闭了眼睛情况也丝毫不会好转</strong>。不是说闭起眼什么就会消失，恰恰相反，睁开眼时事情变得更糟。我们居住的就是这样的世界。中田君，要好好睁开眼睛。**闭眼睛是怯懦的表现，把眼睛从现实移开是胆小鬼的行为。**即使在你闭眼捂耳之时，时间也照样挺进。”</p>
<p>（“克服恐惧最好的办法就是面对恐惧，加油，奥里给！”很熟悉的话语，其实和上面文学性的表述也差不多。逃避确实不会改变困难和事实，直面困难确实有时候让人从感官上觉得困难变小了。比如我自己经常的体会是：当你很冷的时候，你越是打哆嗦和缩成一团，你就越觉得冷。如果你昂首挺胸，直接面对寒冷，反而并不觉得那么冷了。但是想想这也绝非什么定理，有时候躲避恐惧确实不坏。比如小时候去那种类似鬼屋的地方玩，我吓得不行就直接闭眼睛，似乎困难也更小了）</p>
</li>
</ul>
<p>好了，近期想要记录的句子都整理完毕啦。《海边的卡夫卡》才看了不到二分之一呢。现在准备回家包饺子啦。明天回将乐去。生活很美好~</p>
]]></content>
      <categories>
        <category>书海徜徉</category>
      </categories>
      <tags>
        <tag>阅读笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>简单的文献综述-阶段1</title>
    <url>/posts/366870289.html</url>
    <content><![CDATA[<h3 id="论文篇目"><a class="header-anchor" href="#论文篇目">¶</a>论文篇目</h3>
<p>最近看的三篇论文信息如下图：</p>
<p><img src="/posts/366870289/i1.png" alt="i"></p>
<p><img src="/posts/366870289/i2.png" alt="i"></p>
<p><img src="/posts/366870289/i3.png" alt="i"></p>
<p>三篇论文阅读笔记的链接如下：</p>
<blockquote>
<p><a href="https://yangyy.top/2022/10/03/%E3%80%8A%E7%94%A8%E8%87%AA%E7%9B%91%E7%9D%A3%E7%9A%84%E5%AF%B9%E6%AF%94%E9%A2%84%E6%B5%8B%E7%BC%96%E7%A0%81%E8%BF%9B%E8%A1%8C%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E5%8F%98%E5%8C%96%E7%82%B9%E6%A3%80%E6%B5%8B%E3%80%8B%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/">《用自监督的对比预测编码进行时间序列变化点检测》个人笔记 | Yangyy’s Life</a></p>
<p><a href="https://yangyy.top/2022/10/06/%E3%80%8A%E4%BA%91%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%B7%A8%E6%95%B0%E6%8D%AE%E9%9B%86%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B%E3%80%8B%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/">《云系统的跨数据集时间序列异常检测》个人笔记 | Yangyy’s Life</a></p>
<p><a href="https://yangyy.top/2022/10/12/%E3%80%8A%E5%BE%AE%E8%BD%AF%E5%85%AC%E5%8F%B8%E7%9A%84%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B%E6%9C%8D%E5%8A%A1%E3%80%8B%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/">《微软公司的时间序列异常检测服务》个人笔记 | Yangyy’s Life</a></p>
</blockquote>
<h3 id="概述"><a class="header-anchor" href="#概述">¶</a>概述</h3>
<p>这三篇文章的共同核心就是<strong>时间序列异常检测</strong>，虽然都是异常检测，但是实际还是有一定差别。前两篇是“<strong>Anomaly Detection</strong>”，第三篇是“<strong>Change Point Detection</strong>”，前者是异常检测，后者是变化点检测。异常检测即“不合群”的点，变化点检测就是过渡的点。不过过渡点通常也是“不合群”的点。</p>
<h3 id="对于检测方法的预期"><a class="header-anchor" href="#对于检测方法的预期">¶</a>对于检测方法的预期</h3>
<p>三篇论文大致都表达了希望检测方法<strong>准确、高效、通用</strong>以适应工业界的需求。</p>
<h3 id="遇到的困难"><a class="header-anchor" href="#遇到的困难">¶</a>遇到的困难</h3>
<p>当前的检测方法主要分为<em>传统统计模型、监督学习模型、无监督学习模型</em>。</p>
<p>如果数据集的时间序列有足够数量的标签，监督学习（CNN等）其实效果很好。但是在工业界，需要检测的数据集很庞大，手工标记非常困难，所以很少有直接采用监督学习进行预测的。</p>
<p>那么传统统计模型和无监督学习模型虽然不需要手工标记数据，但是实验的效果并不理想。</p>
<p>在”自监督对比预测编码“文章中分析到，对于变化点的检测，传统的统计模型比如根据统计学成本函数最优化，选择合适的变化点（个人的理解就是类似于分段最小二乘法、动态规划）。而且通常是侧重于某些属性/维度。</p>
<h3 id="提出的新方法"><a class="header-anchor" href="#提出的新方法">¶</a>提出的新方法</h3>
<p>三篇文章提出的新方法可以概括为“自监督对比预测编码”、“跨数据集检测”、“频谱残差+CNN”。</p>
<p>其实我个人感觉就是尽量贴近监督学习，通过不同的方式，在减少标记数据成本的条件下，达到监督学习的效果。</p>
<h4 id="“自监督对比预测编码”——变化点检测"><a class="header-anchor" href="#“自监督对比预测编码”——变化点检测">¶</a>“自监督对比预测编码”——变化点检测</h4>
<p>基础的思路：根据历史数据预测未来数据，如果现实数据和预测数据差别很大，说明变异点出现了。但是这种方法通常是针对一个属性，而且和统计分布有关。</p>
<p>自监督对比预测编码：自监督是检测器对每个时间窗口<strong>生成一个表征编码</strong>（类似于自动标记），预测时就根据时间窗口之间的余弦相似度来判断变化点。</p>
<p>关键就在于<strong>表征的生成</strong>。采用自动回归的深度卷积神经网络学习编码表示。这里对比预测需要学习相似和相异的属性，因此有正样本和负样本之分，正样本是相似的样本集，负样本是相异的样本集。所以会采集很多连续的时间窗口，子集内部就是正样本对，子集之间互为负样本。设置相应的损失函数即可。</p>
<h4 id="“跨数据集检测”"><a class="header-anchor" href="#“跨数据集检测”">¶</a>“跨数据集检测”</h4>
<p>因为监督学习效果好，但是标记成本高，无监督效果又不好。所以可以想到跨数据集检测的方法，基本思路：我们有一些历史的、有标记的数据，而且来自不同领域会有大量的标记数据集，但是因为领域有差别，所以预测新的数据集的时候不能用。但是并不是完全不能用，比如说<strong>触类旁通</strong>的思想，就是在这些<strong>已有数据集上学习到的“知识”，能不能迁移到目标数据集上</strong>。直接迁移肯定不行。</p>
<p>迁移学习+主动学习的方法可以。</p>
<h5 id="迁移学习"><a class="header-anchor" href="#迁移学习">¶</a>迁移学习</h5>
<p>对已有标签的源数据集和没有标签的目标数据集分别进行<strong>特征的归纳</strong>。特征归纳需要考虑三方面：统计特征、预测误差（多个模型）、时间序列（前后关联）。</p>
<p>归纳之后，对源域进行K-means聚类，因为源数据集可能是不同领域数据集的汇总。然后把部分的目标数据集作为样本，根据欧式距离分配到不同子源域。（<strong>这里的问题就是目标数据集不是应该是一类数据吗</strong>？）</p>
<p>此后，源域的特征还需要对目标域进行一次对齐（转换矩阵）。</p>
<h5 id="主动学习"><a class="header-anchor" href="#主动学习">¶</a>主动学习</h5>
<p>主动学习的思想就是利用一些目标域的数据进行<strong>人为标记，训练源域的检测器</strong>。为了尽量<strong>选择少并且有代表性的数据</strong>，根据<strong>不确定性和上下文多样性</strong>进行选择。</p>
<p>迁移学习+主动学习得到分类器。最终检测目标数据即可。</p>
<p>作者还控制变量对比了主动学习、迁移学习的组件的工作效果，都很好。</p>
<h4 id="“频谱残差-CNN”"><a class="header-anchor" href="#“频谱残差-CNN”">¶</a>“频谱残差+CNN”</h4>
<p>首先是希望用无监督的方法得到比较好的检测器。</p>
<p>受视觉显著性检测领域的启发（用光谱残差检测照片或者场景中突出的部分），实际上异常点在时间序列曲线当中也是视觉中突出的部分），所以采用SR进行识别。</p>
<h5 id="SR"><a class="header-anchor" href="#SR">¶</a>SR</h5>
<p>通过频谱残差分析，可以把时间序列转换成显著图/突出图。</p>
<p><img src="/posts/366870289/i4.png" alt="i"></p>
<p>异常点就会更加突出。</p>
<p>在这里其实可以简单根据阈值进行异常点识别了。但是为了更好的效果还是加上CNN。</p>
<p>提到了添加预测点。</p>
<h5 id="CNN"><a class="header-anchor" href="#CNN">¶</a>CNN</h5>
<p>因为SR模型已经可以简单输出有标签的数据集了，所以再加上CNN会更好。</p>
<p>首先人为地注入几个异常点。</p>
<p>再CNN。</p>
<h5 id="评价指标-v2"><a class="header-anchor" href="#评价指标-v2">¶</a>评价指标</h5>
<p>允许检测延迟。（有最小时延）</p>
<h4 id="总结-v4"><a class="header-anchor" href="#总结-v4">¶</a>总结</h4>
<p>三篇论文提出的方法都比各自提到的基准方法有了可以说是全面的提升。</p>
]]></content>
      <categories>
        <category>科研</category>
      </categories>
      <tags>
        <tag>异常检测</tag>
      </tags>
  </entry>
</search>
